/*! For license information please see main.0047db17.js.LICENSE.txt */
(self.webpackChunkcosmos_sdk_docs=self.webpackChunkcosmos_sdk_docs||[]).push([[40179],{20830:(e,t,n)=>{"use strict";n.d(t,{W:()=>i});var o=n(67294);function i(){return o.createElement("svg",{width:"20",height:"20",className:"DocSearch-Search-Icon",viewBox:"0 0 20 20"},o.createElement("path",{d:"M14.386 14.386l4.0877 4.0877-4.0877-4.0877c-2.9418 2.9419-7.7115 2.9419-10.6533 0-2.9419-2.9418-2.9419-7.7115 0-10.6533 2.9418-2.9419 7.7115-2.9419 10.6533 0 2.9419 2.9418 2.9419 7.7115 0 10.6533z",stroke:"currentColor",fill:"none",fillRule:"evenodd",strokeLinecap:"round",strokeLinejoin:"round"}))}},723:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var o=n(67294),i=n(87462),a=n(68356),s=n.n(a),r=n(16887);const d={"000314c3":[()=>n.e(93854).then(n.bind(n,99986)),"@site/docs/build/modules/feegrant/README.md",99986],"003ae6ae":[()=>n.e(95787).then(n.bind(n,12256)),"@site/versioned_docs/version-0.53/learn/advanced/10-ocap.md",12256],"00ec541b":[()=>n.e(98252).then(n.bind(n,42220)),"@site/versioned_docs/version-0.47/learn/advanced/10-ocap.md",42220],"017e5a67":[()=>n.e(67793).then(n.bind(n,51710)),"@site/versioned_docs/version-0.47/build/migrations/01-intro.md",51710],"0186c00a":[()=>n.e(30905).then(n.bind(n,60084)),"@site/versioned_docs/version-0.5/build/architecture/adr-003-dynamic-capability-store.md",60084],"018b1358":[()=>n.e(54365).then(n.bind(n,86672)),"@site/versioned_docs/version-0.47/user/run-node/07-multisig-guide.md",86672],"02008975":[()=>n.e(40411).then(n.bind(n,5823)),"@site/versioned_docs/version-0.47/build/modules/circuit/README.md",5823],"03e65fed":[()=>n.e(33012).then(n.bind(n,16547)),"@site/versioned_docs/version-0.47/build/architecture/adr-057-app-wiring.md",16547],"048bf676":[()=>n.e(17660).then(n.bind(n,79221)),"@site/versioned_docs/version-0.5/build/architecture/adr-030-authz-module.md",79221],"05182693":[()=>n.e(30847).then(n.bind(n,42659)),"@site/versioned_docs/version-0.53/build/architecture/adr-053-go-module-refactoring.md",42659],"05a322b5":[()=>n.e(10718).then(n.bind(n,17228)),"@site/docs/build/architecture/adr-039-epoched-staking.md",17228],"063835dd":[()=>n.e(97395).then(n.bind(n,11770)),"@site/versioned_docs/version-0.53/build/building-modules/01-module-manager.md",11770],"0652bb5c":[()=>n.e(359).then(n.bind(n,44217)),"@site/docs/build/architecture/adr-031-msg-service.md",44217],"06ba3929":[()=>n.e(57415).then(n.bind(n,38712)),"@site/versioned_docs/version-0.47/build/spec/SPEC_STANDARD.md",38712],"06df35bc":[()=>n.e(22357).then(n.t.bind(n,69295,19)),"~docs/default/version-0-5-metadata-prop-20e.json",69295],"075feee6":[()=>n.e(19567).then(n.bind(n,84706)),"@site/versioned_docs/version-0.53/build/modules/protocolpool/README.md",84706],"076872de":[()=>n.e(29759).then(n.bind(n,34963)),"@site/versioned_docs/version-0.47/build/tooling/README.md",34963],"078fe6d4":[()=>n.e(73357).then(n.bind(n,8511)),"@site/docs/tutorials/vote-extensions/auction-frontrunning/00-getting-started.md",8511],"07c0a7f7":[()=>n.e(21013).then(n.bind(n,89563)),"@site/versioned_docs/version-0.47/build/modules/distribution/README.md",89563],"07ee0384":[()=>n.e(52303).then(n.bind(n,78045)),"@site/versioned_docs/version-0.5/learn/beginner/02-query-lifecycle.md",78045],"08506419":[()=>n.e(46849).then(n.bind(n,7401)),"@site/versioned_docs/version-0.5/learn/intro/02-sdk-app-architecture.md",7401],"08539765":[()=>n.e(59434).then(n.bind(n,4174)),"@site/docs/user/run-node/05-run-testnet.md",4174],"08637ee4":[()=>n.e(20504).then(n.bind(n,13404)),"@site/docs/build/modules/epochs/README.md",13404],"08da1826":[()=>n.e(48405).then(n.bind(n,23960)),"@site/versioned_docs/version-0.5/build/architecture/adr-037-gov-split-vote.md",23960],"0979a3d3":[()=>n.e(13320).then(n.bind(n,76739)),"@site/docs/build/architecture/adr-076-tx-malleability.md",76739],"0a39f69f":[()=>n.e(4120).then(n.bind(n,28923)),"@site/versioned_docs/version-0.5/build/building-modules/00-intro.md",28923],"0a77e0df":[()=>n.e(82434).then(n.bind(n,3088)),"@site/versioned_docs/version-0.53/build/building-modules/14-simulator.md",3088],"0aaa5dc7":[()=>n.e(37645).then(n.bind(n,34536)),"@site/versioned_docs/version-0.53/tutorials/tutorials.md",34536],"0ac4958a":[()=>n.e(21894).then(n.bind(n,65176)),"@site/versioned_docs/version-0.5/build/architecture/adr-004-split-denomination-keys.md",65176],"0b8f22d8":[()=>n.e(94791).then(n.bind(n,5466)),"@site/versioned_docs/version-0.47/build/building-modules/04-query-services.md",5466],"0cfc3159":[()=>n.e(56688).then(n.bind(n,61837)),"@site/versioned_docs/version-0.53/build/spec/README.md",61837],"0d111487":[()=>n.e(17680).then(n.bind(n,12435)),"@site/versioned_docs/version-0.53/build/migrations/03-upgrade-guide.md",12435],"0d728a42":[()=>n.e(49452).then(n.bind(n,25377)),"@site/versioned_docs/version-0.47/build/tooling/01-cosmovisor.md",25377],"0dc8652b":[()=>n.e(51966).then(n.bind(n,98277)),"@site/docs/build/building-modules/07-invariants.md",98277],"0dcf805e":[()=>n.e(81223).then(n.bind(n,14905)),"@site/versioned_docs/version-0.53/tutorials/vote-extensions/oracle/02-implementing-vote-extensions.md",14905],"0dfe86a3":[()=>n.e(98734).then(n.bind(n,16392)),"@site/docs/learn/advanced/08-events.md",16392],"0efc30fd":[()=>n.e(25271).then(n.bind(n,63310)),"@site/versioned_docs/version-0.5/build/architecture/adr-055-orm.md",63310],"0f04a3bb":[()=>n.e(22343).then(n.bind(n,35096)),"@site/docs/build/migrations/02-upgrade-reference.md",35096],"1004d7e5":[()=>n.e(35536).then(n.bind(n,79829)),"@site/docs/build/architecture/adr-019-protobuf-state-encoding.md",79829],"10735f07":[()=>n.e(60627).then(n.bind(n,46183)),"@site/versioned_docs/version-0.5/build/building-apps/04-vote-extensions.md",46183],"1079f66a":[()=>n.e(73075).then(n.bind(n,2770)),"@site/versioned_docs/version-0.47/learn/intro/03-sdk-design.md",2770],"1145e4de":[()=>n.e(81568).then(n.bind(n,88078)),"@site/docs/learn/advanced/06-grpc_rest.md",88078],"117bd5e2":[()=>n.e(15429).then(n.bind(n,84794)),"@site/docs/build/building-modules/15-depinject.md",84794],"1195452d":[()=>n.e(54537).then(n.bind(n,23305)),"@site/docs/build/modules/mint/README.md",23305],"127c5454":[()=>n.e(37233).then(n.bind(n,83230)),"@site/versioned_docs/version-0.53/build/architecture/adr-014-proportional-slashing.md",83230],"12849d7c":[()=>n.e(43890).then(n.bind(n,67137)),"@site/versioned_docs/version-0.53/build/building-apps/00-runtime.md",67137],"12bc1ffc":[()=>n.e(2045).then(n.bind(n,74639)),"@site/versioned_docs/version-0.53/learn/intro/02-sdk-app-architecture.md",74639],"13296dfc":[()=>n.e(35199).then(n.bind(n,70320)),"@site/versioned_docs/version-0.47/build/architecture/adr-006-secret-store-replacement.md",70320],13654927:[()=>n.e(84904).then(n.bind(n,3927)),"@site/versioned_docs/version-0.53/build/modules/staking/README.md",3927],"13cd73dd":[()=>n.e(38185).then(n.bind(n,17594)),"@site/versioned_docs/version-0.47/build/tooling/04-hubl.md",17594],"13e268d3":[()=>n.e(88041).then(n.bind(n,55226)),"@site/docs/build/architecture/adr-047-extend-upgrade-plan.md",55226],"1419a308":[()=>n.e(25615).then(n.bind(n,872)),"@site/docs/tutorials/transactions/00-building-a-transaction.md",872],"144c6bd8":[()=>n.e(37482).then(n.bind(n,8986)),"@site/versioned_docs/version-0.47/build/building-modules/11-structure.md",8986],"14c4aba6":[()=>n.e(56060).then(n.bind(n,16409)),"@site/versioned_docs/version-0.53/build/rfc/rfc-001-tx-validation.md",16409],"15215bc0":[()=>n.e(85813).then(n.bind(n,34767)),"@site/docs/build/architecture/adr-060-abci-1.0.md",34767],"1565abcb":[()=>n.e(44452).then(n.bind(n,62215)),"@site/docs/tutorials/vote-extensions/oracle/03-testing-oracle.md",62215],"15ffef81":[()=>n.e(30841).then(n.bind(n,90963)),"@site/versioned_docs/version-0.53/build/spec/addresses/README.md",90963],"169fed90":[()=>n.e(46434).then(n.bind(n,51293)),"@site/versioned_docs/version-0.53/build/building-modules/09-module-interfaces.md",51293],"16c7fb34":[()=>n.e(83624).then(n.bind(n,1742)),"@site/versioned_docs/version-0.47/build/architecture/adr-036-arbitrary-signature.md",1742],"16d4e16c":[()=>n.e(25671).then(n.bind(n,82486)),"@site/docs/build/building-modules/16-testing.md",82486],"16f39cc9":[()=>n.e(67289).then(n.bind(n,4621)),"@site/versioned_docs/version-0.53/user/run-node/00-keyring.md",4621],17896441:[()=>Promise.all([n.e(40532),n.e(27918)]).then(n.bind(n,6908)),"@theme/DocItem",6908],"17e86cde":[()=>n.e(84354).then(n.bind(n,43665)),"@site/versioned_docs/version-0.5/build/architecture/adr-050-sign-mode-textual-annex2.md",43665],"180b90f1":[()=>n.e(55743).then(n.bind(n,62484)),"@site/versioned_docs/version-0.5/build/migrations/03-upgrade-guide.md",62484],"1818ae17":[()=>n.e(63308).then(n.bind(n,56374)),"@site/versioned_docs/version-0.47/learn/advanced/11-telemetry.md",56374],"18b85d17":[()=>n.e(29946).then(n.bind(n,23128)),"@site/versioned_docs/version-0.5/build/build.md",23128],"18f3901a":[()=>n.e(96725).then(n.bind(n,66894)),"@site/docs/build/architecture/adr-065-store-v2.md",66894],"192cbf4f":[()=>n.e(93716).then(n.bind(n,33905)),"@site/versioned_docs/version-0.47/build/architecture/adr-023-protobuf-naming.md",33905],"198369fb":[()=>n.e(35963).then(n.bind(n,598)),"@site/versioned_docs/version-0.53/build/abci/02-process-proposal.md",598],"198fb009":[()=>n.e(26645).then(n.bind(n,51375)),"@site/versioned_docs/version-0.5/build/architecture/adr-057-app-wiring.md",51375],"19a7d35b":[()=>n.e(90084).then(n.bind(n,86399)),"@site/docs/user/run-node/00-keyring.md",86399],"1a3046f1":[()=>n.e(40102).then(n.bind(n,72907)),"@site/versioned_docs/version-0.53/learn/advanced/07-cli.md",72907],"1a4e3797":[()=>Promise.all([n.e(40532),n.e(97920)]).then(n.bind(n,56675)),"@theme/SearchPage",56675],"1ab4e1e3":[()=>n.e(86325).then(n.bind(n,78783)),"@site/versioned_docs/version-0.53/build/architecture/adr-062-collections-state-layer.md",78783],"1b2b88ff":[()=>n.e(41036).then(n.bind(n,21255)),"@site/versioned_docs/version-0.5/learn/advanced/09-telemetry.md",21255],"1b76a656":[()=>n.e(73668).then(n.bind(n,51246)),"@site/versioned_docs/version-0.5/learn/advanced/06-grpc_rest.md",51246],"1b8372be":[()=>n.e(8182).then(n.bind(n,48712)),"@site/versioned_docs/version-0.47/learn/intro/00-overview.md",48712],"1be78505":[()=>Promise.all([n.e(40532),n.e(29514)]).then(n.bind(n,19963)),"@theme/DocPage",19963],"1c0a2370":[()=>n.e(11824).then(n.bind(n,50787)),"@site/docs/learn/advanced/07-cli.md",50787],"1cda9c90":[()=>n.e(78687).then(n.bind(n,73884)),"@site/versioned_docs/version-0.53/build/building-apps/01-app-go-di.md",73884],"1d712857":[()=>n.e(99831).then(n.bind(n,6016)),"@site/versioned_docs/version-0.5/build/building-modules/11-structure.md",6016],"1d9e8f6a":[()=>n.e(85959).then(n.bind(n,15410)),"@site/versioned_docs/version-0.47/build/architecture/README.md",15410],"1da12abe":[()=>n.e(28193).then(n.bind(n,86742)),"@site/versioned_docs/version-0.53/tutorials/vote-extensions/auction-frontrunning/00-getting-started.md",86742],"1e1bff2a":[()=>n.e(364).then(n.bind(n,96513)),"@site/docs/learn/beginner/03-accounts.md",96513],"1ed1865b":[()=>n.e(62465).then(n.bind(n,65331)),"@site/versioned_docs/version-0.53/build/architecture/adr-060-abci-1.0.md",65331],"1f9b806c":[()=>n.e(17770).then(n.bind(n,52957)),"@site/docs/build/abci/04-checktx.md",52957],"202e8c53":[()=>n.e(22208).then(n.bind(n,50293)),"@site/versioned_docs/version-0.47/build/architecture/adr-033-protobuf-inter-module-comm.md",50293],"2045ed70":[()=>n.e(16165).then(n.bind(n,75729)),"@site/docs/build/modules/gov/README.md",75729],"209bdd5e":[()=>n.e(66866).then(n.bind(n,66912)),"@site/docs/user/run-node/04-rosetta.md",66912],"21cf644b":[()=>n.e(28910).then(n.bind(n,92761)),"@site/versioned_docs/version-0.47/learn/advanced/04-store.md",92761],"22434ef3":[()=>n.e(25050).then(n.bind(n,54655)),"@site/versioned_docs/version-0.5/build/tooling/00-protobuf.md",54655],"22da10f0":[()=>n.e(8468).then(n.bind(n,52905)),"@site/versioned_docs/version-0.47/user/run-node/00-keyring.md",52905],23283340:[()=>n.e(38877).then(n.bind(n,37676)),"@site/versioned_docs/version-0.53/build/spec/SPEC_STANDARD.md",37676],23685808:[()=>n.e(61927).then(n.bind(n,24804)),"@site/versioned_docs/version-0.47/build/spec/ics/README.md",24804],"24293d11":[()=>n.e(63385).then(n.bind(n,84342)),"@site/versioned_docs/version-0.47/build/architecture/adr-031-msg-service.md",84342],"2467e308":[()=>n.e(28413).then(n.bind(n,69350)),"@site/versioned_docs/version-0.47/build/architecture/adr-009-evidence-module.md",69350],"247a1d2f":[()=>n.e(22072).then(n.bind(n,53484)),"@site/versioned_docs/version-0.5/build/architecture/adr-011-generalize-genesis-accounts.md",53484],"248a5d0b":[()=>n.e(38752).then(n.bind(n,16559)),"@site/docs/build/tooling/01-cosmovisor.md",16559],"2499943b":[()=>n.e(5264).then(n.bind(n,70841)),"@site/versioned_docs/version-0.5/tutorials/vote-extensions/auction-frontrunning/02-mitigating-front-running-with-vote-extesions.md",70841],"257267ee":[()=>n.e(28191).then(n.bind(n,80666)),"@site/versioned_docs/version-0.47/learn/beginner/01-tx-lifecycle.md",80666],"257bcfb6":[()=>n.e(89187).then(n.bind(n,52780)),"@site/versioned_docs/version-0.47/build/architecture/adr-055-orm.md",52780],"25d9a5f3":[()=>n.e(411).then(n.bind(n,87854)),"@site/versioned_docs/version-0.5/build/architecture/adr-062-collections-state-layer.md",87854],"2686a5e0":[()=>n.e(6416).then(n.bind(n,79852)),"@site/docs/build/building-modules/00-intro.md",79852],26982686:[()=>n.e(80802).then(n.bind(n,13269)),"@site/versioned_docs/version-0.5/build/architecture/PROCESS.md",13269],"269dc56f":[()=>n.e(4564).then(n.bind(n,25184)),"@site/versioned_docs/version-0.5/build/architecture/adr-044-protobuf-updates-guidelines.md",25184],"273f93c4":[()=>n.e(72222).then(n.bind(n,66479)),"@site/versioned_docs/version-0.47/build/building-modules/13-upgrade.md",66479],"274d9d27":[()=>n.e(14002).then(n.bind(n,46037)),"@site/docs/build/rfc/rfc-001-tx-validation.md",46037],"2750b7ad":[()=>n.e(77046).then(n.bind(n,19822)),"@site/docs/build/architecture/adr-055-orm.md",19822],"2778a518":[()=>n.e(33826).then(n.bind(n,60051)),"@site/versioned_docs/version-0.5/user/run-node/01-run-node.md",60051],"285410ab":[()=>n.e(5427).then(n.bind(n,47787)),"@site/docs/build/building-modules/02-messages-and-queries.md",47787],"2882ddb0":[()=>n.e(15353).then(n.bind(n,20586)),"@site/docs/build/architecture/adr-050-sign-mode-textual.md",20586],"28a3d38a":[()=>n.e(14312).then(n.bind(n,42888)),"@site/versioned_docs/version-0.53/build/architecture/adr-061-liquid-staking.md",42888],"28b575d2":[()=>n.e(45267).then(n.bind(n,58737)),"@site/versioned_docs/version-0.5/build/modules/params/README.md",58737],"291f064c":[()=>n.e(92061).then(n.bind(n,34087)),"@site/docs/build/abci/00-introduction.md",34087],"295201e1":[()=>n.e(34860).then(n.bind(n,91767)),"@site/docs/build/modules/consensus/README.md",91767],"29dc1f9f":[()=>n.e(42539).then(n.bind(n,25015)),"@site/versioned_docs/version-0.47/build/architecture/adr-017-historical-header-module.md",25015],"29fcc1f2":[()=>n.e(5697).then(n.bind(n,8466)),"@site/versioned_docs/version-0.5/build/spec/README.md",8466],"2a14d6ba":[()=>n.e(47687).then(n.bind(n,10671)),"@site/versioned_docs/version-0.53/build/building-modules/08-genesis.md",10671],"2a2d58c2":[()=>n.e(54898).then(n.bind(n,81865)),"@site/docs/build/modules/auth/1-vesting.md",81865],"2a900817":[()=>n.e(95925).then(n.bind(n,8798)),"@site/docs/learn/advanced/00-baseapp.md",8798],"2ac04cfa":[()=>n.e(23529).then(n.bind(n,66399)),"@site/versioned_docs/version-0.5/build/building-apps/00-app-go.md",66399],"2b355c73":[()=>n.e(82634).then(n.bind(n,24438)),"@site/versioned_docs/version-0.53/build/architecture/adr-021-protobuf-query-encoding.md",24438],"2b732cba":[()=>n.e(22661).then(n.bind(n,7010)),"@site/versioned_docs/version-0.47/build/architecture/adr-template.md",7010],"2bc583a8":[()=>n.e(69089).then(n.bind(n,34869)),"@site/versioned_docs/version-0.53/build/architecture/adr-043-nft-module.md",34869],"2bf806de":[()=>n.e(13212).then(n.bind(n,42591)),"@site/versioned_docs/version-0.5/build/modules/README.md",42591],"2c400045":[()=>n.e(65520).then(n.bind(n,12072)),"@site/versioned_docs/version-0.5/build/architecture/adr-038-state-listening.md",12072],"2c621c81":[()=>n.e(139).then(n.bind(n,88867)),"@site/docs/build/building-apps/05-app-testnet.md",88867],"2c698b59":[()=>n.e(68458).then(n.bind(n,18665)),"@site/versioned_docs/version-0.53/learn/advanced/06-grpc_rest.md",18665],"2cc9ba09":[()=>n.e(30064).then(n.bind(n,33658)),"@site/docs/build/tooling/00-protobuf.md",33658],"2d0803df":[()=>n.e(74125).then(n.t.bind(n,69162,19)),"/home/runner/work/cosmos-sdk-docs/cosmos-sdk-docs/.docusaurus/docusaurus-plugin-redoc/plugin-redoc-0/plugin-route-context-module-100.json",69162],"2d208a6f":[()=>n.e(64069).then(n.bind(n,70845)),"@site/versioned_docs/version-0.53/build/architecture/adr-044-protobuf-updates-guidelines.md",70845],"2d425f51":[()=>n.e(34890).then(n.bind(n,28915)),"@site/docs/build/architecture/adr-045-check-delivertx-middlewares.md",28915],"2d6532c6":[()=>n.e(21177).then(n.bind(n,73526)),"@site/versioned_docs/version-0.53/build/modules/auth/2-tx.md",73526],"2d872204":[()=>n.e(1633).then(n.bind(n,16082)),"@site/versioned_docs/version-0.47/learn/advanced/17-config.md",16082],"2defa1d1":[()=>n.e(73448).then(n.bind(n,75545)),"@site/docs/build/building-apps/03-app-upgrade.md",75545],"2dfb0e9e":[()=>n.e(29433).then(n.bind(n,60426)),"@site/versioned_docs/version-0.5/learn/advanced/13-proto-docs.md",60426],"2e53f262":[()=>n.e(74216).then(n.bind(n,60792)),"@site/versioned_docs/version-0.5/learn/advanced/02-context.md",60792],"2e67d54b":[()=>n.e(84483).then(n.bind(n,83939)),"@site/docs/build/rfc/rfc/rfc-001-tx-validation.md",83939],"2e9ccffe":[()=>n.e(67740).then(n.bind(n,81950)),"@site/versioned_docs/version-0.47/learn/intro/01-why-app-specific.md",81950],"2ee8c5ed":[()=>n.e(47228).then(n.bind(n,82769)),"@site/versioned_docs/version-0.5/learn/advanced/00-baseapp.md",82769],"2ef08f5d":[()=>n.e(17300).then(n.bind(n,35419)),"@site/versioned_docs/version-0.5/build/architecture/adr-076-tx-malleability.md",35419],"2f5cfd7a":[()=>n.e(35738).then(n.bind(n,64719)),"@site/versioned_docs/version-0.53/build/modules/bank/README.md",64719],"2fb84249":[()=>n.e(58437).then(n.bind(n,38330)),"@site/versioned_docs/version-0.53/build/architecture/adr-006-secret-store-replacement.md",38330],"2fe9e9eb":[()=>n.e(63089).then(n.bind(n,15177)),"@site/versioned_docs/version-0.53/tutorials/transactions/00-building-a-transaction.md",15177],"3071af69":[()=>n.e(17054).then(n.bind(n,48225)),"@site/docs/build/architecture/adr-050-sign-mode-textual-annex2.md",48225],"30d0c605":[()=>n.e(9036).then(n.bind(n,38813)),"@site/versioned_docs/version-0.53/build/architecture/adr-003-dynamic-capability-store.md",38813],31495002:[()=>n.e(55664).then(n.bind(n,60821)),"@site/versioned_docs/version-0.5/build/architecture/adr-040-storage-and-smt-state-commitments.md",60821],"315320b1":[()=>n.e(33686).then(n.bind(n,6952)),"@site/versioned_docs/version-0.5/build/modules/slashing/README.md",6952],"3184ab37":[()=>n.e(39517).then(n.bind(n,21285)),"@site/docs/learn/advanced/03-node.md",21285],31907841:[()=>n.e(63043).then(n.bind(n,88312)),"@site/versioned_docs/version-0.5/build/migrations/02-upgrading.md",88312],"31e1c185":[()=>n.e(95469).then(n.bind(n,42323)),"@site/versioned_docs/version-0.5/build/architecture/adr-019-protobuf-state-encoding.md",42323],"31ee55c2":[()=>n.e(42153).then(n.bind(n,97659)),"@site/versioned_docs/version-0.5/build/building-modules/04-query-services.md",97659],"32cb0f95":[()=>n.e(61305).then(n.bind(n,51819)),"@site/docs/build/building-modules/01-module-manager.md",51819],"34e7b0bf":[()=>n.e(26256).then(n.bind(n,23926)),"@site/versioned_docs/version-0.53/build/architecture/adr-032-typed-events.md",23926],"3538b0cc":[()=>n.e(18371).then(n.bind(n,50852)),"@site/versioned_docs/version-0.47/build/modules/auth/1-vesting.md",50852],"355c696b":[()=>n.e(39005).then(n.bind(n,77382)),"@site/versioned_docs/version-0.5/build/modules/group/README.md",77382],"35e4dee9":[()=>n.e(88567).then(n.bind(n,88018)),"@site/versioned_docs/version-0.53/build/architecture/adr-016-validator-consensus-key-rotation.md",88018],"35eee8a0":[()=>n.e(47625).then(n.bind(n,59244)),"@site/versioned_docs/version-0.53/build/packages/README.md",59244],"35f3dd6b":[()=>n.e(95508).then(n.bind(n,20074)),"@site/versioned_docs/version-0.47/build/architecture/adr-020-protobuf-transaction-encoding.md",20074],"364e68a2":[()=>n.e(79976).then(n.bind(n,24996)),"@site/versioned_docs/version-0.5/build/tooling/02-confix.md",24996],"3796d8f8":[()=>n.e(96731).then(n.bind(n,65433)),"@site/versioned_docs/version-0.5/build/architecture/adr-002-docs-structure.md",65433],"37c7d766":[()=>n.e(97134).then(n.bind(n,57839)),"@site/versioned_docs/version-0.53/build/architecture/adr-042-group-module.md",57839],"386c9392":[()=>n.e(29887).then(n.bind(n,15933)),"@site/versioned_docs/version-0.47/build/tooling/05-depinject.md",15933],"38d7e9a7":[()=>n.e(72538).then(n.bind(n,81051)),"@site/versioned_docs/version-0.47/user/user.md",81051],"392194ce":[()=>n.e(75353).then(n.bind(n,46106)),"@site/versioned_docs/version-0.5/build/architecture/adr-059-test-scopes.md",46106],"399a1fab":[()=>n.e(12278).then(n.bind(n,75382)),"@site/docs/learn/advanced/12-simulation.md",75382],"39c42345":[()=>n.e(1106).then(n.bind(n,25656)),"@site/docs/build/architecture/PROCESS.md",25656],"39d2c21e":[()=>n.e(87481).then(n.bind(n,42889)),"@site/versioned_docs/version-0.5/build/building-modules/03-msg-services.md",42889],"3a3f2c39":[()=>n.e(90444).then(n.bind(n,93075)),"@site/docs/build/rfc/PROCESS.md",93075],"3a98a834":[()=>n.e(13460).then(n.bind(n,99996)),"@site/docs/build/modules/evidence/README.md",99996],"3ae21f6e":[()=>n.e(81462).then(n.bind(n,68997)),"@site/versioned_docs/version-0.5/build/architecture/adr-024-coin-metadata.md",68997],"3b515a42":[()=>n.e(15478).then(n.bind(n,3858)),"@site/versioned_docs/version-0.47/build/architecture/adr-029-fee-grant-module.md",3858],"3c2828c7":[()=>n.e(9210).then(n.bind(n,81741)),"@site/versioned_docs/version-0.5/build/architecture/README.md",81741],"3c403a9f":[()=>n.e(57734).then(n.bind(n,69857)),"@site/versioned_docs/version-0.5/learn/intro/00-overview.md",69857],"3c5616d6":[()=>n.e(83008).then(n.bind(n,97131)),"@site/docs/build/architecture/adr-042-group-module.md",97131],"3c62d5c4":[()=>n.e(31628).then(n.bind(n,99451)),"@site/docs/build/rfc/rfc/rfc-template.md",99451],"3c94ed7e":[()=>n.e(74154).then(n.bind(n,23245)),"@site/versioned_docs/version-0.47/learn/glossary.md",23245],"3cc55d54":[()=>n.e(88747).then(n.bind(n,91270)),"@site/versioned_docs/version-0.5/build/abci/00-introduction.md",91270],"3de28c89":[()=>n.e(87360).then(n.bind(n,9614)),"@site/versioned_docs/version-0.5/build/modules/upgrade/README.md",9614],"3df64208":[()=>n.e(62064).then(n.bind(n,33096)),"@site/docs/user/run-node/03-txs.md",33096],"3dfbfacd":[()=>n.e(56024).then(n.bind(n,76722)),"@site/versioned_docs/version-0.5/build/architecture/adr-060-abci-1.0.md",76722],"3e202107":[()=>n.e(60359).then(n.bind(n,49429)),"@site/versioned_docs/version-0.53/build/tooling/01-cosmovisor.md",49429],"3eb402a8":[()=>n.e(21570).then(n.bind(n,45210)),"@site/versioned_docs/version-0.47/build/architecture/adr-046-module-params.md",45210],"3ffa3ceb":[()=>n.e(11367).then(n.bind(n,69565)),"@site/versioned_docs/version-0.47/build/architecture/adr-043-nft-module.md",69565],"402360fd":[()=>n.e(53150).then(n.bind(n,47215)),"@site/versioned_docs/version-0.5/build/modules/feegrant/README.md",47215],"402948e7":[()=>n.e(5151).then(n.bind(n,34835)),"@site/docs/tutorials/vote-extensions/auction-frontrunning/03-demo-of-mitigating-front-running.md",34835],"403dca60":[()=>n.e(36522).then(n.bind(n,7563)),"@site/versioned_docs/version-0.53/build/migrations/02-upgrade-reference.md",7563],"406002be":[()=>n.e(90010).then(n.bind(n,17926)),"@site/versioned_docs/version-0.47/learn/advanced/13-simulation.md",17926],"406eca0d":[()=>n.e(36003).then(n.bind(n,35493)),"@site/docs/build/migrations/02-upgrading.md",35493],"41a15950":[()=>n.e(8440).then(n.bind(n,774)),"@site/versioned_docs/version-0.47/learn/advanced/06-encoding.md",774],"41ff7326":[()=>n.e(29438).then(n.bind(n,56128)),"@site/versioned_docs/version-0.5/build/tooling/README.md",56128],"4246b296":[()=>n.e(74242).then(n.bind(n,11272)),"@site/versioned_docs/version-0.47/build/architecture/adr-013-metrics.md",11272],"4248dc0a":[()=>n.e(34398).then(n.bind(n,79729)),"@site/versioned_docs/version-0.5/learn/advanced/07-cli.md",79729],"42f563c6":[()=>n.e(95408).then(n.bind(n,71751)),"@site/versioned_docs/version-0.53/tutorials/vote-extensions/oracle/01-what-is-an-oracle.md",71751],"43bc2dfe":[()=>n.e(49956).then(n.bind(n,76942)),"@site/versioned_docs/version-0.5/learn/advanced/11-runtx_middleware.md",76942],"4430fd96":[()=>n.e(43942).then(n.bind(n,32884)),"@site/docs/build/architecture/adr-003-dynamic-capability-store.md",32884],"44a406f4":[()=>n.e(33048).then(n.bind(n,4471)),"@site/versioned_docs/version-0.5/build/tooling/01-cosmovisor.md",4471],"44d8106f":[()=>n.e(1403).then(n.bind(n,34508)),"@site/versioned_docs/version-0.53/build/modules/evidence/README.md",34508],"44e5c2ad":[()=>n.e(33596).then(n.bind(n,25635)),"@site/versioned_docs/version-0.47/build/architecture/adr-018-extendable-voting-period.md",25635],"450d5631":[()=>n.e(80972).then(n.bind(n,11250)),"@site/versioned_docs/version-0.53/build/building-modules/07-invariants.md",11250],"45513e9b":[()=>n.e(88365).then(n.bind(n,80902)),"@site/versioned_docs/version-0.5/build/spec/SPEC_STANDARD.md",80902],"45f29120":[()=>n.e(91805).then(n.bind(n,15730)),"@site/docs/build/building-modules/17-preblock.md",15730],"45f361db":[()=>n.e(97235).then(n.bind(n,68085)),"@site/versioned_docs/version-0.5/build/modules/gov/README.md",68085],"46b2d35e":[()=>n.e(74867).then(n.bind(n,37665)),"@site/docs/build/building-modules/13-upgrade.md",37665],"46e274eb":[()=>n.e(3065).then(n.bind(n,54938)),"@site/versioned_docs/version-0.5/build/architecture/adr-043-nft-module.md",54938],"46f90ce4":[()=>n.e(69145).then(n.bind(n,18172)),"@site/docs/build/building-apps/04-vote-extensions.md",18172],"474cd202":[()=>n.e(12492).then(n.bind(n,56054)),"@site/docs/learn/advanced/04-store.md",56054],"477e059b":[()=>n.e(54647).then(n.bind(n,42289)),"@site/versioned_docs/version-0.47/build/modules/crisis/README.md",42289],"479e1419":[()=>n.e(36884).then(n.bind(n,98935)),"@site/versioned_docs/version-0.53/build/spec/store/README.md",98935],"47f8bc0f":[()=>n.e(80093).then(n.bind(n,8061)),"@site/versioned_docs/version-0.47/build/build.md",8061],"48118c6b":[()=>n.e(50345).then(n.bind(n,31103)),"@site/versioned_docs/version-0.5/build/modules/protocolpool/README.md",31103],"4913014a":[()=>n.e(75075).then(n.bind(n,51539)),"@site/versioned_docs/version-0.53/build/architecture/adr-047-extend-upgrade-plan.md",51539],"496f6455":[()=>n.e(91543).then(n.t.bind(n,41837,19)),"/home/runner/work/cosmos-sdk-docs/cosmos-sdk-docs/.docusaurus/docusaurus-plugin-redoc/plugin-redoc-0/redocApiSpecV1.2-plugin-redoc-0.json",41837],"4a2359b5":[()=>n.e(41043).then(n.bind(n,73545)),"@site/versioned_docs/version-0.53/build/building-apps/03-app-upgrade.md",73545],"4ab4f5b8":[()=>n.e(86498).then(n.bind(n,13097)),"@site/docs/build/architecture/adr-030-authz-module.md",13097],"4ac47a70":[()=>n.e(92375).then(n.bind(n,78991)),"@site/versioned_docs/version-0.47/user/run-node/02-interact-node.md",78991],"4b798757":[()=>n.e(54010).then(n.bind(n,35621)),"@site/docs/build/architecture/adr-002-docs-structure.md",35621],"4c7bad0e":[()=>n.e(21583).then(n.bind(n,87219)),"@site/versioned_docs/version-0.53/build/architecture/adr-076-tx-malleability.md",87219],"4d8dd9a8":[()=>n.e(42123).then(n.bind(n,8919)),"@site/versioned_docs/version-0.5/build/rfc/rfc/PROCESS.md",8919],"4dce0732":[()=>n.e(76554).then(n.bind(n,49795)),"@site/versioned_docs/version-0.5/build/architecture/adr-013-metrics.md",49795],"4ea68d8b":[()=>n.e(93413).then(n.bind(n,62592)),"@site/versioned_docs/version-0.53/build/architecture/adr-018-extendable-voting-period.md",62592],"4ecc76c4":[()=>n.e(13690).then(n.bind(n,31241)),"@site/versioned_docs/version-0.5/build/architecture/adr-014-proportional-slashing.md",31241],"4f7ce7af":[()=>n.e(17552).then(n.bind(n,36813)),"@site/versioned_docs/version-0.53/build/abci/01-prepare-proposal.md",36813],"4ff54078":[()=>n.e(22855).then(n.bind(n,28156)),"@site/docs/build/modules/auth/2-tx.md",28156],"5044c110":[()=>n.e(20526).then(n.bind(n,98407)),"@site/versioned_docs/version-0.5/user/user.md",98407],"5070aed7":[()=>n.e(87181).then(n.bind(n,69834)),"@site/docs/build/architecture/adr-007-specialization-groups.md",69834],"5150626b":[()=>n.e(45980).then(n.bind(n,46629)),"@site/versioned_docs/version-0.47/build/tooling/03-autocli.md",46629],"5167096d":[()=>n.e(34416).then(n.bind(n,40227)),"@site/versioned_docs/version-0.47/build/modules/consensus/README.md",40227],"516a4b2c":[()=>n.e(21443).then(n.bind(n,13810)),"@site/versioned_docs/version-0.53/build/modules/epochs/README.md",13810],"51c78a29":[()=>n.e(48768).then(n.t.bind(n,21294,19)),"/home/runner/work/cosmos-sdk-docs/cosmos-sdk-docs/.docusaurus/docusaurus-plugin-redoc/plugin-redoc-0/redocApiLayoutV1-plugin-redoc-0.json",21294],"51d64a0a":[()=>n.e(17049).then(n.bind(n,58854)),"@site/versioned_docs/version-0.47/build/modules/gov/README.md",58854],"51e97c57":[()=>n.e(32726).then(n.bind(n,45076)),"@site/docs/build/modules/authz/README.md",45076],"52217fa4":[()=>n.e(75765).then(n.bind(n,92768)),"@site/versioned_docs/version-0.53/build/build.md",92768],"526992ef":[()=>n.e(8333).then(n.bind(n,85386)),"@site/docs/user/user.md",85386],"52e9c265":[()=>n.e(16829).then(n.bind(n,84611)),"@site/versioned_docs/version-0.5/build/modules/auth/README.md",84611],"5343d3ef":[()=>n.e(32669).then(n.bind(n,12763)),"@site/versioned_docs/version-0.53/user/run-node/03-txs.md",12763],"54acbc7b":[()=>n.e(35528).then(n.bind(n,24404)),"@site/versioned_docs/version-0.47/build/architecture/adr-039-epoched-staking.md",24404],"5637733f":[()=>n.e(44014).then(n.bind(n,23618)),"@site/docs/build/architecture/adr-070-unordered-account.md",23618],"569dce2b":[()=>n.e(77802).then(n.bind(n,85656)),"@site/versioned_docs/version-0.5/build/building-modules/14-simulator.md",85656],"57a642fb":[()=>n.e(23679).then(n.bind(n,15208)),"@site/versioned_docs/version-0.47/build/architecture/adr-034-account-rekeying.md",15208],"57a726fa":[()=>n.e(89407).then(n.bind(n,3387)),"@site/docs/build/modules/circuit/README.md",3387],"57e88db4":[()=>n.e(40370).then(n.bind(n,93545)),"@site/versioned_docs/version-0.5/tutorials/vote-extensions/oracle/00-getting-started.md",93545],"588469d6":[()=>n.e(50686).then(n.bind(n,49736)),"@site/docs/build/modules/genutil/README.md",49736],"589d3bbd":[()=>n.e(93915).then(n.bind(n,23174)),"@site/versioned_docs/version-0.5/build/building-modules/01-module-manager.md",23174],"58c1bae1":[()=>n.e(29912).then(n.bind(n,36493)),"@site/versioned_docs/version-0.47/build/architecture/adr-058-auto-generated-cli.md",36493],"58ed8cb9":[()=>n.e(95530).then(n.bind(n,73566)),"@site/docs/learn/intro/02-sdk-app-architecture.md",73566],"5927e3c4":[()=>n.e(20330).then(n.bind(n,41635)),"@site/versioned_docs/version-0.53/learn/advanced/17-autocli.md",41635],"592ea229":[()=>n.e(79197).then(n.bind(n,88951)),"@site/versioned_docs/version-0.47/build/architecture/adr-061-liquid-staking.md",88951],"5989d945":[()=>n.e(35378).then(n.bind(n,41238)),"@site/docs/learn/beginner/02-query-lifecycle.md",41238],"59d2a6b2":[()=>n.e(39538).then(n.bind(n,35812)),"@site/versioned_docs/version-0.47/user/run-node/06-run-production.md",35812],"5a098ab2":[()=>n.e(21169).then(n.bind(n,84629)),"@site/docs/build/modules/staking/README.md",84629],"5a566467":[()=>n.e(4798).then(n.bind(n,64001)),"@site/versioned_docs/version-0.47/build/architecture/adr-048-consensus-fees.md",64001],"5a861dce":[()=>n.e(63828).then(n.bind(n,82630)),"@site/versioned_docs/version-0.5/build/modules/circuit/README.md",82630],"5ab94d1e":[()=>n.e(90607).then(n.bind(n,98365)),"@site/versioned_docs/version-0.53/build/architecture/adr-050-sign-mode-textual.md",98365],"5ac16de2":[()=>n.e(36469).then(n.bind(n,48849)),"@site/versioned_docs/version-0.5/build/building-modules/06-beginblock-endblock.md",48849],"5b97f9f4":[()=>Promise.all([n.e(40532),n.e(45287)]).then(n.bind(n,84847)),"@site/src/pages/v0.50.js",84847],"5c3b81f5":[()=>n.e(80125).then(n.bind(n,37896)),"@site/versioned_docs/version-0.53/build/architecture/adr-template.md",37896],"5d03e6ee":[()=>n.e(84441).then(n.bind(n,36532)),"@site/versioned_docs/version-0.53/build/tooling/README.md",36532],"5ddf0aa6":[()=>n.e(44692).then(n.bind(n,46646)),"@site/versioned_docs/version-0.47/build/modules/auth/README.md",46646],"5e22c18d":[()=>n.e(2399).then(n.bind(n,83794)),"@site/docs/build/modules/nft/README.md",83794],"5e2d4c26":[()=>n.e(89958).then(n.bind(n,94815)),"@site/docs/build/architecture/adr-058-auto-generated-cli.md",94815],"5e3cce4b":[()=>n.e(49002).then(n.bind(n,78392)),"@site/versioned_docs/version-0.5/build/architecture/adr-018-extendable-voting-period.md",78392],"5e9f5e1a":[()=>Promise.resolve().then(n.bind(n,36809)),"@generated/docusaurus.config",36809],"5edf22c5":[()=>n.e(90968).then(n.bind(n,51310)),"@site/versioned_docs/version-0.47/build/building-modules/05-beginblock-endblock.md",51310],"5eeaeddb":[()=>n.e(44190).then(n.bind(n,66999)),"@site/versioned_docs/version-0.53/build/modules/crisis/README.md",66999],"5f3935af":[()=>n.e(76836).then(n.bind(n,29254)),"@site/versioned_docs/version-0.47/build/packages/02-collections.md",29254],"5f61ff51":[()=>n.e(44080).then(n.bind(n,39401)),"@site/docs/learn/advanced/10-ocap.md",39401],"5ffd4de5":[()=>n.e(56293).then(n.bind(n,38785)),"@site/versioned_docs/version-0.53/build/architecture/adr-017-historical-header-module.md",38785],"608ecad5":[()=>n.e(74616).then(n.bind(n,25470)),"@site/docs/build/modules/distribution/README.md",25470],"611164c8":[()=>n.e(92543).then(n.bind(n,82406)),"@site/versioned_docs/version-0.5/build/architecture/adr-031-msg-service.md",82406],"614a68e5":[()=>n.e(6783).then(n.bind(n,87672)),"@site/docs/build/modules/bank/README.md",87672],"615ee730":[()=>n.e(99257).then(n.bind(n,15237)),"@site/docs/build/migrations/03-upgrade-guide.md",15237],"619938bb":[()=>n.e(71846).then(n.bind(n,22043)),"@site/versioned_docs/version-0.5/user/run-node/04-rosetta.md",22043],"61fada24":[()=>n.e(29074).then(n.bind(n,19335)),"@site/docs/tutorials/vote-extensions/oracle/00-getting-started.md",19335],"622941ec":[()=>n.e(64151).then(n.bind(n,94324)),"@site/versioned_docs/version-0.5/learn/beginner/00-app-anatomy.md",94324],"63482b6c":[()=>n.e(46582).then(n.bind(n,42081)),"@site/docs/build/architecture/adr-016-validator-consensus-key-rotation.md",42081],"63e55733":[()=>n.e(8658).then(n.bind(n,74976)),"@site/versioned_docs/version-0.53/learn/beginner/02-query-lifecycle.md",74976],"63f3da4a":[()=>n.e(37165).then(n.bind(n,87781)),"@site/versioned_docs/version-0.53/build/architecture/adr-058-auto-generated-cli.md",87781],"63fb1a44":[()=>n.e(61764).then(n.bind(n,16350)),"@site/docs/build/architecture/adr-048-consensus-fees.md",16350],64228690:[()=>n.e(29507).then(n.bind(n,19529)),"@site/docs/build/building-modules/12-errors.md",19529],"6543313f":[()=>n.e(66603).then(n.bind(n,83066)),"@site/versioned_docs/version-0.47/build/architecture/adr-042-group-module.md",83066],"66a76e31":[()=>n.e(21768).then(n.bind(n,74420)),"@site/versioned_docs/version-0.53/build/rfc/README.md",74420],"66ad2e72":[()=>n.e(43408).then(n.bind(n,99597)),"@site/versioned_docs/version-0.53/build/architecture/README.md",99597],"66fbaafc":[()=>n.e(96408).then(n.bind(n,28938)),"@site/versioned_docs/version-0.5/tutorials/vote-extensions/oracle/02-implementing-vote-extensions.md",28938],"673583c0":[()=>n.e(74663).then(n.bind(n,65994)),"@site/versioned_docs/version-0.53/user/run-node/02-interact-node.md",65994],"682918a9":[()=>n.e(48235).then(n.bind(n,63807)),"@site/versioned_docs/version-0.47/build/building-modules/00-intro.md",63807],"6837ca1b":[()=>n.e(15564).then(n.bind(n,9043)),"@site/versioned_docs/version-0.53/build/architecture/adr-068-preblock.md",9043],"683bc028":[()=>n.e(51052).then(n.bind(n,40729)),"@site/versioned_docs/version-0.47/user/run-node/01-run-node.md",40729],"684c1741":[()=>n.e(33378).then(n.bind(n,88849)),"@site/docs/build/building-modules/04-query-services.md",88849],"685f77c1":[()=>n.e(88968).then(n.bind(n,94294)),"@site/docs/tutorials/vote-extensions/oracle/02-implementing-vote-extensions.md",94294],"68f99022":[()=>n.e(84547).then(n.bind(n,38981)),"@site/versioned_docs/version-0.53/tutorials/vote-extensions/oracle/00-getting-started.md",38981],"69acf6e6":[()=>n.e(15763).then(n.bind(n,76457)),"@site/docs/build/architecture/adr-063-core-module-api.md",76457],"6a0c47bf":[()=>n.e(71889).then(n.bind(n,23355)),"@site/versioned_docs/version-0.5/build/rfc/README.md",23355],"6ac023db":[()=>n.e(32263).then(n.bind(n,39994)),"@site/versioned_docs/version-0.5/build/modules/staking/README.md",39994],"6b09ee62":[()=>n.e(74085).then(n.bind(n,97006)),"@site/docs/learn/advanced/02-context.md",97006],"6b1ad056":[()=>n.e(74104).then(n.bind(n,85339)),"@site/versioned_docs/version-0.47/build/tooling/00-protobuf.md",85339],"6b26444d":[()=>n.e(84252).then(n.bind(n,10388)),"@site/versioned_docs/version-0.53/build/architecture/adr-028-public-key-addresses.md",10388],"6b5cd1f8":[()=>n.e(81993).then(n.bind(n,43293)),"@site/docs/build/modules/protocolpool/README.md",43293],"6b94caab":[()=>n.e(55390).then(n.bind(n,45365)),"@site/versioned_docs/version-0.53/build/architecture/adr-046-module-params.md",45365],"6b9e3bd8":[()=>n.e(2275).then(n.bind(n,70315)),"@site/versioned_docs/version-0.53/build/architecture/adr-036-arbitrary-signature.md",70315],"6bb8730f":[()=>n.e(16960).then(n.bind(n,40734)),"@site/versioned_docs/version-0.47/build/architecture/adr-022-custom-panic-handling.md",40734],"6bc58058":[()=>n.e(69414).then(n.bind(n,31564)),"@site/versioned_docs/version-0.53/build/abci/04-checktx.md",31564],"6c70b259":[()=>n.e(15759).then(n.bind(n,83693)),"@site/versioned_docs/version-0.47/build/architecture/adr-024-coin-metadata.md",83693],"6cdbb08d":[()=>n.e(99175).then(n.bind(n,47959)),"@site/versioned_docs/version-0.53/build/architecture/adr-012-state-accessors.md",47959],"6dac197c":[()=>n.e(76904).then(n.bind(n,20328)),"@site/docs/build/architecture/adr-057-app-wiring.md",20328],"6de9af81":[()=>n.e(77020).then(n.bind(n,90999)),"@site/versioned_docs/version-0.53/build/architecture/adr-070-unordered-account.md",90999],"6e2d5c98":[()=>n.e(72354).then(n.bind(n,35248)),"@site/versioned_docs/version-0.5/learn/advanced/15-upgrade.md",35248],"6e53d265":[()=>n.e(60623).then(n.bind(n,57158)),"@site/docs/build/building-modules/06-beginblock-endblock.md",57158],"6e65aa34":[()=>n.e(84219).then(n.bind(n,89643)),"@site/versioned_docs/version-0.53/build/tooling/02-confix.md",89643],"6f8abb07":[()=>n.e(42387).then(n.bind(n,87490)),"@site/docs/build/spec/store/README.md",87490],"6fa2e9a5":[()=>n.e(88640).then(n.bind(n,43021)),"@site/versioned_docs/version-0.47/build/architecture/adr-007-specialization-groups.md",43021],"6fe77543":[()=>n.e(64608).then(n.bind(n,93879)),"@site/versioned_docs/version-0.5/user/run-node/03-txs.md",93879],"6ff4c518":[()=>n.e(40764).then(n.bind(n,42536)),"@site/docs/build/architecture/adr-013-metrics.md",42536],"703d8a16":[()=>n.e(70083).then(n.bind(n,42896)),"@site/versioned_docs/version-0.5/learn/advanced/01-transactions.md",42896],"70ac12d3":[()=>n.e(8526).then(n.bind(n,6816)),"@site/versioned_docs/version-0.53/user/run-node/06-run-production.md",6816],"70be26ea":[()=>n.e(47533).then(n.bind(n,6270)),"@site/versioned_docs/version-0.5/build/architecture/adr-045-check-delivertx-middlewares.md",6270],"70c1bee6":[()=>n.e(40522).then(n.bind(n,90059)),"@site/docs/build/building-modules/06-keeper.md",90059],"70fcd835":[()=>n.e(34198).then(n.t.bind(n,4533,19)),"~docs/default/version-0-53-metadata-prop-ec6.json",4533],"711773c0":[()=>n.e(14440).then(n.bind(n,33731)),"@site/versioned_docs/version-0.5/tutorials/vote-extensions/auction-frontrunning/00-getting-started.md",33731],"719f9c5c":[()=>n.e(52012).then(n.bind(n,13218)),"@site/versioned_docs/version-0.53/build/architecture/adr-064-abci-2.0.md",13218],"71ae73e2":[()=>n.e(24692).then(n.bind(n,39289)),"@site/versioned_docs/version-0.53/build/building-modules/15-depinject.md",39289],"71f0f4a8":[()=>n.e(17644).then(n.bind(n,90743)),"@site/docs/learn/intro/03-sdk-design.md",90743],"71ff6cc3":[()=>n.e(20543).then(n.bind(n,74977)),"@site/versioned_docs/version-0.53/build/architecture/adr-038-state-listening.md",74977],"720511e2":[()=>n.e(16583).then(n.bind(n,25467)),"@site/versioned_docs/version-0.5/tutorials/tutorials.md",25467],"7208dc7e":[()=>n.e(19572).then(n.bind(n,7814)),"@site/versioned_docs/version-0.47/build/modules/authz/README.md",7814],"720ad20e":[()=>n.e(55126).then(n.bind(n,9549)),"@site/versioned_docs/version-0.5/build/rfc/rfc-001-tx-validation.md",9549],"72525ebc":[()=>n.e(33058).then(n.bind(n,26362)),"@site/versioned_docs/version-0.5/learn/advanced/17-autocli.md",26362],"73896aaa":[()=>n.e(38143).then(n.bind(n,28821)),"@site/versioned_docs/version-0.53/build/modules/nft/README.md",28821],"73aae6b2":[()=>n.e(88564).then(n.bind(n,91097)),"@site/versioned_docs/version-0.5/build/architecture/adr-010-modular-antehandler.md",91097],"73bd573a":[()=>n.e(65336).then(n.bind(n,535)),"@site/versioned_docs/version-0.53/build/architecture/adr-057-app-wiring.md",535],"744425ac":[()=>n.e(70318).then(n.bind(n,19711)),"@site/docs/build/architecture/adr-037-gov-split-vote.md",19711],"75bf1730":[()=>n.e(87910).then(n.bind(n,61970)),"@site/versioned_docs/version-0.5/build/rfc/rfc-template.md",61970],"75d15c1f":[()=>n.e(50367).then(n.bind(n,96447)),"@site/versioned_docs/version-0.5/build/building-apps/05-app-testnet.md",96447],"75d30f98":[()=>n.e(90127).then(n.bind(n,56198)),"@site/docs/build/architecture/adr-029-fee-grant-module.md",56198],"764868ce":[()=>n.e(82774).then(n.bind(n,1782)),"@site/versioned_docs/version-0.53/learn/advanced/04-store.md",1782],"765742cb":[()=>n.e(47595).then(n.bind(n,81364)),"@site/versioned_docs/version-0.5/build/building-modules/02-messages-and-queries.md",81364],76803891:[()=>n.e(72790).then(n.bind(n,19761)),"@site/versioned_docs/version-0.5/build/building-modules/16-testing.md",19761],"76ce1ef4":[()=>n.e(26019).then(n.bind(n,98057)),"@site/versioned_docs/version-0.47/build/modules/params/README.md",98057],"7724251f":[()=>n.e(76755).then(n.bind(n,22872)),"@site/versioned_docs/version-0.47/build/building-modules/07-invariants.md",22872],"773581e1":[()=>n.e(804).then(n.bind(n,14157)),"@site/versioned_docs/version-0.53/build/modules/mint/README.md",14157],"7773679d":[()=>Promise.all([n.e(40532),n.e(22139)]).then(n.bind(n,60474)),"@site/src/pages/v0.53.js",60474],"779fd27d":[()=>n.e(57442).then(n.bind(n,90915)),"@site/versioned_docs/version-0.5/build/architecture/adr-048-consensus-fees.md",90915],"77b1914a":[()=>n.e(82186).then(n.bind(n,71365)),"@site/versioned_docs/version-0.53/build/modules/params/README.md",71365],"77ddcd7c":[()=>n.e(26584).then(n.bind(n,42526)),"@site/versioned_docs/version-0.5/build/architecture/adr-027-deterministic-protobuf-serialization.md",42526],"77e5713b":[()=>n.e(80405).then(n.bind(n,42569)),"@site/versioned_docs/version-0.53/build/spec/store/interblock-cache.md",42569],"785e7e1f":[()=>n.e(50334).then(n.bind(n,67733)),"@site/docs/build/architecture/adr-062-collections-state-layer.md",67733],"789379b8":[()=>n.e(7388).then(n.bind(n,69678)),"@site/versioned_docs/version-0.47/build/building-modules/14-simulator.md",69678],"79983a0b":[()=>n.e(17122).then(n.bind(n,19678)),"@site/versioned_docs/version-0.53/build/modules/auth/1-vesting.md",19678],"79bb1271":[()=>n.e(29574).then(n.bind(n,56086)),"@site/versioned_docs/version-0.5/learn/advanced/05-encoding.md",56086],"7a7877f9":[()=>n.e(5776).then(n.bind(n,7562)),"@site/versioned_docs/version-0.53/learn/intro/00-overview.md",7562],"7aa285c0":[()=>n.e(76932).then(n.bind(n,45828)),"@site/versioned_docs/version-0.53/tutorials/vote-extensions/auction-frontrunning/02-mitigating-front-running-with-vote-extensions.md",45828],"7b69d9e0":[()=>n.e(22418).then(n.bind(n,41430)),"@site/versioned_docs/version-0.53/learn/learn.md",41430],"7bbfe8f1":[()=>n.e(92810).then(n.bind(n,47495)),"@site/versioned_docs/version-0.47/build/building-modules/06-keeper.md",47495],"7d0277b4":[()=>n.e(21820).then(n.bind(n,29770)),"@site/versioned_docs/version-0.47/learn/advanced/14-proto-docs.md",29770],"7d098c8a":[()=>n.e(14855).then(n.bind(n,35446)),"@site/versioned_docs/version-0.5/learn/beginner/04-gas-fees.md",35446],"7d529176":[()=>n.e(75207).then(n.bind(n,69850)),"@site/versioned_docs/version-0.5/tutorials/transactions/00-building-a-transaction.md",69850],"7e7dbe86":[()=>n.e(89391).then(n.bind(n,42634)),"@site/versioned_docs/version-0.53/build/architecture/adr-055-orm.md",42634],"7f3106af":[()=>n.e(47946).then(n.bind(n,30227)),"@site/versioned_docs/version-0.53/build/architecture/adr-011-generalize-genesis-accounts.md",30227],"7f7946f5":[()=>n.e(57033).then(n.bind(n,58199)),"@site/versioned_docs/version-0.5/build/packages/01-depinject.md",58199],"7f7e1547":[()=>n.e(80378).then(n.bind(n,80452)),"@site/versioned_docs/version-0.5/build/modules/consensus/README.md",80452],"7fc8f794":[()=>n.e(73633).then(n.bind(n,81031)),"@site/versioned_docs/version-0.5/build/architecture/adr-033-protobuf-inter-module-comm.md",81031],"7febdbb4":[()=>n.e(81032).then(n.bind(n,61443)),"@site/docs/build/build.md",61443],"8019da80":[()=>n.e(33016).then(n.bind(n,12600)),"@site/versioned_docs/version-0.53/user/user.md",12600],"809b32a9":[()=>n.e(39158).then(n.bind(n,88769)),"@site/versioned_docs/version-0.5/build/building-apps/02-app-mempool.md",88769],"80c48bfe":[()=>n.e(25175).then(n.bind(n,71257)),"@site/versioned_docs/version-0.47/learn/advanced/12-runtx_middleware.md",71257],"80d1ee76":[()=>n.e(17270).then(n.bind(n,35343)),"@site/versioned_docs/version-0.5/build/building-modules/12-errors.md",35343],81524444:[()=>n.e(35203).then(n.bind(n,67487)),"@site/versioned_docs/version-0.53/build/architecture/adr-063-core-module-api.md",67487],"816b83a7":[()=>n.e(71067).then(n.bind(n,24705)),"@site/docs/learn/beginner/04-gas-fees.md",24705],"822523b3":[()=>n.e(42098).then(n.bind(n,80183)),"@site/versioned_docs/version-0.5/build/architecture/adr-006-secret-store-replacement.md",80183],82381013:[()=>n.e(2535).then(n.t.bind(n,15745,19)),"/home/runner/work/cosmos-sdk-docs/cosmos-sdk-docs/.docusaurus/docusaurus-plugin-content-pages/default/plugin-route-context-module-100.json",15745],"82d2ce96":[()=>n.e(9078).then(n.bind(n,53526)),"@site/docs/build/architecture/adr-023-protobuf-naming.md",53526],83150563:[()=>n.e(82065).then(n.bind(n,4484)),"@site/versioned_docs/version-0.47/build/architecture/adr-014-proportional-slashing.md",4484],"833a7118":[()=>n.e(88648).then(n.bind(n,8966)),"@site/versioned_docs/version-0.47/build/building-apps/03-app-upgrade.md",8966],"8359c2ff":[()=>n.e(41961).then(n.bind(n,78832)),"@site/docs/build/architecture/adr-010-modular-antehandler.md",78832],"839de1bf":[()=>n.e(24362).then(n.bind(n,26357)),"@site/versioned_docs/version-0.47/build/packages/03-orm.md",26357],"83b7b25d":[()=>n.e(35502).then(n.bind(n,65159)),"@site/versioned_docs/version-0.53/build/modules/slashing/README.md",65159],"83e4f973":[()=>n.e(73543).then(n.bind(n,19387)),"@site/versioned_docs/version-0.5/build/building-modules/08-genesis.md",19387],84699687:[()=>n.e(69174).then(n.bind(n,95333)),"@site/versioned_docs/version-0.5/user/run-node/06-run-production.md",95333],"8478471d":[()=>n.e(67941).then(n.bind(n,62299)),"@site/versioned_docs/version-0.47/build/spec/ics/ics-030-signed-messages.md",62299],"85324f2a":[()=>n.e(77770).then(n.bind(n,19232)),"@site/docs/learn/advanced/01-transactions.md",19232],"857b6eee":[()=>n.e(57949).then(n.bind(n,46693)),"@site/versioned_docs/version-0.5/build/architecture/adr-034-account-rekeying.md",46693],85808305:[()=>n.e(43545).then(n.bind(n,62987)),"@site/versioned_docs/version-0.53/build/building-modules/17-preblock.md",62987],"85d57d39":[()=>n.e(67039).then(n.bind(n,57667)),"@site/versioned_docs/version-0.53/learn/advanced/13-proto-docs.md",57667],"8625e22a":[()=>n.e(78341).then(n.bind(n,79895)),"@site/versioned_docs/version-0.53/build/modules/consensus/README.md",79895],"869b1712":[()=>n.e(19498).then(n.bind(n,59e3)),"@site/docs/build/architecture/adr-006-secret-store-replacement.md",59e3],"86aa14eb":[()=>n.e(37060).then(n.bind(n,22145)),"@site/versioned_docs/version-0.47/build/architecture/adr-021-protobuf-query-encoding.md",22145],"86fdf241":[()=>n.e(35268).then(n.bind(n,57492)),"@site/versioned_docs/version-0.5/build/modules/bank/README.md",57492],"870aec37":[()=>n.e(403).then(n.bind(n,48750)),"@site/docs/build/modules/slashing/README.md",48750],"870f6f34":[()=>n.e(85886).then(n.bind(n,60598)),"@site/versioned_docs/version-0.53/build/architecture/adr-007-specialization-groups.md",60598],"875c62d0":[()=>n.e(16903).then(n.bind(n,97313)),"@site/docs/build/architecture/adr-template.md",97313],"8805dc4c":[()=>n.e(58614).then(n.bind(n,99112)),"@site/versioned_docs/version-0.53/learn/beginner/04-gas-fees.md",99112],88483576:[()=>n.e(96431).then(n.bind(n,6115)),"@site/versioned_docs/version-0.53/build/modules/auth/README.md",6115],"885ab72d":[()=>n.e(77737).then(n.bind(n,13066)),"@site/versioned_docs/version-0.53/build/architecture/adr-013-metrics.md",13066],"8870dc19":[()=>n.e(84051).then(n.bind(n,36077)),"@site/versioned_docs/version-0.53/tutorials/vote-extensions/auction-frontrunning/02-mitigating-front-running-with-vote-extesions.md",36077],"88878c16":[()=>n.e(68787).then(n.bind(n,1380)),"@site/versioned_docs/version-0.53/build/architecture/PROCESS.md",1380],"8976fd65":[()=>n.e(7312).then(n.bind(n,7128)),"@site/docs/tutorials/vote-extensions/oracle/01-what-is-an-oracle.md",7128],"8a332cda":[()=>n.e(13978).then(n.bind(n,16951)),"@site/versioned_docs/version-0.53/build/architecture/adr-008-dCERT-group.md",16951],"8a4d0f47":[()=>n.e(69558).then(n.bind(n,67840)),"@site/versioned_docs/version-0.5/build/rfc/PROCESS.md",67840],"8ad3a333":[()=>n.e(55590).then(n.bind(n,23764)),"@site/versioned_docs/version-0.53/build/architecture/adr-002-docs-structure.md",23764],"8b89a72a":[()=>n.e(96611).then(n.bind(n,98344)),"@site/versioned_docs/version-0.47/build/modules/upgrade/README.md",98344],"8be5398d":[()=>n.e(86689).then(n.bind(n,60285)),"@site/versioned_docs/version-0.47/learn/advanced/03-node.md",60285],"8c3238ef":[()=>n.e(72129).then(n.bind(n,2414)),"@site/docs/build/architecture/adr-028-public-key-addresses.md",2414],"8cc544de":[()=>n.e(39639).then(n.bind(n,77271)),"@site/versioned_docs/version-0.5/build/packages/README.md",77271],"8cee131b":[()=>n.e(90168).then(n.bind(n,29855)),"@site/versioned_docs/version-0.47/learn/beginner/00-overview-app.md",29855],"8d2bf50a":[()=>n.e(46317).then(n.bind(n,15361)),"@site/versioned_docs/version-0.5/build/architecture/adr-042-group-module.md",15361],"8d440aa6":[()=>n.e(11317).then(n.bind(n,31108)),"@site/versioned_docs/version-0.47/build/packages/01-depinject.md",31108],"8d7e5537":[()=>n.e(73458).then(n.bind(n,60572)),"@site/versioned_docs/version-0.5/build/modules/nft/README.md",60572],"8db4fe50":[()=>n.e(3123).then(n.bind(n,14923)),"@site/versioned_docs/version-0.53/build/modules/gov/README.md",14923],"8deb8625":[()=>n.e(48586).then(n.bind(n,94082)),"@site/versioned_docs/version-0.5/user/run-node/05-run-testnet.md",94082],"8dfd40e4":[()=>n.e(89320).then(n.bind(n,83160)),"@site/versioned_docs/version-0.53/build/modules/circuit/README.md",83160],"8e0e37c9":[()=>n.e(65851).then(n.bind(n,64478)),"@site/versioned_docs/version-0.5/build/architecture/adr-035-rosetta-api-support.md",64478],"8e3af0ef":[()=>n.e(51501).then(n.bind(n,47699)),"@site/versioned_docs/version-0.47/build/architecture/adr-012-state-accessors.md",47699],"8e6c6e15":[()=>n.e(11309).then(n.bind(n,86336)),"@site/versioned_docs/version-0.5/build/architecture/adr-016-validator-consensus-key-rotation.md",86336],"8e6de85e":[()=>n.e(71527).then(n.bind(n,33471)),"@site/versioned_docs/version-0.5/build/abci/01-prepare-proposal.md",33471],"8e99a8bc":[()=>n.e(46483).then(n.bind(n,12518)),"@site/versioned_docs/version-0.47/build/spec/addresses/bech32.md",12518],"8ef35be7":[()=>n.e(89873).then(n.bind(n,87675)),"@site/versioned_docs/version-0.47/build/rfc/README.md",87675],"8ef42e8e":[()=>n.e(64271).then(n.bind(n,91976)),"@site/versioned_docs/version-0.5/build/architecture/adr-054-semver-compatible-modules.md",91976],"8f6f3e66":[()=>n.e(57922).then(n.bind(n,79310)),"@site/docs/build/architecture/adr-018-extendable-voting-period.md",79310],"8ff61cd7":[()=>n.e(11924).then(n.bind(n,23036)),"@site/docs/build/architecture/adr-008-dCERT-group.md",23036],"9041feaa":[()=>n.e(83614).then(n.bind(n,67471)),"@site/docs/build/architecture/adr-017-historical-header-module.md",67471],"90a7b212":[()=>n.e(61825).then(n.bind(n,52466)),"@site/versioned_docs/version-0.53/build/architecture/adr-050-sign-mode-textual-annex2.md",52466],"90c75a55":[()=>n.e(51571).then(n.bind(n,37498)),"@site/versioned_docs/version-0.53/learn/advanced/00-baseapp.md",37498],"91d01330":[()=>n.e(72432).then(n.bind(n,46884)),"@site/versioned_docs/version-0.5/build/spec/addresses/README.md",46884],"935f2afb":[()=>n.e(80053).then(n.t.bind(n,1109,19)),"~docs/default/version-current-metadata-prop-751.json",1109],93935580:[()=>n.e(31900).then(n.bind(n,24051)),"@site/versioned_docs/version-0.47/learn/advanced/08-events.md",24051],"93e252d5":[()=>n.e(4850).then(n.bind(n,46384)),"@site/versioned_docs/version-0.47/build/architecture/adr-050-sign-mode-textual-annex1.md",46384],"943b9719":[()=>n.e(28725).then(n.bind(n,94782)),"@site/versioned_docs/version-0.53/learn/beginner/03-accounts.md",94782],"94890e05":[()=>n.e(59189).then(n.bind(n,50092)),"@site/versioned_docs/version-0.53/build/architecture/adr-034-account-rekeying.md",50092],"94acb703":[()=>n.e(89466).then(n.bind(n,91125)),"@site/versioned_docs/version-0.53/build/architecture/adr-022-custom-panic-handling.md",91125],"94af328d":[()=>n.e(57143).then(n.bind(n,56085)),"@site/versioned_docs/version-0.53/build/architecture/adr-050-sign-mode-textual-annex1.md",56085],"952f5852":[()=>n.e(61120).then(n.bind(n,53940)),"@site/versioned_docs/version-0.53/build/building-modules/04-query-services.md",53940],"9643d5ec":[()=>n.e(77441).then(n.bind(n,8732)),"@site/versioned_docs/version-0.53/build/building-modules/06-keeper.md",8732],"965eeab1":[()=>n.e(51641).then(n.bind(n,16173)),"@site/versioned_docs/version-0.5/learn/advanced/08-events.md",16173],"9665df9b":[()=>n.e(16450).then(n.bind(n,65731)),"@site/docs/build/abci/01-prepare-proposal.md",65731],"967de5cd":[()=>n.e(23899).then(n.bind(n,12644)),"@site/versioned_docs/version-0.5/build/architecture/adr-039-epoched-staking.md",12644],97778202:[()=>n.e(33280).then(n.bind(n,62501)),"@site/docs/build/building-apps/00-runtime.md",62501],"9835dfb7":[()=>n.e(47552).then(n.bind(n,91049)),"@site/versioned_docs/version-0.53/build/building-modules/00-intro.md",91049],"9881a7cf":[()=>Promise.all([n.e(40532),n.e(89653)]).then(n.bind(n,46809)),"@site/src/pages/v0.47.js",46809],99178835:[()=>n.e(5859).then(n.bind(n,54313)),"@site/versioned_docs/version-0.47/build/rfc/PROCESS.md",54313],"992ec6a3":[()=>n.e(18422).then(n.bind(n,65340)),"@site/versioned_docs/version-0.53/build/rfc/PROCESS.md",65340],"99321b2e":[()=>n.e(21318).then(n.bind(n,494)),"@site/versioned_docs/version-0.47/build/modules/staking/README.md",494],"9976d482":[()=>n.e(50168).then(n.bind(n,28795)),"@site/versioned_docs/version-0.5/tutorials/vote-extensions/auction-frontrunning/03-demo-of-mitigating-front-running.md",28795],"99798f37":[()=>n.e(70854).then(n.bind(n,99030)),"@site/docs/build/building-modules/14-simulator.md",99030],"99e2197f":[()=>n.e(23039).then(n.bind(n,23554)),"@site/versioned_docs/version-0.5/build/architecture/adr-template.md",23554],"9a2c8305":[()=>n.e(69608).then(n.bind(n,99300)),"@site/versioned_docs/version-0.5/build/modules/genutil/README.md",99300],"9a8a7df7":[()=>n.e(85441).then(n.bind(n,40414)),"@site/docs/learn/intro/01-why-app-specific.md",40414],"9aaa9e0f":[()=>n.e(89234).then(n.bind(n,74540)),"@site/versioned_docs/version-0.5/build/architecture/adr-046-module-params.md",74540],"9b3f8d6c":[()=>n.e(77277).then(n.bind(n,83345)),"@site/versioned_docs/version-0.47/build/architecture/adr-019-protobuf-state-encoding.md",83345],"9b541334":[()=>n.e(85638).then(n.bind(n,85812)),"@site/versioned_docs/version-0.47/build/building-modules/01-module-manager.md",85812],"9bad717f":[()=>n.e(31983).then(n.bind(n,11216)),"@site/versioned_docs/version-0.5/build/architecture/adr-007-specialization-groups.md",11216],"9bc0a3f4":[()=>n.e(50194).then(n.bind(n,22804)),"@site/versioned_docs/version-0.47/build/architecture/adr-008-dCERT-group.md",22804],"9c027584":[()=>n.e(90992).then(n.bind(n,31640)),"@site/docs/build/building-modules/05-protobuf-annotations.md",31640],"9c090034":[()=>n.e(97146).then(n.bind(n,94408)),"@site/versioned_docs/version-0.53/build/building-modules/02-messages-and-queries.md",94408],"9c7defc6":[()=>n.e(33134).then(n.bind(n,87953)),"@site/versioned_docs/version-0.5/build/architecture/adr-065-store-v2.md",87953],"9c9e410f":[()=>n.e(20690).then(n.bind(n,27578)),"@site/versioned_docs/version-0.5/build/architecture/adr-028-public-key-addresses.md",27578],"9d2db5f9":[()=>n.e(26712).then(n.bind(n,36233)),"@site/versioned_docs/version-0.53/build/architecture/adr-009-evidence-module.md",36233],"9d316c28":[()=>n.e(85709).then(n.bind(n,51686)),"@site/versioned_docs/version-0.47/build/architecture/adr-010-modular-antehandler.md",51686],"9d530b38":[()=>n.e(70219).then(n.bind(n,90841)),"@site/versioned_docs/version-0.5/build/architecture/adr-017-historical-header-module.md",90841],"9d5cd317":[()=>n.e(89193).then(n.bind(n,6838)),"@site/docs/build/rfc/rfc/README.md",6838],"9d66e031":[()=>n.e(99377).then(n.bind(n,54650)),"@site/docs/build/migrations/01-intro.md",54650],"9d6ae47a":[()=>n.e(18975).then(n.bind(n,67089)),"@site/docs/build/architecture/adr-012-state-accessors.md",67089],"9def630d":[()=>n.e(48090).then(n.t.bind(n,7085,19)),"/home/runner/work/cosmos-sdk-docs/cosmos-sdk-docs/.docusaurus/docusaurus-theme-search-algolia/default/plugin-route-context-module-100.json",7085],"9df57219":[()=>n.e(56825).then(n.bind(n,99930)),"@site/versioned_docs/version-0.5/build/migrations/01-intro.md",99930],"9e6d69e5":[()=>n.e(53756).then(n.bind(n,62728)),"@site/docs/tutorials/vote-extensions/auction-frontrunning/02-mitigating-front-running-with-vote-extensions.md",62728],"9e895eaf":[()=>n.e(53465).then(n.bind(n,36132)),"@site/docs/build/architecture/adr-050-sign-mode-textual-annex1.md",36132],"9eaae02d":[()=>n.e(25280).then(n.bind(n,8039)),"@site/docs/build/architecture/adr-021-protobuf-query-encoding.md",8039],"9f0e9619":[()=>n.e(46869).then(n.bind(n,92531)),"@site/versioned_docs/version-0.53/build/spec/SPEC_MODULE.md",92531],"9f3b3901":[()=>n.e(22185).then(n.bind(n,22171)),"@site/versioned_docs/version-0.53/build/building-apps/04-vote-extensions.md",22171],"9f8f5e6c":[()=>n.e(88600).then(n.bind(n,91059)),"@site/docs/tutorials/tutorials.md",91059],a0e41bb4:[()=>n.e(62632).then(n.bind(n,90989)),"@site/docs/learn/beginner/01-tx-lifecycle.md",90989],a168a626:[()=>n.e(2219).then(n.bind(n,86994)),"@site/versioned_docs/version-0.53/build/architecture/adr-059-test-scopes.md",86994],a1934dc7:[()=>n.e(65522).then(n.bind(n,79577)),"@site/versioned_docs/version-0.47/build/architecture/adr-044-protobuf-updates-guidelines.md",79577],a1f45c99:[()=>n.e(16057).then(n.bind(n,22991)),"@site/versioned_docs/version-0.53/build/architecture/adr-045-check-delivertx-middlewares.md",22991],a260a009:[()=>n.e(94391).then(n.bind(n,29060)),"@site/docs/build/architecture/adr-004-split-denomination-keys.md",29060],a2fe3bf9:[()=>n.e(24553).then(n.bind(n,84155)),"@site/versioned_docs/version-0.53/build/modules/authz/README.md",84155],a40affa6:[()=>n.e(42714).then(n.bind(n,65634)),"@site/docs/build/tooling/README.md",65634],a4703051:[()=>n.e(9093).then(n.bind(n,28680)),"@site/versioned_docs/version-0.47/build/rfc/rfc-001-tx-validation.md",28680],a4afe76c:[()=>n.e(8951).then(n.bind(n,15661)),"@site/versioned_docs/version-0.5/build/building-modules/13-upgrade.md",15661],a51c401b:[()=>n.e(80909).then(n.bind(n,99079)),"@site/versioned_docs/version-0.5/tutorials/vote-extensions/oracle/03-testing-oracle.md",99079],a5426c5f:[()=>n.e(28842).then(n.bind(n,43251)),"@site/versioned_docs/version-0.5/build/modules/evidence/README.md",43251],a55abc94:[()=>n.e(73565).then(n.bind(n,58757)),"@site/versioned_docs/version-0.5/build/architecture/adr-008-dCERT-group.md",58757],a5bca27f:[()=>n.e(88243).then(n.bind(n,57491)),"@site/docs/build/architecture/adr-033-protobuf-inter-module-comm.md",57491],a5da7113:[()=>n.e(39244).then(n.bind(n,54275)),"@site/docs/build/tooling/02-confix.md",54275],a62c5897:[()=>n.e(49551).then(n.bind(n,83340)),"@site/docs/build/rfc/README.md",83340],a66af16e:[()=>n.e(20950).then(n.bind(n,60122)),"@site/versioned_docs/version-0.53/learn/intro/03-sdk-design.md",60122],a709cc54:[()=>n.e(67258).then(n.bind(n,33472)),"@site/docs/build/architecture/adr-068-preblock.md",33472],a7668962:[()=>n.e(95717).then(n.bind(n,51497)),"@site/versioned_docs/version-0.47/build/modules/group/README.md",51497],a766e952:[()=>n.e(81998).then(n.bind(n,8347)),"@site/versioned_docs/version-0.5/tutorials/vote-extensions/auction-frontrunning/01-understanding-frontrunning.md",8347],a8a413f5:[()=>n.e(666).then(n.bind(n,5117)),"@site/versioned_docs/version-0.5/build/architecture/adr-061-liquid-staking.md",5117],a8c48608:[()=>n.e(70549).then(n.bind(n,54960)),"@site/docs/build/architecture/adr-059-test-scopes.md",54960],a8d267c2:[()=>n.e(66182).then(n.bind(n,65944)),"@site/versioned_docs/version-0.5/build/modules/distribution/README.md",65944],a972391d:[()=>n.e(45312).then(n.bind(n,47230)),"@site/versioned_docs/version-0.5/build/architecture/adr-009-evidence-module.md",47230],a9b308bd:[()=>n.e(66992).then(n.bind(n,98845)),"@site/versioned_docs/version-0.53/learn/beginner/00-app-anatomy.md",98845],aa666ede:[()=>n.e(12933).then(n.bind(n,29942)),"@site/versioned_docs/version-0.53/build/building-modules/11-structure.md",29942],aa968dee:[()=>n.e(46694).then(n.bind(n,67494)),"@site/versioned_docs/version-0.47/learn/advanced/00-baseapp.md",67494],aaf4b48a:[()=>n.e(37958).then(n.bind(n,25257)),"@site/versioned_docs/version-0.47/build/architecture/adr-002-docs-structure.md",25257],ab4f1707:[()=>n.e(79266).then(n.bind(n,25929)),"@site/versioned_docs/version-0.53/build/migrations/01-intro.md",25929],ab67bbf8:[()=>n.e(32025).then(n.bind(n,21950)),"@site/versioned_docs/version-0.53/build/architecture/adr-024-coin-metadata.md",21950],ab803b3b:[()=>n.e(96049).then(n.bind(n,7381)),"@site/versioned_docs/version-0.5/user/run-node/00-keyring.md",7381],ac8586da:[()=>n.e(17067).then(n.bind(n,92705)),"@site/versioned_docs/version-0.5/learn/beginner/03-accounts.md",92705],ac9977f4:[()=>n.e(46666).then(n.bind(n,57171)),"@site/versioned_docs/version-0.47/user/run-node/03-txs.md",57171],acdfdbf0:[()=>n.e(86823).then(n.bind(n,44138)),"@site/versioned_docs/version-0.47/build/rfc/rfc-template.md",44138],ad1df3b6:[()=>n.e(6891).then(n.bind(n,18211)),"@site/versioned_docs/version-0.53/build/architecture/adr-041-in-place-store-migrations.md",18211],ad20c268:[()=>n.e(76071).then(n.bind(n,18739)),"@site/versioned_docs/version-0.5/build/architecture/adr-047-extend-upgrade-plan.md",18739],ad793b63:[()=>n.e(51524).then(n.bind(n,46195)),"@site/versioned_docs/version-0.5/build/abci/03-vote-extensions.md",46195],ad890002:[()=>n.e(53785).then(n.bind(n,19509)),"@site/versioned_docs/version-0.47/build/architecture/adr-059-test-scopes.md",19509],ae253e90:[()=>n.e(48811).then(n.bind(n,4635)),"@site/versioned_docs/version-0.47/user/run-node/05-run-testnet.md",4635],ae2c4c3c:[()=>n.e(2695).then(n.bind(n,65273)),"@site/versioned_docs/version-0.47/build/modules/bank/README.md",65273],ae624b6b:[()=>n.e(26726).then(n.bind(n,88577)),"@site/versioned_docs/version-0.5/build/building-apps/03-app-upgrade.md",88577],ae6a9435:[()=>n.e(78968).then(n.bind(n,17885)),"@site/versioned_docs/version-0.47/learn/advanced/02-context.md",17885],aeebfd70:[()=>n.e(26286).then(n.bind(n,80544)),"@site/versioned_docs/version-0.53/build/modules/genutil/README.md",80544],af783b6d:[()=>n.e(73967).then(n.bind(n,18169)),"@site/versioned_docs/version-0.5/build/rfc/rfc/README.md",18169],afa1afb9:[()=>n.e(8208).then(n.bind(n,37630)),"@site/docs/learn/advanced/17-autocli.md",37630],b02c8e40:[()=>n.e(39669).then(n.bind(n,15203)),"@site/versioned_docs/version-0.53/build/architecture/adr-029-fee-grant-module.md",15203],b02c9b7b:[()=>n.e(42754).then(n.bind(n,11630)),"@site/docs/build/packages/02-collections.md",11630],b035da98:[()=>n.e(80755).then(n.bind(n,90788)),"@site/docs/build/building-modules/08-genesis.md",90788],b1849a1b:[()=>n.e(32281).then(n.bind(n,12475)),"@site/docs/learn/advanced/11-runtx_middleware.md",12475],b1cb883d:[()=>n.e(32746).then(n.bind(n,24378)),"@site/versioned_docs/version-0.47/build/architecture/adr-063-core-module-api.md",24378],b21e4d20:[()=>n.e(69552).then(n.bind(n,56075)),"@site/versioned_docs/version-0.5/build/architecture/adr-050-sign-mode-textual.md",56075],b2be9cbc:[()=>n.e(33038).then(n.bind(n,61644)),"@site/versioned_docs/version-0.5/build/rfc/rfc/rfc-001-tx-validation.md",61644],b3c3267c:[()=>n.e(1328).then(n.bind(n,18322)),"@site/docs/build/modules/crisis/README.md",18322],b3c64a36:[()=>n.e(68803).then(n.bind(n,75012)),"@site/versioned_docs/version-0.47/build/architecture/adr-049-state-sync-hooks.md",75012],b3e0b9bf:[()=>n.e(17010).then(n.bind(n,42687)),"@site/docs/build/packages/01-depinject.md",42687],b43b0eba:[()=>n.e(95883).then(n.bind(n,63068)),"@site/versioned_docs/version-0.47/build/tooling/02-confix.md",63068],b4aa7845:[()=>n.e(79174).then(n.bind(n,92136)),"@site/versioned_docs/version-0.5/build/spec/store/interblock-cache.md",92136],b4c09052:[()=>n.e(11290).then(n.bind(n,9700)),"@site/versioned_docs/version-0.53/build/building-modules/16-testing.md",9700],b5a24512:[()=>n.e(2523).then(n.bind(n,78989)),"@site/docs/build/tooling/03-hubl.md",78989],b5b2690f:[()=>n.e(4925).then(n.bind(n,35762)),"@site/versioned_docs/version-0.47/build/architecture/adr-011-generalize-genesis-accounts.md",35762],b6357d2a:[()=>n.e(35759).then(n.bind(n,63666)),"@site/docs/build/spec/SPEC_STANDARD.md",63666],b7416e28:[()=>n.e(66845).then(n.bind(n,6084)),"@site/versioned_docs/version-0.47/build/architecture/adr-045-check-delivertx-middlewares.md",6084],b7669011:[()=>n.e(57820).then(n.bind(n,97749)),"@site/versioned_docs/version-0.5/build/building-modules/15-depinject.md",97749],b79efb2e:[()=>n.e(39094).then(n.bind(n,52203)),"@site/versioned_docs/version-0.47/build/architecture/adr-053-go-module-refactoring.md",52203],b80e149e:[()=>n.e(67554).then(n.bind(n,15036)),"@site/docs/build/architecture/adr-061-liquid-staking.md",15036],b87a09eb:[()=>n.e(91936).then(n.bind(n,64914)),"@site/versioned_docs/version-0.5/build/modules/auth/2-tx.md",64914],b8b54f7d:[()=>n.e(29779).then(n.bind(n,78441)),"@site/docs/build/architecture/adr-020-protobuf-transaction-encoding.md",78441],b9af48dd:[()=>n.e(18595).then(n.bind(n,9398)),"@site/docs/build/rfc/rfc-template.md",9398],b9d3470d:[()=>n.e(80084).then(n.bind(n,32541)),"@site/docs/build/architecture/adr-064-abci-2.0.md",32541],b9ee742f:[()=>n.e(49181).then(n.bind(n,27251)),"@site/versioned_docs/version-0.53/learn/advanced/02-context.md",27251],ba68c382:[()=>n.e(11268).then(n.bind(n,50345)),"@site/docs/build/architecture/adr-040-storage-and-smt-state-commitments.md",50345],ba7c68e4:[()=>n.e(95398).then(n.bind(n,68210)),"@site/versioned_docs/version-0.53/build/building-modules/12-errors.md",68210],bb79a37e:[()=>n.e(33140).then(n.bind(n,88031)),"@site/versioned_docs/version-0.53/learn/advanced/12-simulation.md",88031],bb7c49ad:[()=>n.e(60762).then(n.bind(n,27762)),"@site/versioned_docs/version-0.53/build/architecture/adr-023-protobuf-naming.md",27762],bba17709:[()=>n.e(26549).then(n.bind(n,39519)),"@site/docs/tutorials/vote-extensions/auction-frontrunning/02-mitigating-front-running-with-vote-extesions.md",39519],bbf368f6:[()=>n.e(23478).then(n.bind(n,17449)),"@site/versioned_docs/version-0.53/learn/advanced/01-transactions.md",17449],bd02d8ca:[()=>n.e(73280).then(n.bind(n,18985)),"@site/versioned_docs/version-0.5/learn/advanced/03-node.md",18985],bd20944e:[()=>n.e(33920).then(n.bind(n,30903)),"@site/versioned_docs/version-0.5/build/architecture/adr-020-protobuf-transaction-encoding.md",30903],bd218320:[()=>n.e(44834).then(n.bind(n,83064)),"@site/versioned_docs/version-0.5/build/packages/02-collections.md",83064],bd688a70:[()=>n.e(98673).then(n.bind(n,6856)),"@site/versioned_docs/version-0.53/build/architecture/adr-027-deterministic-protobuf-serialization.md",6856],bd6e742f:[()=>n.e(44475).then(n.bind(n,85265)),"@site/versioned_docs/version-0.53/tutorials/vote-extensions/auction-frontrunning/03-demo-of-mitigating-front-running.md",85265],bd762af2:[()=>n.e(76949).then(n.bind(n,23974)),"@site/docs/build/architecture/adr-049-state-sync-hooks.md",23974],bd7acffd:[()=>n.e(63669).then(n.bind(n,86477)),"@site/versioned_docs/version-0.5/build/architecture/adr-012-state-accessors.md",86477],bdce6a5c:[()=>n.e(18971).then(n.bind(n,63231)),"@site/versioned_docs/version-0.53/build/architecture/adr-033-protobuf-inter-module-comm.md",63231],be2f3b0f:[()=>n.e(65504).then(n.bind(n,65484)),"@site/docs/build/building-modules/09-module-interfaces.md",65484],be7454af:[()=>n.e(5040).then(n.bind(n,22493)),"@site/docs/build/architecture/adr-054-semver-compatible-modules.md",22493],bf6fdb00:[()=>n.e(33303).then(n.bind(n,89977)),"@site/versioned_docs/version-0.47/build/architecture/adr-004-split-denomination-keys.md",89977],bf89b568:[()=>n.e(78684).then(n.bind(n,74494)),"@site/versioned_docs/version-0.5/build/architecture/adr-021-protobuf-query-encoding.md",74494],bff21acd:[()=>n.e(43393).then(n.bind(n,91733)),"@site/versioned_docs/version-0.47/build/modules/mint/README.md",91733],c02ed3f0:[()=>n.e(88030).then(n.bind(n,2127)),"@site/versioned_docs/version-0.47/build/modules/accounts/accounts.md",2127],c0474b3e:[()=>n.e(24255).then(n.bind(n,18189)),"@site/versioned_docs/version-0.53/learn/beginner/01-tx-lifecycle.md",18189],c053703f:[()=>n.e(44642).then(n.bind(n,93371)),"@site/versioned_docs/version-0.53/build/building-modules/13-upgrade.md",93371],c0908fe0:[()=>n.e(17207).then(n.bind(n,83186)),"@site/versioned_docs/version-0.53/build/building-apps/02-app-mempool.md",83186],c125ba43:[()=>n.e(69939).then(n.bind(n,76005)),"@site/versioned_docs/version-0.53/learn/advanced/15-upgrade.md",76005],c1aad233:[()=>n.e(9924).then(n.bind(n,75394)),"@site/versioned_docs/version-0.53/build/architecture/adr-040-storage-and-smt-state-commitments.md",75394],c3055928:[()=>n.e(38541).then(n.bind(n,73960)),"@site/versioned_docs/version-0.47/build/modules/evidence/README.md",73960],c32c23a6:[()=>n.e(30449).then(n.bind(n,94590)),"@site/versioned_docs/version-0.5/tutorials/vote-extensions/oracle/01-what-is-an-oracle.md",94590],c39883fb:[()=>n.e(8262).then(n.bind(n,31446)),"@site/versioned_docs/version-0.53/build/abci/03-vote-extensions.md",31446],c3b6cb8e:[()=>n.e(17244).then(n.bind(n,51861)),"@site/docs/tutorials/vote-extensions/auction-frontrunning/01-understanding-frontrunning.md",51861],c3bfd1e0:[()=>n.e(77262).then(n.bind(n,70651)),"@site/docs/build/architecture/adr-041-in-place-store-migrations.md",70651],c4165a11:[()=>n.e(35995).then(n.bind(n,6425)),"@site/versioned_docs/version-0.53/build/architecture/adr-035-rosetta-api-support.md",6425],c421328a:[()=>n.e(52710).then(n.bind(n,4625)),"@site/versioned_docs/version-0.5/learn/advanced/12-simulation.md",4625],c43beea5:[()=>n.e(35098).then(n.bind(n,21598)),"@site/versioned_docs/version-0.5/build/rfc/rfc/rfc-template.md",21598],c4f5d8e4:[()=>Promise.all([n.e(40532),n.e(64195)]).then(n.bind(n,62841)),"@site/src/pages/index.js",62841],c598c2c9:[()=>n.e(36686).then(n.bind(n,42064)),"@site/versioned_docs/version-0.47/learn/beginner/02-query-lifecycle.md",42064],c72085d7:[()=>n.e(46654).then(n.bind(n,59185)),"@site/docs/build/building-modules/03-msg-services.md",59185],c740261d:[()=>n.e(78533).then(n.bind(n,68811)),"@site/versioned_docs/version-0.47/learn/intro/02-sdk-app-architecture.md",68811],c7b19931:[()=>n.e(74864).then(n.bind(n,11433)),"@site/versioned_docs/version-0.53/build/modules/feegrant/README.md",11433],c7d7cc59:[()=>n.e(79624).then(n.bind(n,23427)),"@site/docs/build/modules/upgrade/README.md",23427],c8b6be50:[()=>n.e(30655).then(n.bind(n,84347)),"@site/versioned_docs/version-0.53/learn/advanced/03-node.md",84347],c8c93f1a:[()=>n.e(7002).then(n.bind(n,70506)),"@site/versioned_docs/version-0.47/build/architecture/adr-062-collections-state-layer.md",70506],c8f425bc:[()=>n.e(81177).then(n.bind(n,2948)),"@site/versioned_docs/version-0.53/learn/advanced/08-events.md",2948],c95a5a9f:[()=>n.e(59262).then(n.bind(n,84653)),"@site/docs/learn/advanced/16-config.md",84653],c9c6ec1d:[()=>n.e(30899).then(n.bind(n,15156)),"@site/docs/learn/advanced/09-telemetry.md",15156],c9ce5ce7:[()=>n.e(71343).then(n.bind(n,99789)),"@site/versioned_docs/version-0.53/build/building-modules/06-beginblock-endblock.md",99789],ca1d620e:[()=>n.e(65858).then(n.bind(n,10216)),"@site/versioned_docs/version-0.5/build/tooling/03-hubl.md",10216],cab9f56c:[()=>n.e(88900).then(n.bind(n,31841)),"@site/docs/build/packages/README.md",31841],cadad489:[()=>n.e(55638).then(n.bind(n,20068)),"@site/docs/build/architecture/adr-009-evidence-module.md",20068],cae7c36f:[()=>n.e(70898).then(n.bind(n,2089)),"@site/docs/build/architecture/adr-036-arbitrary-signature.md",2089],cb9a9bd3:[()=>n.e(51200).then(n.bind(n,76558)),"@site/versioned_docs/version-0.5/user/run-node/02-interact-node.md",76558],cbcb2342:[()=>n.e(22646).then(n.bind(n,95568)),"@site/docs/build/architecture/adr-035-rosetta-api-support.md",95568],cc857825:[()=>n.e(67144).then(n.bind(n,75476)),"@site/versioned_docs/version-0.47/build/architecture/adr-035-rosetta-api-support.md",75476],cc939d06:[()=>n.e(22339).then(n.bind(n,58514)),"@site/docs/build/spec/addresses/README.md",58514],cd39a837:[()=>n.e(50228).then(n.bind(n,27896)),"@site/versioned_docs/version-0.47/learn/beginner/03-accounts.md",27896],cd3aefe3:[()=>n.e(78763).then(n.bind(n,72086)),"@site/versioned_docs/version-0.5/build/architecture/adr-032-typed-events.md",72086],cd7562fe:[()=>n.e(46534).then(n.bind(n,47415)),"@site/versioned_docs/version-0.53/build/rfc/rfc-template.md",47415],cd85affe:[()=>n.e(2533).then(n.bind(n,24150)),"@site/docs/learn/advanced/15-upgrade.md",24150],ce104a53:[()=>n.e(15143).then(n.bind(n,26350)),"@site/versioned_docs/version-0.47/build/architecture/adr-040-storage-and-smt-state-commitments.md",26350],ce1a6d79:[()=>n.e(87177).then(n.bind(n,8883)),"@site/docs/build/architecture/adr-014-proportional-slashing.md",8883],ce7ec684:[()=>n.e(75379).then(n.bind(n,38395)),"@site/versioned_docs/version-0.5/build/architecture/adr-068-preblock.md",38395],cecd2aa8:[()=>n.e(18037).then(n.bind(n,64205)),"@site/docs/user/run-node/02-interact-node.md",64205],cf441443:[()=>n.e(74639).then(n.bind(n,28563)),"@site/versioned_docs/version-0.47/build/architecture/adr-054-semver-compatible-modules.md",28563],cf7cbbaf:[()=>n.e(3372).then(n.bind(n,19848)),"@site/versioned_docs/version-0.47/build/architecture/adr-003-dynamic-capability-store.md",19848],cfacf430:[()=>n.e(63589).then(n.bind(n,42628)),"@site/versioned_docs/version-0.5/build/migrations/02-upgrade-reference.md",42628],d0a77cca:[()=>n.e(19463).then(n.bind(n,53602)),"@site/docs/build/architecture/adr-053-go-module-refactoring.md",53602],d0ee4882:[()=>n.e(2032).then(n.bind(n,17800)),"@site/versioned_docs/version-0.5/build/architecture/adr-063-core-module-api.md",17800],d1e0f614:[()=>n.e(95640).then(n.bind(n,20241)),"@site/versioned_docs/version-0.5/build/building-apps/01-app-go-v2.md",20241],d2308657:[()=>n.e(12709).then(n.bind(n,84143)),"@site/docs/build/building-modules/11-structure.md",84143],d2d652d4:[()=>n.e(66402).then(n.bind(n,83777)),"@site/docs/build/architecture/adr-034-account-rekeying.md",83777],d2f21897:[()=>n.e(1679).then(n.bind(n,64153)),"@site/versioned_docs/version-0.53/build/abci/00-introduction.md",64153],d37a0fb0:[()=>n.e(76472).then(n.bind(n,73618)),"@site/versioned_docs/version-0.47/build/architecture/adr-027-deterministic-protobuf-serialization.md",73618],d3a351a9:[()=>n.e(3110).then(n.bind(n,75003)),"@site/docs/build/spec/store/interblock-cache.md",75003],d46106c3:[()=>n.e(65940).then(n.bind(n,98713)),"@site/versioned_docs/version-0.53/build/architecture/adr-010-modular-antehandler.md",98713],d461e889:[()=>n.e(11165).then(n.bind(n,67548)),"@site/docs/build/architecture/adr-044-protobuf-updates-guidelines.md",67548],d4ec8ac1:[()=>n.e(32022).then(n.bind(n,61067)),"@site/versioned_docs/version-0.47/learn/advanced/07-cli.md",61067],d5186259:[()=>n.e(19812).then(n.bind(n,37621)),"@site/versioned_docs/version-0.47/build/architecture/adr-041-in-place-store-migrations.md",37621],d52f8b87:[()=>n.e(64782).then(n.bind(n,67172)),"@site/versioned_docs/version-0.5/build/spec/store/README.md",67172],d5b23884:[()=>n.e(83945).then(n.bind(n,65071)),"@site/versioned_docs/version-0.47/build/architecture/adr-016-validator-consensus-key-rotation.md",65071],d5d3bad5:[()=>n.e(37801).then(n.bind(n,27600)),"@site/versioned_docs/version-0.47/build/architecture/adr-060-abci-1.0.md",27600],d6254ce7:[()=>n.e(80635).then(n.bind(n,49981)),"@site/versioned_docs/version-0.53/build/architecture/adr-004-split-denomination-keys.md",49981],d669e822:[()=>n.e(90349).then(n.t.bind(n,60794,19)),"~docs/default/version-0-47-metadata-prop-dd7.json",60794],d6c9afc4:[()=>n.e(31534).then(n.bind(n,42123)),"@site/versioned_docs/version-0.53/user/run-node/05-run-testnet.md",42123],d6ee8909:[()=>n.e(7044).then(n.bind(n,40019)),"@site/versioned_docs/version-0.5/build/architecture/adr-041-in-place-store-migrations.md",40019],d6fe5434:[()=>n.e(45473).then(n.bind(n,9423)),"@site/versioned_docs/version-0.53/tutorials/vote-extensions/auction-frontrunning/01-understanding-frontrunning.md",9423],d7840470:[()=>n.e(57120).then(n.bind(n,8577)),"@site/docs/build/architecture/adr-038-state-listening.md",8577],d793c429:[()=>n.e(24114).then(n.bind(n,25993)),"@site/versioned_docs/version-0.5/build/building-modules/09-module-interfaces.md",25993],d83c2b04:[()=>n.e(24564).then(n.bind(n,41231)),"@site/versioned_docs/version-0.47/learn/learn.md",41231],d864bb42:[()=>n.e(8814).then(n.bind(n,48308)),"@site/versioned_docs/version-0.5/build/architecture/adr-053-go-module-refactoring.md",48308],d896b949:[()=>n.e(99589).then(n.bind(n,40122)),"@site/docs/build/spec/SPEC_MODULE.md",40122],d8cdbb0c:[()=>n.e(77668).then(n.bind(n,87956)),"@site/docs/build/modules/group/README.md",87956],d8d6ec70:[()=>n.e(56192).then(n.t.bind(n,83769,19)),"/home/runner/work/cosmos-sdk-docs/cosmos-sdk-docs/.docusaurus/docusaurus-plugin-content-docs/default/plugin-route-context-module-100.json",83769],d8f17f68:[()=>n.e(22118).then(n.bind(n,57187)),"@site/versioned_docs/version-0.47/build/architecture/adr-037-gov-split-vote.md",57187],d916e421:[()=>n.e(27247).then(n.bind(n,92317)),"@site/versioned_docs/version-0.47/build/building-modules/16-testing.md",92317],d91c87dc:[()=>n.e(19227).then(n.bind(n,88996)),"@site/versioned_docs/version-0.47/build/modules/feegrant/README.md",88996],d937757e:[()=>n.e(19449).then(n.bind(n,89933)),"@site/versioned_docs/version-0.47/build/architecture/adr-064-abci-2.0.md",89933],d9468608:[()=>n.e(8249).then(n.bind(n,54518)),"@site/docs/build/building-apps/00-app-go.md",54518],d9585412:[()=>n.e(1877).then(n.bind(n,57210)),"@site/versioned_docs/version-0.47/build/architecture/adr-050-sign-mode-textual-annex2.md",57210],d9a7b911:[()=>n.e(51134).then(n.bind(n,30891)),"@site/versioned_docs/version-0.53/build/packages/02-collections.md",30891],d9bc50e0:[()=>n.e(63628).then(n.bind(n,82839)),"@site/versioned_docs/version-0.47/build/building-modules/03-msg-services.md",82839],da502727:[()=>n.e(79318).then(n.bind(n,7876)),"@site/versioned_docs/version-0.5/build/architecture/adr-058-auto-generated-cli.md",7876],dad81df3:[()=>n.e(46996).then(n.bind(n,39667)),"@site/versioned_docs/version-0.47/build/building-apps/00-app-go.md",39667],dd0b046e:[()=>n.e(47739).then(n.bind(n,67856)),"@site/versioned_docs/version-0.47/build/architecture/adr-032-typed-events.md",67856],dd23495d:[()=>n.e(10506).then(n.bind(n,69048)),"@site/docs/build/building-apps/02-app-mempool.md",69048],dd316b1b:[()=>n.e(96672).then(n.bind(n,10894)),"@site/docs/build/architecture/adr-046-module-params.md",10894],dd31b54e:[()=>n.e(30406).then(n.bind(n,83466)),"@site/versioned_docs/version-0.47/build/modules/auth/2-tx.md",83466],dd37c6e0:[()=>n.e(61112).then(n.bind(n,80576)),"@site/versioned_docs/version-0.53/user/run-node/01-run-node.md",80576],de3433c7:[()=>n.e(45727).then(n.bind(n,50427)),"@site/versioned_docs/version-0.47/learn/advanced/05-interblock-cache.md",50427],decfa0b9:[()=>n.e(22956).then(n.bind(n,82287)),"@site/versioned_docs/version-0.47/build/architecture/adr-050-sign-mode-textual.md",82287],df34bff5:[()=>n.e(38750).then(n.bind(n,62221)),"@site/versioned_docs/version-0.5/build/architecture/adr-023-protobuf-naming.md",62221],df3a1073:[()=>n.e(38517).then(n.bind(n,26595)),"@site/versioned_docs/version-0.53/build/packages/01-depinject.md",26595],df42e1fd:[()=>n.e(78878).then(n.bind(n,83635)),"@site/versioned_docs/version-0.5/tutorials/vote-extensions/auction-frontrunning/02-mitigating-front-running-with-vote-extensions.md",83635],df5a3971:[()=>n.e(43410).then(n.bind(n,64157)),"@site/versioned_docs/version-0.5/build/modules/authz/README.md",64157],df6b7c98:[()=>n.e(53843).then(n.bind(n,12723)),"@site/versioned_docs/version-0.53/learn/advanced/16-config.md",12723],dfc09587:[()=>n.e(88438).then(n.bind(n,70212)),"@site/versioned_docs/version-0.5/build/building-modules/17-preblock.md",70212],dfda44ce:[()=>n.e(47223).then(n.bind(n,4692)),"@site/versioned_docs/version-0.5/learn/intro/03-sdk-design.md",4692],dfdd2f19:[()=>n.e(26639).then(n.bind(n,69281)),"@site/versioned_docs/version-0.47/build/packages/README.md",69281],e01deb3d:[()=>n.e(26298).then(n.bind(n,65774)),"@site/docs/build/modules/params/README.md",65774],e0269050:[()=>n.e(51846).then(n.bind(n,84298)),"@site/versioned_docs/version-0.53/build/architecture/adr-039-epoched-staking.md",84298],e03fab52:[()=>n.e(81106).then(n.bind(n,43733)),"@site/versioned_docs/version-0.5/build/spec/addresses/bech32.md",43733],e18925b4:[()=>n.e(28864).then(n.bind(n,43035)),"@site/docs/build/modules/README.md",43035],e1e70fb9:[()=>n.e(61255).then(n.bind(n,37980)),"@site/versioned_docs/version-0.47/build/modules/slashing/README.md",37980],e24f3a69:[()=>n.e(76767).then(n.bind(n,90843)),"@site/versioned_docs/version-0.47/build/architecture/adr-038-state-listening.md",90843],e25df99e:[()=>n.e(70059).then(n.bind(n,52604)),"@site/versioned_docs/version-0.47/build/building-apps/01-app-go-v2.md",52604],e27ab7e3:[()=>n.e(14340).then(n.bind(n,37369)),"@site/versioned_docs/version-0.5/learn/intro/01-why-app-specific.md",37369],e2907bf7:[()=>n.e(47023).then(n.bind(n,49948)),"@site/versioned_docs/version-0.53/tutorials/vote-extensions/oracle/03-testing-oracle.md",49948],e3539354:[()=>n.e(94159).then(n.bind(n,40203)),"@site/docs/build/spec/README.md",40203],e3e462c1:[()=>n.e(69519).then(n.bind(n,86081)),"@site/versioned_docs/version-0.47/learn/advanced/01-transactions.md",86081],e3feac52:[()=>n.e(59798).then(n.bind(n,99514)),"@site/versioned_docs/version-0.5/build/architecture/adr-049-state-sync-hooks.md",99514],e4140896:[()=>n.e(77449).then(n.bind(n,38600)),"@site/versioned_docs/version-0.47/learn/beginner/04-gas-fees.md",38600],e47d5fcf:[()=>n.e(41785).then(n.bind(n,52379)),"@site/docs/build/building-apps/01-app-go-di.md",52379],e52f1969:[()=>n.e(33657).then(n.bind(n,95213)),"@site/versioned_docs/version-0.47/build/architecture/adr-047-extend-upgrade-plan.md",95213],e571b798:[()=>n.e(76584).then(n.bind(n,68920)),"@site/versioned_docs/version-0.47/build/building-apps/02-app-mempool.md",68920],e5af342a:[()=>n.e(61143).then(n.bind(n,55458)),"@site/docs/user/run-node/06-run-production.md",55458],e5c16dfa:[()=>n.e(28840).then(n.bind(n,22228)),"@site/versioned_docs/version-0.47/build/building-modules/12-errors.md",22228],e5efc375:[()=>n.e(24430).then(n.bind(n,72633)),"@site/versioned_docs/version-0.5/build/spec/SPEC_MODULE.md",72633],e6301efa:[()=>n.e(79385).then(n.bind(n,95634)),"@site/versioned_docs/version-0.53/build/spec/addresses/bech32.md",95634],e6598356:[()=>n.e(98687).then(n.bind(n,43662)),"@site/versioned_docs/version-0.53/build/architecture/adr-020-protobuf-transaction-encoding.md",43662],e70d208a:[()=>n.e(73985).then(n.bind(n,90929)),"@site/versioned_docs/version-0.5/build/abci/02-process-proposal.md",90929],e79f4f5f:[()=>n.e(83557).then(n.bind(n,73461)),"@site/versioned_docs/version-0.5/build/modules/auth/1-vesting.md",73461],e8b275ac:[()=>n.e(21209).then(n.bind(n,7889)),"@site/versioned_docs/version-0.5/learn/advanced/04-store.md",7889],e922124c:[()=>n.e(51735).then(n.bind(n,80077)),"@site/docs/build/abci/02-process-proposal.md",80077],e9724a1f:[()=>n.e(93636).then(n.bind(n,97159)),"@site/docs/learn/beginner/00-app-anatomy.md",97159],e979dc78:[()=>n.e(58520).then(n.bind(n,70976)),"@site/versioned_docs/version-0.53/learn/advanced/11-runtx_middleware.md",70976],e98a5839:[()=>n.e(97104).then(n.bind(n,36369)),"@site/versioned_docs/version-0.53/build/architecture/adr-019-protobuf-state-encoding.md",36369],e9c7be3b:[()=>n.e(75741).then(n.bind(n,78187)),"@site/versioned_docs/version-0.47/build/building-modules/15-depinject.md",78187],ea119d61:[()=>n.e(95544).then(n.bind(n,95012)),"@site/docs/build/architecture/adr-022-custom-panic-handling.md",95012],ea4c7967:[()=>n.e(75080).then(n.bind(n,60878)),"@site/versioned_docs/version-0.47/build/building-modules/08-genesis.md",60878],ea9e9a6d:[()=>n.e(97591).then(n.bind(n,36691)),"@site/docs/learn/intro/00-overview.md",36691],eaab668c:[()=>n.e(69602).then(n.bind(n,15523)),"@site/versioned_docs/version-0.47/build/modules/nft/README.md",15523],eabd7cbd:[()=>n.e(40910).then(n.bind(n,52849)),"@site/docs/build/abci/03-vote-extensions.md",52849],eb941523:[()=>n.e(15845).then(n.bind(n,1171)),"@site/versioned_docs/version-0.47/build/building-modules/09-module-interfaces.md",1171],ebc9a776:[()=>n.e(72255).then(n.bind(n,27321)),"@site/versioned_docs/version-0.47/learn/advanced/09-grpc_rest.md",27321],ebd543f6:[()=>n.e(76187).then(n.bind(n,20994)),"@site/docs/build/architecture/adr-032-typed-events.md",20994],ebe8a46b:[()=>n.e(73113).then(n.bind(n,5568)),"@site/versioned_docs/version-0.47/build/modules/genutil/README.md",5568],ebec16fa:[()=>n.e(14364).then(n.bind(n,46873)),"@site/versioned_docs/version-0.5/build/architecture/adr-029-fee-grant-module.md",46873],ec219799:[()=>n.e(48814).then(n.bind(n,76125)),"@site/versioned_docs/version-0.47/build/architecture/PROCESS.md",76125],ec431ceb:[()=>n.e(96873).then(n.bind(n,16798)),"@site/docs/build/architecture/adr-011-generalize-genesis-accounts.md",16798],ec4352bf:[()=>n.e(6554).then(n.bind(n,91131)),"@site/versioned_docs/version-0.53/build/architecture/adr-031-msg-service.md",91131],ec8b0ad4:[()=>n.e(51084).then(n.bind(n,74351)),"@site/versioned_docs/version-0.5/build/architecture/adr-036-arbitrary-signature.md",74351],ec94f3a3:[()=>n.e(43515).then(n.bind(n,67227)),"@site/versioned_docs/version-0.5/learn/advanced/16-config.md",67227],ec9922ef:[()=>n.e(11868).then(n.bind(n,42401)),"@site/versioned_docs/version-0.5/build/architecture/adr-070-unordered-account.md",42401],ec9e455d:[()=>n.e(49469).then(n.bind(n,75716)),"@site/versioned_docs/version-0.5/learn/advanced/10-ocap.md",75716],ecae7efd:[()=>n.e(65196).then(n.bind(n,96623)),"@site/versioned_docs/version-0.47/build/spec/addresses/README.md",96623],ecddbb6d:[()=>n.e(40967).then(n.bind(n,36093)),"@site/versioned_docs/version-0.47/learn/advanced/16-upgrade.md",36093],ed171cb9:[()=>n.e(61387).then(n.bind(n,12918)),"@site/docs/learn/advanced/13-proto-docs.md",12918],ed211c05:[()=>n.e(24998).then(n.bind(n,66818)),"@site/docs/user/run-node/01-run-node.md",66818],ee072016:[()=>n.e(88093).then(n.bind(n,29419)),"@site/versioned_docs/version-0.5/learn/learn.md",29419],ee777177:[()=>n.e(53030).then(n.bind(n,1207)),"@site/versioned_docs/version-0.53/build/architecture/adr-054-semver-compatible-modules.md",1207],eed31865:[()=>n.e(94294).then(n.bind(n,64865)),"@site/docs/build/architecture/adr-024-coin-metadata.md",64865],ef85c939:[()=>n.e(18785).then(n.bind(n,7474)),"@site/docs/build/architecture/adr-043-nft-module.md",7474],ef89f375:[()=>n.e(88508).then(n.bind(n,96362)),"@site/versioned_docs/version-0.53/build/architecture/adr-048-consensus-fees.md",96362],efd2fd56:[()=>n.e(28679).then(n.bind(n,33222)),"@site/versioned_docs/version-0.5/build/modules/mint/README.md",33222],f0501383:[()=>n.e(18872).then(n.bind(n,83669)),"@site/versioned_docs/version-0.5/build/building-modules/06-keeper.md",83669],f0aa1b1e:[()=>n.e(44134).then(n.bind(n,6127)),"@site/docs/learn/advanced/05-encoding.md",6127],f0ad3fbb:[()=>Promise.all([n.e(40532),n.e(25679),n.e(68612)]).then(n.bind(n,25679)),"@theme/ApiDoc",25679],f187ac9d:[()=>n.e(39036).then(n.bind(n,26834)),"@site/docs/learn/learn.md",26834],f1920bc3:[()=>n.e(18022).then(n.bind(n,24063)),"@site/versioned_docs/version-0.53/build/architecture/adr-030-authz-module.md",24063],f19915ee:[()=>n.e(70082).then(n.bind(n,38278)),"@site/docs/build/architecture/adr-027-deterministic-protobuf-serialization.md",38278],f1a826f9:[()=>n.e(59583).then(n.bind(n,35717)),"@site/docs/build/rfc/rfc/PROCESS.md",35717],f1bf2944:[()=>n.e(17143).then(n.bind(n,51489)),"@site/versioned_docs/version-0.53/build/modules/group/README.md",51489],f30ce5d5:[()=>n.e(60829).then(n.bind(n,391)),"@site/docs/build/spec/addresses/bech32.md",391],f354bcfe:[()=>n.e(76292).then(n.bind(n,38370)),"@site/versioned_docs/version-0.5/build/modules/epochs/README.md",38370],f3f1fbd1:[()=>n.e(35461).then(n.bind(n,84635)),"@site/versioned_docs/version-0.53/build/modules/distribution/README.md",84635],f428dfe8:[()=>n.e(37476).then(n.bind(n,30356)),"@site/versioned_docs/version-0.53/build/architecture/adr-065-store-v2.md",30356],f4364863:[()=>n.e(27083).then(n.bind(n,83346)),"@site/versioned_docs/version-0.5/build/modules/crisis/README.md",83346],f4882903:[()=>n.e(60436).then(n.bind(n,9622)),"@site/docs/build/modules/auth/README.md",9622],f49a397a:[()=>n.e(23476).then(n.bind(n,81925)),"@site/versioned_docs/version-0.53/build/architecture/adr-049-state-sync-hooks.md",81925],f5104fe8:[()=>n.e(70493).then(n.bind(n,15538)),"@site/versioned_docs/version-0.53/learn/advanced/09-telemetry.md",15538],f54d912d:[()=>n.e(1886).then(n.bind(n,87327)),"@site/versioned_docs/version-0.53/learn/intro/01-why-app-specific.md",87327],f5d1b79c:[()=>n.e(23240).then(n.bind(n,78236)),"@site/versioned_docs/version-0.53/build/modules/upgrade/README.md",78236],f64dbcbf:[()=>n.e(60598).then(n.bind(n,12023)),"@site/docs/build/architecture/README.md",12023],f66a6809:[()=>n.e(35003).then(n.bind(n,85561)),"@site/versioned_docs/version-0.5/build/building-modules/05-protobuf-annotations.md",85561],f6dc56a3:[()=>n.e(11297).then(n.bind(n,14965)),"@site/versioned_docs/version-0.53/build/building-apps/05-app-testnet.md",14965],f6ed7f4d:[()=>n.e(43286).then(n.bind(n,20049)),"@site/versioned_docs/version-0.47/build/architecture/adr-028-public-key-addresses.md",20049],f87095a4:[()=>n.e(44421).then(n.bind(n,5706)),"@site/versioned_docs/version-0.47/validate/05-run-testnet.md",5706],f89432e3:[()=>n.e(67999).then(n.bind(n,79997)),"@site/versioned_docs/version-0.47/build/modules/README.md",79997],f93529ca:[()=>n.e(14970).then(n.bind(n,77452)),"@site/versioned_docs/version-0.5/build/architecture/adr-064-abci-2.0.md",77452],fa1fd756:[()=>n.e(4806).then(n.bind(n,25008)),"@site/versioned_docs/version-0.53/build/tooling/00-protobuf.md",25008],fa579922:[()=>n.e(51502).then(n.bind(n,20012)),"@site/versioned_docs/version-0.53/build/building-modules/03-msg-services.md",20012],fb152a42:[()=>n.e(79582).then(n.bind(n,91090)),"@site/versioned_docs/version-0.47/build/migrations/02-upgrading.md",91090],fb376c28:[()=>n.e(69369).then(n.bind(n,30921)),"@site/versioned_docs/version-0.5/build/architecture/adr-022-custom-panic-handling.md",30921],fbaf7d43:[()=>n.e(18814).then(n.bind(n,74442)),"@site/versioned_docs/version-0.5/build/architecture/adr-050-sign-mode-textual-annex1.md",74442],fbcbd593:[()=>n.e(63396).then(n.bind(n,91465)),"@site/versioned_docs/version-0.47/build/building-modules/02-messages-and-queries.md",91465],fc4ba4be:[()=>n.e(42892).then(n.bind(n,11819)),"@site/versioned_docs/version-0.53/build/modules/README.md",11819],fcb57529:[()=>n.e(70446).then(n.bind(n,62433)),"@site/versioned_docs/version-0.53/build/building-apps/00-app-go.md",62433],fcbb8374:[()=>n.e(12127).then(n.bind(n,74426)),"@site/versioned_docs/version-0.47/build/architecture/adr-030-authz-module.md",74426],fce0d843:[()=>n.e(38927).then(n.bind(n,95221)),"@site/versioned_docs/version-0.5/build/building-modules/07-invariants.md",95221],fd0eeb62:[()=>n.e(10014).then(n.bind(n,5779)),"@site/versioned_docs/version-0.47/user/run-node/04-rosetta.md",5779],fd43fdaf:[()=>n.e(9729).then(n.bind(n,7460)),"@site/versioned_docs/version-0.53/build/architecture/adr-037-gov-split-vote.md",7460],fd598739:[()=>n.e(29436).then(n.bind(n,85848)),"@site/versioned_docs/version-0.47/build/spec/SPEC_MODULE.md",85848],fe368fa9:[()=>n.e(67513).then(n.bind(n,12483)),"@site/versioned_docs/version-0.53/build/building-modules/05-protobuf-annotations.md",12483],fe44ecef:[()=>n.e(63177).then(n.bind(n,16294)),"@site/versioned_docs/version-0.53/learn/advanced/05-encoding.md",16294],fed70f19:[()=>n.e(75037).then(n.bind(n,52539)),"@site/versioned_docs/version-0.47/build/architecture/adr-065-store-v2.md",52539],ff5a20ce:[()=>n.e(16012).then(n.bind(n,89034)),"@site/versioned_docs/version-0.5/learn/beginner/01-tx-lifecycle.md",89034]};function p(e){let{error:t,retry:n,pastDelay:i}=e;return t?o.createElement("div",{style:{textAlign:"center",color:"#fff",backgroundColor:"#fa383e",borderColor:"#fa383e",borderStyle:"solid",borderRadius:"0.25rem",borderWidth:"1px",boxSizing:"border-box",display:"block",padding:"1rem",flex:"0 0 50%",marginLeft:"25%",marginRight:"25%",marginTop:"5rem",maxWidth:"50%",width:"100%"}},o.createElement("p",null,String(t)),o.createElement("div",null,o.createElement("button",{type:"button",onClick:n},"Retry"))):i?o.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center",height:"100vh"}},o.createElement("svg",{id:"loader",style:{width:128,height:110,position:"absolute",top:"calc(100vh - 64%)"},viewBox:"0 0 45 45",xmlns:"http://www.w3.org/2000/svg",stroke:"#61dafb"},o.createElement("g",{fill:"none",fillRule:"evenodd",transform:"translate(1 1)",strokeWidth:"2"},o.createElement("circle",{cx:"22",cy:"22",r:"6",strokeOpacity:"0"},o.createElement("animate",{attributeName:"r",begin:"1.5s",dur:"3s",values:"6;22",calcMode:"linear",repeatCount:"indefinite"}),o.createElement("animate",{attributeName:"stroke-opacity",begin:"1.5s",dur:"3s",values:"1;0",calcMode:"linear",repeatCount:"indefinite"}),o.createElement("animate",{attributeName:"stroke-width",begin:"1.5s",dur:"3s",values:"2;0",calcMode:"linear",repeatCount:"indefinite"})),o.createElement("circle",{cx:"22",cy:"22",r:"6",strokeOpacity:"0"},o.createElement("animate",{attributeName:"r",begin:"3s",dur:"3s",values:"6;22",calcMode:"linear",repeatCount:"indefinite"}),o.createElement("animate",{attributeName:"stroke-opacity",begin:"3s",dur:"3s",values:"1;0",calcMode:"linear",repeatCount:"indefinite"}),o.createElement("animate",{attributeName:"stroke-width",begin:"3s",dur:"3s",values:"2;0",calcMode:"linear",repeatCount:"indefinite"})),o.createElement("circle",{cx:"22",cy:"22",r:"8"},o.createElement("animate",{attributeName:"r",begin:"0s",dur:"1.5s",values:"6;1;2;3;4;5;6",calcMode:"linear",repeatCount:"indefinite"}))))):null}var l=n(99670),c=n(30226);function u(e,t){if("*"===e)return s()({loading:p,loader:()=>n.e(4972).then(n.bind(n,4972)),modules:["@theme/NotFound"],webpack:()=>[4972],render(e,t){const n=e.default;return o.createElement(c.z,{value:{plugin:{name:"native",id:"default"}}},o.createElement(n,t))}});const a=r[`${e}-${t}`],u={},m=[],h=[],f=(0,l.Z)(a);return Object.entries(f).forEach((e=>{let[t,n]=e;const o=d[n];o&&(u[t]=o[0],m.push(o[1]),h.push(o[2]))})),s().Map({loading:p,loader:u,modules:m,webpack:()=>h,render(t,n){const s=JSON.parse(JSON.stringify(a));Object.entries(t).forEach((t=>{let[n,o]=t;const i=o.default;if(!i)throw new Error(`The page component at ${e} doesn't have a default export. This makes it impossible to render anything. Consider default-exporting a React component.`);"object"!=typeof i&&"function"!=typeof i||Object.keys(o).filter((e=>"default"!==e)).forEach((e=>{i[e]=o[e]}));let a=s;const r=n.split(".");r.slice(0,-1).forEach((e=>{a=a[e]})),a[r[r.length-1]]=i}));const r=s.__comp;delete s.__comp;const d=s.__context;return delete s.__context,o.createElement(c.z,{value:d},o.createElement(r,(0,i.Z)({},s,n)))}})}const m=[{path:"/api",component:u("/api","41c"),exact:!0},{path:"/search",component:u("/search","24f"),exact:!0},{path:"/v0.47",component:u("/v0.47","dec"),exact:!0},{path:"/v0.50",component:u("/v0.50","29b"),exact:!0},{path:"/v0.53",component:u("/v0.53","667"),exact:!0},{path:"/main",component:u("/main","f21"),routes:[{path:"/main/build",component:u("/main/build","52a"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/abci/checktx",component:u("/main/build/abci/checktx","661"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/abci/introduction",component:u("/main/build/abci/introduction","3b2"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/abci/prepare-proposal",component:u("/main/build/abci/prepare-proposal","930"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/abci/process-proposal",component:u("/main/build/abci/process-proposal","bf1"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/abci/vote-extensions",component:u("/main/build/abci/vote-extensions","b8e"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture",component:u("/main/build/architecture","55d"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-002-docs-structure",component:u("/main/build/architecture/adr-002-docs-structure","42c"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-003-dynamic-capability-store",component:u("/main/build/architecture/adr-003-dynamic-capability-store","f6c"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-004-split-denomination-keys",component:u("/main/build/architecture/adr-004-split-denomination-keys","d4f"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-006-secret-store-replacement",component:u("/main/build/architecture/adr-006-secret-store-replacement","0aa"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-007-specialization-groups",component:u("/main/build/architecture/adr-007-specialization-groups","424"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-008-dCERT-group",component:u("/main/build/architecture/adr-008-dCERT-group","fef"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-009-evidence-module",component:u("/main/build/architecture/adr-009-evidence-module","3ff"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-010-modular-antehandler",component:u("/main/build/architecture/adr-010-modular-antehandler","b8b"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-011-generalize-genesis-accounts",component:u("/main/build/architecture/adr-011-generalize-genesis-accounts","9e2"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-012-state-accessors",component:u("/main/build/architecture/adr-012-state-accessors","2db"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-013-metrics",component:u("/main/build/architecture/adr-013-metrics","9d4"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-014-proportional-slashing",component:u("/main/build/architecture/adr-014-proportional-slashing","bd1"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-016-validator-consensus-key-rotation",component:u("/main/build/architecture/adr-016-validator-consensus-key-rotation","298"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-017-historical-header-module",component:u("/main/build/architecture/adr-017-historical-header-module","1b7"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-018-extendable-voting-period",component:u("/main/build/architecture/adr-018-extendable-voting-period","05d"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-019-protobuf-state-encoding",component:u("/main/build/architecture/adr-019-protobuf-state-encoding","9ec"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-020-protobuf-transaction-encoding",component:u("/main/build/architecture/adr-020-protobuf-transaction-encoding","e0b"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-021-protobuf-query-encoding",component:u("/main/build/architecture/adr-021-protobuf-query-encoding","b3e"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-022-custom-panic-handling",component:u("/main/build/architecture/adr-022-custom-panic-handling","765"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-023-protobuf-naming",component:u("/main/build/architecture/adr-023-protobuf-naming","9c6"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-024-coin-metadata",component:u("/main/build/architecture/adr-024-coin-metadata","d7b"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-027-deterministic-protobuf-serialization",component:u("/main/build/architecture/adr-027-deterministic-protobuf-serialization","18a"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-028-public-key-addresses",component:u("/main/build/architecture/adr-028-public-key-addresses","138"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-029-fee-grant-module",component:u("/main/build/architecture/adr-029-fee-grant-module","df7"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-030-authz-module",component:u("/main/build/architecture/adr-030-authz-module","874"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-031-msg-service",component:u("/main/build/architecture/adr-031-msg-service","2bc"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-032-typed-events",component:u("/main/build/architecture/adr-032-typed-events","283"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-033-protobuf-inter-module-comm",component:u("/main/build/architecture/adr-033-protobuf-inter-module-comm","fa7"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-034-account-rekeying",component:u("/main/build/architecture/adr-034-account-rekeying","5cf"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-035-rosetta-api-support",component:u("/main/build/architecture/adr-035-rosetta-api-support","29b"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-036-arbitrary-signature",component:u("/main/build/architecture/adr-036-arbitrary-signature","52b"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-037-gov-split-vote",component:u("/main/build/architecture/adr-037-gov-split-vote","a13"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-038-state-listening",component:u("/main/build/architecture/adr-038-state-listening","f6b"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-039-epoched-staking",component:u("/main/build/architecture/adr-039-epoched-staking","e94"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-040-storage-and-smt-state-commitments",component:u("/main/build/architecture/adr-040-storage-and-smt-state-commitments","803"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-041-in-place-store-migrations",component:u("/main/build/architecture/adr-041-in-place-store-migrations","15f"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-042-group-module",component:u("/main/build/architecture/adr-042-group-module","a62"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-043-nft-module",component:u("/main/build/architecture/adr-043-nft-module","3b5"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-044-protobuf-updates-guidelines",component:u("/main/build/architecture/adr-044-protobuf-updates-guidelines","ee2"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-045-check-delivertx-middlewares",component:u("/main/build/architecture/adr-045-check-delivertx-middlewares","f83"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-046-module-params",component:u("/main/build/architecture/adr-046-module-params","dc2"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-047-extend-upgrade-plan",component:u("/main/build/architecture/adr-047-extend-upgrade-plan","970"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-048-consensus-fees",component:u("/main/build/architecture/adr-048-consensus-fees","3e9"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-049-state-sync-hooks",component:u("/main/build/architecture/adr-049-state-sync-hooks","ce8"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-050-sign-mode-textual",component:u("/main/build/architecture/adr-050-sign-mode-textual","ac5"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-050-sign-mode-textual-annex1",component:u("/main/build/architecture/adr-050-sign-mode-textual-annex1","328"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-050-sign-mode-textual-annex2",component:u("/main/build/architecture/adr-050-sign-mode-textual-annex2","3b0"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-053-go-module-refactoring",component:u("/main/build/architecture/adr-053-go-module-refactoring","952"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-054-semver-compatible-modules",component:u("/main/build/architecture/adr-054-semver-compatible-modules","9f1"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-055-orm",component:u("/main/build/architecture/adr-055-orm","f8a"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-057-app-wiring",component:u("/main/build/architecture/adr-057-app-wiring","38b"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-058-auto-generated-cli",component:u("/main/build/architecture/adr-058-auto-generated-cli","bd6"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-059-test-scopes",component:u("/main/build/architecture/adr-059-test-scopes","c11"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-060-abci-1.0",component:u("/main/build/architecture/adr-060-abci-1.0","a16"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-061-liquid-staking",component:u("/main/build/architecture/adr-061-liquid-staking","50a"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-062-collections-state-layer",component:u("/main/build/architecture/adr-062-collections-state-layer","e87"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-063-core-module-api",component:u("/main/build/architecture/adr-063-core-module-api","73f"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-064-abci-2.0",component:u("/main/build/architecture/adr-064-abci-2.0","ea2"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-065-store-v2",component:u("/main/build/architecture/adr-065-store-v2","2d3"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-068-preblock",component:u("/main/build/architecture/adr-068-preblock","e83"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-070-unordered-account",component:u("/main/build/architecture/adr-070-unordered-account","cef"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-076-tx-malleability",component:u("/main/build/architecture/adr-076-tx-malleability","5f1"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/adr-template",component:u("/main/build/architecture/adr-template","2a6"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/architecture/PROCESS",component:u("/main/build/architecture/PROCESS","13a"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-apps/app-go",component:u("/main/build/building-apps/app-go","de9"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-apps/app-go-di",component:u("/main/build/building-apps/app-go-di","cb3"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-apps/app-mempool",component:u("/main/build/building-apps/app-mempool","ad1"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-apps/app-testnet",component:u("/main/build/building-apps/app-testnet","42c"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-apps/app-upgrade",component:u("/main/build/building-apps/app-upgrade","387"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-apps/runtime",component:u("/main/build/building-apps/runtime","3dc"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-apps/vote-extensions",component:u("/main/build/building-apps/vote-extensions","84a"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/beginblock-endblock",component:u("/main/build/building-modules/beginblock-endblock","6d3"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/depinject",component:u("/main/build/building-modules/depinject","a75"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/errors",component:u("/main/build/building-modules/errors","d69"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/genesis",component:u("/main/build/building-modules/genesis","ae1"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/intro",component:u("/main/build/building-modules/intro","5bf"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/invariants",component:u("/main/build/building-modules/invariants","1d0"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/keeper",component:u("/main/build/building-modules/keeper","a4d"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/messages-and-queries",component:u("/main/build/building-modules/messages-and-queries","45a"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/module-interfaces",component:u("/main/build/building-modules/module-interfaces","ecb"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/module-manager",component:u("/main/build/building-modules/module-manager","342"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/msg-services",component:u("/main/build/building-modules/msg-services","846"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/preblock",component:u("/main/build/building-modules/preblock","a79"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/protobuf-annotations",component:u("/main/build/building-modules/protobuf-annotations","a4e"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/query-services",component:u("/main/build/building-modules/query-services","62c"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/simulator",component:u("/main/build/building-modules/simulator","3f2"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/structure",component:u("/main/build/building-modules/structure","43f"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/testing",component:u("/main/build/building-modules/testing","07b"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/building-modules/upgrade",component:u("/main/build/building-modules/upgrade","44a"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/migrations/intro",component:u("/main/build/migrations/intro","0f0"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/migrations/upgrade-guide",component:u("/main/build/migrations/upgrade-guide","cc6"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/migrations/upgrade-reference",component:u("/main/build/migrations/upgrade-reference","533"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/migrations/upgrading",component:u("/main/build/migrations/upgrading","7c1"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules",component:u("/main/build/modules","05b"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/auth",component:u("/main/build/modules/auth","408"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/auth/tx",component:u("/main/build/modules/auth/tx","73e"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/auth/vesting",component:u("/main/build/modules/auth/vesting","582"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/authz",component:u("/main/build/modules/authz","566"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/bank",component:u("/main/build/modules/bank","da1"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/circuit",component:u("/main/build/modules/circuit","e16"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/consensus",component:u("/main/build/modules/consensus","693"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/crisis",component:u("/main/build/modules/crisis","2a5"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/distribution",component:u("/main/build/modules/distribution","9e8"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/epochs",component:u("/main/build/modules/epochs","290"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/evidence",component:u("/main/build/modules/evidence","fe3"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/feegrant",component:u("/main/build/modules/feegrant","821"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/genutil",component:u("/main/build/modules/genutil","07f"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/gov",component:u("/main/build/modules/gov","814"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/group",component:u("/main/build/modules/group","7a0"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/mint",component:u("/main/build/modules/mint","de9"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/nft",component:u("/main/build/modules/nft","250"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/params",component:u("/main/build/modules/params","bff"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/protocolpool",component:u("/main/build/modules/protocolpool","082"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/slashing",component:u("/main/build/modules/slashing","557"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/staking",component:u("/main/build/modules/staking","f59"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/modules/upgrade",component:u("/main/build/modules/upgrade","3ac"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/packages",component:u("/main/build/packages","902"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/packages/collections",component:u("/main/build/packages/collections","60f"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/packages/depinject",component:u("/main/build/packages/depinject","ec6"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/rfc",component:u("/main/build/rfc","230"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/rfc/PROCESS",component:u("/main/build/rfc/PROCESS","697"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/rfc/rfc",component:u("/main/build/rfc/rfc","1dc"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/rfc/rfc-001-tx-validation",component:u("/main/build/rfc/rfc-001-tx-validation","dd7"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/rfc/rfc-template",component:u("/main/build/rfc/rfc-template","abf"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/rfc/rfc/PROCESS",component:u("/main/build/rfc/rfc/PROCESS","39e"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/rfc/rfc/rfc-001-tx-validation",component:u("/main/build/rfc/rfc/rfc-001-tx-validation","7c1"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/rfc/rfc/rfc-template",component:u("/main/build/rfc/rfc/rfc-template","26f"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/spec",component:u("/main/build/spec","c19"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/spec/addresses",component:u("/main/build/spec/addresses","f93"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/spec/addresses/bech32",component:u("/main/build/spec/addresses/bech32","514"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/spec/SPEC_MODULE",component:u("/main/build/spec/SPEC_MODULE","5d9"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/spec/SPEC_STANDARD",component:u("/main/build/spec/SPEC_STANDARD","624"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/spec/store",component:u("/main/build/spec/store","637"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/spec/store/interblock-cache",component:u("/main/build/spec/store/interblock-cache","5ca"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/tooling",component:u("/main/build/tooling","17c"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/tooling/confix",component:u("/main/build/tooling/confix","d52"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/tooling/cosmovisor",component:u("/main/build/tooling/cosmovisor","adc"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/tooling/hubl",component:u("/main/build/tooling/hubl","6ef"),exact:!0,sidebar:"buildSidebar"},{path:"/main/build/tooling/protobuf",component:u("/main/build/tooling/protobuf","d55"),exact:!0,sidebar:"buildSidebar"},{path:"/main/learn",component:u("/main/learn","38b"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/advanced/autocli",component:u("/main/learn/advanced/autocli","fbb"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/advanced/baseapp",component:u("/main/learn/advanced/baseapp","ea9"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/advanced/cli",component:u("/main/learn/advanced/cli","55f"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/advanced/config",component:u("/main/learn/advanced/config","d27"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/advanced/context",component:u("/main/learn/advanced/context","e69"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/advanced/encoding",component:u("/main/learn/advanced/encoding","90f"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/advanced/events",component:u("/main/learn/advanced/events","fb6"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/advanced/grpc_rest",component:u("/main/learn/advanced/grpc_rest","9f7"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/advanced/node",component:u("/main/learn/advanced/node","8d8"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/advanced/ocap",component:u("/main/learn/advanced/ocap","6d8"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/advanced/proto-docs",component:u("/main/learn/advanced/proto-docs","add"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/advanced/runtx_middleware",component:u("/main/learn/advanced/runtx_middleware","3ec"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/advanced/simulation",component:u("/main/learn/advanced/simulation","afd"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/advanced/store",component:u("/main/learn/advanced/store","c05"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/advanced/telemetry",component:u("/main/learn/advanced/telemetry","9c5"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/advanced/transactions",component:u("/main/learn/advanced/transactions","22d"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/advanced/upgrade",component:u("/main/learn/advanced/upgrade","d0a"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/beginner/accounts",component:u("/main/learn/beginner/accounts","cc5"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/beginner/app-anatomy",component:u("/main/learn/beginner/app-anatomy","ea1"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/beginner/gas-fees",component:u("/main/learn/beginner/gas-fees","1f4"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/beginner/query-lifecycle",component:u("/main/learn/beginner/query-lifecycle","cb0"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/beginner/tx-lifecycle",component:u("/main/learn/beginner/tx-lifecycle","44c"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/intro/overview",component:u("/main/learn/intro/overview","edb"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/intro/sdk-app-architecture",component:u("/main/learn/intro/sdk-app-architecture","31d"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/intro/sdk-design",component:u("/main/learn/intro/sdk-design","6e5"),exact:!0,sidebar:"learnSidebar"},{path:"/main/learn/intro/why-app-specific",component:u("/main/learn/intro/why-app-specific","93a"),exact:!0,sidebar:"learnSidebar"},{path:"/main/tutorials",component:u("/main/tutorials","337"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/main/tutorials/transactions/building-a-transaction",component:u("/main/tutorials/transactions/building-a-transaction","58f"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/main/tutorials/vote-extensions/auction-frontrunning/demo-of-mitigating-front-running",component:u("/main/tutorials/vote-extensions/auction-frontrunning/demo-of-mitigating-front-running","18f"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/main/tutorials/vote-extensions/auction-frontrunning/getting-started",component:u("/main/tutorials/vote-extensions/auction-frontrunning/getting-started","28e"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/main/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extensions",component:u("/main/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extensions","82b"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/main/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extesions",component:u("/main/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extesions","86c"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/main/tutorials/vote-extensions/auction-frontrunning/understanding-frontrunning",component:u("/main/tutorials/vote-extensions/auction-frontrunning/understanding-frontrunning","e33"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/main/tutorials/vote-extensions/oracle/getting-started",component:u("/main/tutorials/vote-extensions/oracle/getting-started","efe"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/main/tutorials/vote-extensions/oracle/implementing-vote-extensions",component:u("/main/tutorials/vote-extensions/oracle/implementing-vote-extensions","405"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/main/tutorials/vote-extensions/oracle/testing-oracle",component:u("/main/tutorials/vote-extensions/oracle/testing-oracle","c9f"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/main/tutorials/vote-extensions/oracle/what-is-an-oracle",component:u("/main/tutorials/vote-extensions/oracle/what-is-an-oracle","c07"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/main/user",component:u("/main/user","55b"),exact:!0,sidebar:"userSidebar"},{path:"/main/user/run-node/interact-node",component:u("/main/user/run-node/interact-node","367"),exact:!0,sidebar:"userSidebar"},{path:"/main/user/run-node/keyring",component:u("/main/user/run-node/keyring","70e"),exact:!0,sidebar:"userSidebar"},{path:"/main/user/run-node/rosetta",component:u("/main/user/run-node/rosetta","d92"),exact:!0,sidebar:"userSidebar"},{path:"/main/user/run-node/run-node",component:u("/main/user/run-node/run-node","ce0"),exact:!0,sidebar:"userSidebar"},{path:"/main/user/run-node/run-production",component:u("/main/user/run-node/run-production","6d2"),exact:!0,sidebar:"userSidebar"},{path:"/main/user/run-node/run-testnet",component:u("/main/user/run-node/run-testnet","4dc"),exact:!0,sidebar:"userSidebar"},{path:"/main/user/run-node/txs",component:u("/main/user/run-node/txs","6a7"),exact:!0,sidebar:"userSidebar"}]},{path:"/v0.47",component:u("/v0.47","347"),routes:[{path:"/v0.47/build",component:u("/v0.47/build","8ee"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture",component:u("/v0.47/build/architecture","d07"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-002-docs-structure",component:u("/v0.47/build/architecture/adr-002-docs-structure","26c"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-003-dynamic-capability-store",component:u("/v0.47/build/architecture/adr-003-dynamic-capability-store","712"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-004-split-denomination-keys",component:u("/v0.47/build/architecture/adr-004-split-denomination-keys","7b0"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-006-secret-store-replacement",component:u("/v0.47/build/architecture/adr-006-secret-store-replacement","acc"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-007-specialization-groups",component:u("/v0.47/build/architecture/adr-007-specialization-groups","c9a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-008-dCERT-group",component:u("/v0.47/build/architecture/adr-008-dCERT-group","27f"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-009-evidence-module",component:u("/v0.47/build/architecture/adr-009-evidence-module","569"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-010-modular-antehandler",component:u("/v0.47/build/architecture/adr-010-modular-antehandler","0dc"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-011-generalize-genesis-accounts",component:u("/v0.47/build/architecture/adr-011-generalize-genesis-accounts","5d5"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-012-state-accessors",component:u("/v0.47/build/architecture/adr-012-state-accessors","fb1"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-013-metrics",component:u("/v0.47/build/architecture/adr-013-metrics","7ff"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-014-proportional-slashing",component:u("/v0.47/build/architecture/adr-014-proportional-slashing","619"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-016-validator-consensus-key-rotation",component:u("/v0.47/build/architecture/adr-016-validator-consensus-key-rotation","13c"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-017-historical-header-module",component:u("/v0.47/build/architecture/adr-017-historical-header-module","0a0"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-018-extendable-voting-period",component:u("/v0.47/build/architecture/adr-018-extendable-voting-period","231"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-019-protobuf-state-encoding",component:u("/v0.47/build/architecture/adr-019-protobuf-state-encoding","606"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-020-protobuf-transaction-encoding",component:u("/v0.47/build/architecture/adr-020-protobuf-transaction-encoding","39f"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-021-protobuf-query-encoding",component:u("/v0.47/build/architecture/adr-021-protobuf-query-encoding","880"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-022-custom-panic-handling",component:u("/v0.47/build/architecture/adr-022-custom-panic-handling","127"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-023-protobuf-naming",component:u("/v0.47/build/architecture/adr-023-protobuf-naming","512"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-024-coin-metadata",component:u("/v0.47/build/architecture/adr-024-coin-metadata","af8"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-027-deterministic-protobuf-serialization",component:u("/v0.47/build/architecture/adr-027-deterministic-protobuf-serialization","9d7"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-028-public-key-addresses",component:u("/v0.47/build/architecture/adr-028-public-key-addresses","e26"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-029-fee-grant-module",component:u("/v0.47/build/architecture/adr-029-fee-grant-module","24f"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-030-authz-module",component:u("/v0.47/build/architecture/adr-030-authz-module","c33"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-031-msg-service",component:u("/v0.47/build/architecture/adr-031-msg-service","189"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-032-typed-events",component:u("/v0.47/build/architecture/adr-032-typed-events","94e"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-033-protobuf-inter-module-comm",component:u("/v0.47/build/architecture/adr-033-protobuf-inter-module-comm","544"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-034-account-rekeying",component:u("/v0.47/build/architecture/adr-034-account-rekeying","ea4"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-035-rosetta-api-support",component:u("/v0.47/build/architecture/adr-035-rosetta-api-support","2b8"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-036-arbitrary-signature",component:u("/v0.47/build/architecture/adr-036-arbitrary-signature","7ce"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-037-gov-split-vote",component:u("/v0.47/build/architecture/adr-037-gov-split-vote","da7"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-038-state-listening",component:u("/v0.47/build/architecture/adr-038-state-listening","6b7"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-039-epoched-staking",component:u("/v0.47/build/architecture/adr-039-epoched-staking","620"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-040-storage-and-smt-state-commitments",component:u("/v0.47/build/architecture/adr-040-storage-and-smt-state-commitments","96c"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-041-in-place-store-migrations",component:u("/v0.47/build/architecture/adr-041-in-place-store-migrations","67f"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-042-group-module",component:u("/v0.47/build/architecture/adr-042-group-module","f81"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-043-nft-module",component:u("/v0.47/build/architecture/adr-043-nft-module","c82"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-044-protobuf-updates-guidelines",component:u("/v0.47/build/architecture/adr-044-protobuf-updates-guidelines","647"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-045-check-delivertx-middlewares",component:u("/v0.47/build/architecture/adr-045-check-delivertx-middlewares","d2a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-046-module-params",component:u("/v0.47/build/architecture/adr-046-module-params","1f7"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-047-extend-upgrade-plan",component:u("/v0.47/build/architecture/adr-047-extend-upgrade-plan","bde"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-048-consensus-fees",component:u("/v0.47/build/architecture/adr-048-consensus-fees","ef2"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-049-state-sync-hooks",component:u("/v0.47/build/architecture/adr-049-state-sync-hooks","d88"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-050-sign-mode-textual",component:u("/v0.47/build/architecture/adr-050-sign-mode-textual","1b1"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-050-sign-mode-textual-annex1",component:u("/v0.47/build/architecture/adr-050-sign-mode-textual-annex1","d2b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-050-sign-mode-textual-annex2",component:u("/v0.47/build/architecture/adr-050-sign-mode-textual-annex2","03d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-053-go-module-refactoring",component:u("/v0.47/build/architecture/adr-053-go-module-refactoring","eb1"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-054-semver-compatible-modules",component:u("/v0.47/build/architecture/adr-054-semver-compatible-modules","3d0"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-055-orm",component:u("/v0.47/build/architecture/adr-055-orm","3e2"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-057-app-wiring",component:u("/v0.47/build/architecture/adr-057-app-wiring","2f7"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-058-auto-generated-cli",component:u("/v0.47/build/architecture/adr-058-auto-generated-cli","edf"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-059-test-scopes",component:u("/v0.47/build/architecture/adr-059-test-scopes","62d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-060-abci-1.0",component:u("/v0.47/build/architecture/adr-060-abci-1.0","8c2"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-061-liquid-staking",component:u("/v0.47/build/architecture/adr-061-liquid-staking","9c6"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-062-collections-state-layer",component:u("/v0.47/build/architecture/adr-062-collections-state-layer","0f1"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-063-core-module-api",component:u("/v0.47/build/architecture/adr-063-core-module-api","834"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-064-abci-2.0",component:u("/v0.47/build/architecture/adr-064-abci-2.0","cc1"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-065-store-v2",component:u("/v0.47/build/architecture/adr-065-store-v2","019"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/adr-template",component:u("/v0.47/build/architecture/adr-template","527"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/architecture/PROCESS",component:u("/v0.47/build/architecture/PROCESS","22f"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-apps/app-go",component:u("/v0.47/build/building-apps/app-go","7ee"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-apps/app-go-v2",component:u("/v0.47/build/building-apps/app-go-v2","92c"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-apps/app-mempool",component:u("/v0.47/build/building-apps/app-mempool","37d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-apps/app-upgrade",component:u("/v0.47/build/building-apps/app-upgrade","c2b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-modules/beginblock-endblock",component:u("/v0.47/build/building-modules/beginblock-endblock","b68"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-modules/depinject",component:u("/v0.47/build/building-modules/depinject","d33"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-modules/errors",component:u("/v0.47/build/building-modules/errors","043"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-modules/genesis",component:u("/v0.47/build/building-modules/genesis","660"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-modules/intro",component:u("/v0.47/build/building-modules/intro","b98"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-modules/invariants",component:u("/v0.47/build/building-modules/invariants","056"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-modules/keeper",component:u("/v0.47/build/building-modules/keeper","ac8"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-modules/messages-and-queries",component:u("/v0.47/build/building-modules/messages-and-queries","f17"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-modules/module-interfaces",component:u("/v0.47/build/building-modules/module-interfaces","bb8"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-modules/module-manager",component:u("/v0.47/build/building-modules/module-manager","39d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-modules/msg-services",component:u("/v0.47/build/building-modules/msg-services","f6c"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-modules/query-services",component:u("/v0.47/build/building-modules/query-services","0a3"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-modules/simulator",component:u("/v0.47/build/building-modules/simulator","f7c"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-modules/structure",component:u("/v0.47/build/building-modules/structure","2c8"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-modules/testing",component:u("/v0.47/build/building-modules/testing","5b5"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/building-modules/upgrade",component:u("/v0.47/build/building-modules/upgrade","683"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/migrations/intro",component:u("/v0.47/build/migrations/intro","248"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/migrations/upgrading",component:u("/v0.47/build/migrations/upgrading","096"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules",component:u("/v0.47/build/modules","69a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/accounts",component:u("/v0.47/build/modules/accounts","75d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/auth",component:u("/v0.47/build/modules/auth","f9d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/auth/tx",component:u("/v0.47/build/modules/auth/tx","e4a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/auth/vesting",component:u("/v0.47/build/modules/auth/vesting","62f"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/authz",component:u("/v0.47/build/modules/authz","413"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/bank",component:u("/v0.47/build/modules/bank","6e2"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/circuit",component:u("/v0.47/build/modules/circuit","a84"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/consensus",component:u("/v0.47/build/modules/consensus","6b7"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/crisis",component:u("/v0.47/build/modules/crisis","80d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/distribution",component:u("/v0.47/build/modules/distribution","310"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/evidence",component:u("/v0.47/build/modules/evidence","e00"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/feegrant",component:u("/v0.47/build/modules/feegrant","ff3"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/genutil",component:u("/v0.47/build/modules/genutil","2b0"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/gov",component:u("/v0.47/build/modules/gov","097"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/group",component:u("/v0.47/build/modules/group","bd3"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/mint",component:u("/v0.47/build/modules/mint","837"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/nft",component:u("/v0.47/build/modules/nft","6e8"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/params",component:u("/v0.47/build/modules/params","05e"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/slashing",component:u("/v0.47/build/modules/slashing","cbf"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/staking",component:u("/v0.47/build/modules/staking","28e"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/modules/upgrade",component:u("/v0.47/build/modules/upgrade","0b7"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/packages",component:u("/v0.47/build/packages","2a7"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/packages/collections",component:u("/v0.47/build/packages/collections","4ca"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/packages/depinject",component:u("/v0.47/build/packages/depinject","120"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/packages/orm",component:u("/v0.47/build/packages/orm","b88"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/rfc",component:u("/v0.47/build/rfc","d80"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/rfc/PROCESS",component:u("/v0.47/build/rfc/PROCESS","019"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/rfc/rfc-001-tx-validation",component:u("/v0.47/build/rfc/rfc-001-tx-validation","16e"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/rfc/rfc-template",component:u("/v0.47/build/rfc/rfc-template","d09"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/spec/addresses",component:u("/v0.47/build/spec/addresses","842"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/spec/addresses/bech32",component:u("/v0.47/build/spec/addresses/bech32","cf6"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/spec/ics",component:u("/v0.47/build/spec/ics","cba"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/spec/ics/ics-030-signed-messages",component:u("/v0.47/build/spec/ics/ics-030-signed-messages","de7"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/spec/SPEC_MODULE",component:u("/v0.47/build/spec/SPEC_MODULE","7d2"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/spec/SPEC_STANDARD",component:u("/v0.47/build/spec/SPEC_STANDARD","15d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/tooling",component:u("/v0.47/build/tooling","fc4"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/tooling/autocli",component:u("/v0.47/build/tooling/autocli","a55"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/tooling/confix",component:u("/v0.47/build/tooling/confix","1d0"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/tooling/cosmovisor",component:u("/v0.47/build/tooling/cosmovisor","01f"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/tooling/depinject",component:u("/v0.47/build/tooling/depinject","d19"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/tooling/hubl",component:u("/v0.47/build/tooling/hubl","dc7"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/build/tooling/protobuf",component:u("/v0.47/build/tooling/protobuf","ca8"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.47/learn",component:u("/v0.47/learn","b06"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/advanced/baseapp",component:u("/v0.47/learn/advanced/baseapp","1c2"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/advanced/cli",component:u("/v0.47/learn/advanced/cli","475"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/advanced/config",component:u("/v0.47/learn/advanced/config","931"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/advanced/context",component:u("/v0.47/learn/advanced/context","c23"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/advanced/encoding",component:u("/v0.47/learn/advanced/encoding","f06"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/advanced/events",component:u("/v0.47/learn/advanced/events","532"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/advanced/grpc_rest",component:u("/v0.47/learn/advanced/grpc_rest","3eb"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/advanced/interblock-cache",component:u("/v0.47/learn/advanced/interblock-cache","b15"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/advanced/node",component:u("/v0.47/learn/advanced/node","c47"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/advanced/ocap",component:u("/v0.47/learn/advanced/ocap","be7"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/advanced/proto-docs",component:u("/v0.47/learn/advanced/proto-docs","3b4"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/advanced/runtx_middleware",component:u("/v0.47/learn/advanced/runtx_middleware","c69"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/advanced/simulation",component:u("/v0.47/learn/advanced/simulation","dbd"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/advanced/store",component:u("/v0.47/learn/advanced/store","b42"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/advanced/telemetry",component:u("/v0.47/learn/advanced/telemetry","708"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/advanced/transactions",component:u("/v0.47/learn/advanced/transactions","dfd"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/advanced/upgrade",component:u("/v0.47/learn/advanced/upgrade","32f"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/beginner/accounts",component:u("/v0.47/learn/beginner/accounts","04f"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/beginner/gas-fees",component:u("/v0.47/learn/beginner/gas-fees","498"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/beginner/overview-app",component:u("/v0.47/learn/beginner/overview-app","1b3"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/beginner/query-lifecycle",component:u("/v0.47/learn/beginner/query-lifecycle","91f"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/beginner/tx-lifecycle",component:u("/v0.47/learn/beginner/tx-lifecycle","59f"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/glossary",component:u("/v0.47/learn/glossary","6b6"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/intro/overview",component:u("/v0.47/learn/intro/overview","d1a"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/intro/sdk-app-architecture",component:u("/v0.47/learn/intro/sdk-app-architecture","c25"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/intro/sdk-design",component:u("/v0.47/learn/intro/sdk-design","600"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/learn/intro/why-app-specific",component:u("/v0.47/learn/intro/why-app-specific","169"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.47/user",component:u("/v0.47/user","3dd"),exact:!0,sidebar:"userSidebar"},{path:"/v0.47/user/run-node/interact-node",component:u("/v0.47/user/run-node/interact-node","c4f"),exact:!0,sidebar:"userSidebar"},{path:"/v0.47/user/run-node/keyring",component:u("/v0.47/user/run-node/keyring","715"),exact:!0,sidebar:"userSidebar"},{path:"/v0.47/user/run-node/multisig-guide",component:u("/v0.47/user/run-node/multisig-guide","a91"),exact:!0,sidebar:"userSidebar"},{path:"/v0.47/user/run-node/rosetta",component:u("/v0.47/user/run-node/rosetta","5e7"),exact:!0,sidebar:"userSidebar"},{path:"/v0.47/user/run-node/run-node",component:u("/v0.47/user/run-node/run-node","8a4"),exact:!0,sidebar:"userSidebar"},{path:"/v0.47/user/run-node/run-production",component:u("/v0.47/user/run-node/run-production","2d0"),exact:!0,sidebar:"userSidebar"},{path:"/v0.47/user/run-node/run-testnet",component:u("/v0.47/user/run-node/run-testnet","5f3"),exact:!0,sidebar:"userSidebar"},{path:"/v0.47/user/run-node/txs",component:u("/v0.47/user/run-node/txs","fae"),exact:!0,sidebar:"userSidebar"},{path:"/v0.47/validate/run-testnet",component:u("/v0.47/validate/run-testnet","814"),exact:!0}]},{path:"/v0.50",component:u("/v0.50","4b7"),routes:[{path:"/v0.50/build",component:u("/v0.50/build","edf"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/abci/introduction",component:u("/v0.50/build/abci/introduction","618"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/abci/prepare-proposal",component:u("/v0.50/build/abci/prepare-proposal","714"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/abci/process-proposal",component:u("/v0.50/build/abci/process-proposal","e67"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/abci/vote-extensions",component:u("/v0.50/build/abci/vote-extensions","5ae"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture",component:u("/v0.50/build/architecture","e8b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-002-docs-structure",component:u("/v0.50/build/architecture/adr-002-docs-structure","2a0"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-003-dynamic-capability-store",component:u("/v0.50/build/architecture/adr-003-dynamic-capability-store","8cd"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-004-split-denomination-keys",component:u("/v0.50/build/architecture/adr-004-split-denomination-keys","f38"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-006-secret-store-replacement",component:u("/v0.50/build/architecture/adr-006-secret-store-replacement","430"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-007-specialization-groups",component:u("/v0.50/build/architecture/adr-007-specialization-groups","f3a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-008-dCERT-group",component:u("/v0.50/build/architecture/adr-008-dCERT-group","1ce"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-009-evidence-module",component:u("/v0.50/build/architecture/adr-009-evidence-module","0f3"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-010-modular-antehandler",component:u("/v0.50/build/architecture/adr-010-modular-antehandler","354"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-011-generalize-genesis-accounts",component:u("/v0.50/build/architecture/adr-011-generalize-genesis-accounts","6e1"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-012-state-accessors",component:u("/v0.50/build/architecture/adr-012-state-accessors","cc8"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-013-metrics",component:u("/v0.50/build/architecture/adr-013-metrics","d15"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-014-proportional-slashing",component:u("/v0.50/build/architecture/adr-014-proportional-slashing","e56"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-016-validator-consensus-key-rotation",component:u("/v0.50/build/architecture/adr-016-validator-consensus-key-rotation","281"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-017-historical-header-module",component:u("/v0.50/build/architecture/adr-017-historical-header-module","220"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-018-extendable-voting-period",component:u("/v0.50/build/architecture/adr-018-extendable-voting-period","764"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-019-protobuf-state-encoding",component:u("/v0.50/build/architecture/adr-019-protobuf-state-encoding","039"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-020-protobuf-transaction-encoding",component:u("/v0.50/build/architecture/adr-020-protobuf-transaction-encoding","f00"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-021-protobuf-query-encoding",component:u("/v0.50/build/architecture/adr-021-protobuf-query-encoding","e3e"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-022-custom-panic-handling",component:u("/v0.50/build/architecture/adr-022-custom-panic-handling","b6b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-023-protobuf-naming",component:u("/v0.50/build/architecture/adr-023-protobuf-naming","8c2"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-024-coin-metadata",component:u("/v0.50/build/architecture/adr-024-coin-metadata","877"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-027-deterministic-protobuf-serialization",component:u("/v0.50/build/architecture/adr-027-deterministic-protobuf-serialization","a0a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-028-public-key-addresses",component:u("/v0.50/build/architecture/adr-028-public-key-addresses","ea7"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-029-fee-grant-module",component:u("/v0.50/build/architecture/adr-029-fee-grant-module","1be"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-030-authz-module",component:u("/v0.50/build/architecture/adr-030-authz-module","e2d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-031-msg-service",component:u("/v0.50/build/architecture/adr-031-msg-service","c84"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-032-typed-events",component:u("/v0.50/build/architecture/adr-032-typed-events","3e0"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-033-protobuf-inter-module-comm",component:u("/v0.50/build/architecture/adr-033-protobuf-inter-module-comm","fe6"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-034-account-rekeying",component:u("/v0.50/build/architecture/adr-034-account-rekeying","818"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-035-rosetta-api-support",component:u("/v0.50/build/architecture/adr-035-rosetta-api-support","4ab"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-036-arbitrary-signature",component:u("/v0.50/build/architecture/adr-036-arbitrary-signature","584"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-037-gov-split-vote",component:u("/v0.50/build/architecture/adr-037-gov-split-vote","ed9"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-038-state-listening",component:u("/v0.50/build/architecture/adr-038-state-listening","536"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-039-epoched-staking",component:u("/v0.50/build/architecture/adr-039-epoched-staking","864"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-040-storage-and-smt-state-commitments",component:u("/v0.50/build/architecture/adr-040-storage-and-smt-state-commitments","c72"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-041-in-place-store-migrations",component:u("/v0.50/build/architecture/adr-041-in-place-store-migrations","4a6"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-042-group-module",component:u("/v0.50/build/architecture/adr-042-group-module","6df"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-043-nft-module",component:u("/v0.50/build/architecture/adr-043-nft-module","d04"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-044-protobuf-updates-guidelines",component:u("/v0.50/build/architecture/adr-044-protobuf-updates-guidelines","1c5"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-045-check-delivertx-middlewares",component:u("/v0.50/build/architecture/adr-045-check-delivertx-middlewares","f5d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-046-module-params",component:u("/v0.50/build/architecture/adr-046-module-params","d89"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-047-extend-upgrade-plan",component:u("/v0.50/build/architecture/adr-047-extend-upgrade-plan","e2c"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-048-consensus-fees",component:u("/v0.50/build/architecture/adr-048-consensus-fees","119"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-049-state-sync-hooks",component:u("/v0.50/build/architecture/adr-049-state-sync-hooks","c53"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-050-sign-mode-textual",component:u("/v0.50/build/architecture/adr-050-sign-mode-textual","439"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-050-sign-mode-textual-annex1",component:u("/v0.50/build/architecture/adr-050-sign-mode-textual-annex1","fc0"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-050-sign-mode-textual-annex2",component:u("/v0.50/build/architecture/adr-050-sign-mode-textual-annex2","848"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-053-go-module-refactoring",component:u("/v0.50/build/architecture/adr-053-go-module-refactoring","210"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-054-semver-compatible-modules",component:u("/v0.50/build/architecture/adr-054-semver-compatible-modules","632"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-055-orm",component:u("/v0.50/build/architecture/adr-055-orm","a65"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-057-app-wiring",component:u("/v0.50/build/architecture/adr-057-app-wiring","331"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-058-auto-generated-cli",component:u("/v0.50/build/architecture/adr-058-auto-generated-cli","32b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-059-test-scopes",component:u("/v0.50/build/architecture/adr-059-test-scopes","b1c"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-060-abci-1.0",component:u("/v0.50/build/architecture/adr-060-abci-1.0","7a8"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-061-liquid-staking",component:u("/v0.50/build/architecture/adr-061-liquid-staking","458"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-062-collections-state-layer",component:u("/v0.50/build/architecture/adr-062-collections-state-layer","002"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-063-core-module-api",component:u("/v0.50/build/architecture/adr-063-core-module-api","055"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-064-abci-2.0",component:u("/v0.50/build/architecture/adr-064-abci-2.0","dd1"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-065-store-v2",component:u("/v0.50/build/architecture/adr-065-store-v2","914"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-068-preblock",component:u("/v0.50/build/architecture/adr-068-preblock","ad1"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-070-unordered-account",component:u("/v0.50/build/architecture/adr-070-unordered-account","cd2"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-076-tx-malleability",component:u("/v0.50/build/architecture/adr-076-tx-malleability","cfe"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/adr-template",component:u("/v0.50/build/architecture/adr-template","db3"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/architecture/PROCESS",component:u("/v0.50/build/architecture/PROCESS","51e"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-apps/app-go",component:u("/v0.50/build/building-apps/app-go","ed2"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-apps/app-go-v2",component:u("/v0.50/build/building-apps/app-go-v2","97b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-apps/app-mempool",component:u("/v0.50/build/building-apps/app-mempool","82e"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-apps/app-testnet",component:u("/v0.50/build/building-apps/app-testnet","f30"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-apps/app-upgrade",component:u("/v0.50/build/building-apps/app-upgrade","f89"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-apps/vote-extensions",component:u("/v0.50/build/building-apps/vote-extensions","d01"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/beginblock-endblock",component:u("/v0.50/build/building-modules/beginblock-endblock","f2a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/depinject",component:u("/v0.50/build/building-modules/depinject","abf"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/errors",component:u("/v0.50/build/building-modules/errors","0a4"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/genesis",component:u("/v0.50/build/building-modules/genesis","cc8"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/intro",component:u("/v0.50/build/building-modules/intro","e1f"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/invariants",component:u("/v0.50/build/building-modules/invariants","aa2"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/keeper",component:u("/v0.50/build/building-modules/keeper","0c1"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/messages-and-queries",component:u("/v0.50/build/building-modules/messages-and-queries","3b3"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/module-interfaces",component:u("/v0.50/build/building-modules/module-interfaces","1d5"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/module-manager",component:u("/v0.50/build/building-modules/module-manager","c7f"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/msg-services",component:u("/v0.50/build/building-modules/msg-services","982"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/preblock",component:u("/v0.50/build/building-modules/preblock","d0b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/protobuf-annotations",component:u("/v0.50/build/building-modules/protobuf-annotations","d48"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/query-services",component:u("/v0.50/build/building-modules/query-services","ee1"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/simulator",component:u("/v0.50/build/building-modules/simulator","21b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/structure",component:u("/v0.50/build/building-modules/structure","474"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/testing",component:u("/v0.50/build/building-modules/testing","b3a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/building-modules/upgrade",component:u("/v0.50/build/building-modules/upgrade","afe"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/migrations/intro",component:u("/v0.50/build/migrations/intro","688"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/migrations/upgrade-guide",component:u("/v0.50/build/migrations/upgrade-guide","0c4"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/migrations/upgrade-reference",component:u("/v0.50/build/migrations/upgrade-reference","a69"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/migrations/upgrading",component:u("/v0.50/build/migrations/upgrading","81b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules",component:u("/v0.50/build/modules","51d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/auth",component:u("/v0.50/build/modules/auth","375"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/auth/tx",component:u("/v0.50/build/modules/auth/tx","899"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/auth/vesting",component:u("/v0.50/build/modules/auth/vesting","d5e"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/authz",component:u("/v0.50/build/modules/authz","266"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/bank",component:u("/v0.50/build/modules/bank","437"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/circuit",component:u("/v0.50/build/modules/circuit","bd0"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/consensus",component:u("/v0.50/build/modules/consensus","ee0"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/crisis",component:u("/v0.50/build/modules/crisis","6ba"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/distribution",component:u("/v0.50/build/modules/distribution","f95"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/epochs",component:u("/v0.50/build/modules/epochs","d05"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/evidence",component:u("/v0.50/build/modules/evidence","fae"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/feegrant",component:u("/v0.50/build/modules/feegrant","8c6"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/genutil",component:u("/v0.50/build/modules/genutil","2c3"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/gov",component:u("/v0.50/build/modules/gov","142"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/group",component:u("/v0.50/build/modules/group","94e"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/mint",component:u("/v0.50/build/modules/mint","5b3"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/nft",component:u("/v0.50/build/modules/nft","740"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/params",component:u("/v0.50/build/modules/params","ef7"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/protocolpool",component:u("/v0.50/build/modules/protocolpool","23e"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/slashing",component:u("/v0.50/build/modules/slashing","5c3"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/staking",component:u("/v0.50/build/modules/staking","625"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/modules/upgrade",component:u("/v0.50/build/modules/upgrade","f8e"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/packages",component:u("/v0.50/build/packages","db7"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/packages/collections",component:u("/v0.50/build/packages/collections","712"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/packages/depinject",component:u("/v0.50/build/packages/depinject","428"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/rfc",component:u("/v0.50/build/rfc","a22"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/rfc/PROCESS",component:u("/v0.50/build/rfc/PROCESS","f60"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/rfc/rfc",component:u("/v0.50/build/rfc/rfc","927"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/rfc/rfc-001-tx-validation",component:u("/v0.50/build/rfc/rfc-001-tx-validation","ed9"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/rfc/rfc-template",component:u("/v0.50/build/rfc/rfc-template","5dd"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/rfc/rfc/PROCESS",component:u("/v0.50/build/rfc/rfc/PROCESS","000"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/rfc/rfc/rfc-001-tx-validation",component:u("/v0.50/build/rfc/rfc/rfc-001-tx-validation","d04"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/rfc/rfc/rfc-template",component:u("/v0.50/build/rfc/rfc/rfc-template","fa2"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/spec",component:u("/v0.50/build/spec","f8f"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/spec/addresses",component:u("/v0.50/build/spec/addresses","413"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/spec/addresses/bech32",component:u("/v0.50/build/spec/addresses/bech32","6e9"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/spec/SPEC_MODULE",component:u("/v0.50/build/spec/SPEC_MODULE","f55"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/spec/SPEC_STANDARD",component:u("/v0.50/build/spec/SPEC_STANDARD","c52"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/spec/store",component:u("/v0.50/build/spec/store","c97"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/spec/store/interblock-cache",component:u("/v0.50/build/spec/store/interblock-cache","494"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/tooling",component:u("/v0.50/build/tooling","87b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/tooling/confix",component:u("/v0.50/build/tooling/confix","d85"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/tooling/cosmovisor",component:u("/v0.50/build/tooling/cosmovisor","6c9"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/tooling/hubl",component:u("/v0.50/build/tooling/hubl","a46"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/build/tooling/protobuf",component:u("/v0.50/build/tooling/protobuf","915"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.50/learn",component:u("/v0.50/learn","a75"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/advanced/autocli",component:u("/v0.50/learn/advanced/autocli","a1b"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/advanced/baseapp",component:u("/v0.50/learn/advanced/baseapp","b29"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/advanced/cli",component:u("/v0.50/learn/advanced/cli","2c6"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/advanced/config",component:u("/v0.50/learn/advanced/config","b71"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/advanced/context",component:u("/v0.50/learn/advanced/context","b09"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/advanced/encoding",component:u("/v0.50/learn/advanced/encoding","908"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/advanced/events",component:u("/v0.50/learn/advanced/events","1fd"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/advanced/grpc_rest",component:u("/v0.50/learn/advanced/grpc_rest","461"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/advanced/node",component:u("/v0.50/learn/advanced/node","e91"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/advanced/ocap",component:u("/v0.50/learn/advanced/ocap","c8a"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/advanced/proto-docs",component:u("/v0.50/learn/advanced/proto-docs","731"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/advanced/runtx_middleware",component:u("/v0.50/learn/advanced/runtx_middleware","bc3"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/advanced/simulation",component:u("/v0.50/learn/advanced/simulation","4c8"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/advanced/store",component:u("/v0.50/learn/advanced/store","e6d"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/advanced/telemetry",component:u("/v0.50/learn/advanced/telemetry","837"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/advanced/transactions",component:u("/v0.50/learn/advanced/transactions","8e7"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/advanced/upgrade",component:u("/v0.50/learn/advanced/upgrade","945"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/beginner/accounts",component:u("/v0.50/learn/beginner/accounts","3ab"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/beginner/app-anatomy",component:u("/v0.50/learn/beginner/app-anatomy","359"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/beginner/gas-fees",component:u("/v0.50/learn/beginner/gas-fees","c13"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/beginner/query-lifecycle",component:u("/v0.50/learn/beginner/query-lifecycle","1ab"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/beginner/tx-lifecycle",component:u("/v0.50/learn/beginner/tx-lifecycle","32e"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/intro/overview",component:u("/v0.50/learn/intro/overview","59c"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/intro/sdk-app-architecture",component:u("/v0.50/learn/intro/sdk-app-architecture","9a4"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/intro/sdk-design",component:u("/v0.50/learn/intro/sdk-design","458"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/learn/intro/why-app-specific",component:u("/v0.50/learn/intro/why-app-specific","8ed"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.50/tutorials",component:u("/v0.50/tutorials","01b"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.50/tutorials/transactions/building-a-transaction",component:u("/v0.50/tutorials/transactions/building-a-transaction","91d"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.50/tutorials/vote-extensions/auction-frontrunning/demo-of-mitigating-front-running",component:u("/v0.50/tutorials/vote-extensions/auction-frontrunning/demo-of-mitigating-front-running","d13"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.50/tutorials/vote-extensions/auction-frontrunning/getting-started",component:u("/v0.50/tutorials/vote-extensions/auction-frontrunning/getting-started","f50"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.50/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extensions",component:u("/v0.50/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extensions","886"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.50/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extesions",component:u("/v0.50/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extesions","f5a"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.50/tutorials/vote-extensions/auction-frontrunning/understanding-frontrunning",component:u("/v0.50/tutorials/vote-extensions/auction-frontrunning/understanding-frontrunning","d15"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.50/tutorials/vote-extensions/oracle/getting-started",component:u("/v0.50/tutorials/vote-extensions/oracle/getting-started","750"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.50/tutorials/vote-extensions/oracle/implementing-vote-extensions",component:u("/v0.50/tutorials/vote-extensions/oracle/implementing-vote-extensions","a6d"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.50/tutorials/vote-extensions/oracle/testing-oracle",component:u("/v0.50/tutorials/vote-extensions/oracle/testing-oracle","13d"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.50/tutorials/vote-extensions/oracle/what-is-an-oracle",component:u("/v0.50/tutorials/vote-extensions/oracle/what-is-an-oracle","9f5"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.50/user",component:u("/v0.50/user","aa3"),exact:!0,sidebar:"userSidebar"},{path:"/v0.50/user/run-node/interact-node",component:u("/v0.50/user/run-node/interact-node","786"),exact:!0,sidebar:"userSidebar"},{path:"/v0.50/user/run-node/keyring",component:u("/v0.50/user/run-node/keyring","35d"),exact:!0,sidebar:"userSidebar"},{path:"/v0.50/user/run-node/rosetta",component:u("/v0.50/user/run-node/rosetta","855"),exact:!0,sidebar:"userSidebar"},{path:"/v0.50/user/run-node/run-node",component:u("/v0.50/user/run-node/run-node","b29"),exact:!0,sidebar:"userSidebar"},{path:"/v0.50/user/run-node/run-production",component:u("/v0.50/user/run-node/run-production","baf"),exact:!0,sidebar:"userSidebar"},{path:"/v0.50/user/run-node/run-testnet",component:u("/v0.50/user/run-node/run-testnet","59c"),exact:!0,sidebar:"userSidebar"},{path:"/v0.50/user/run-node/txs",component:u("/v0.50/user/run-node/txs","5fd"),exact:!0,sidebar:"userSidebar"}]},{path:"/v0.53",component:u("/v0.53","1fa"),routes:[{path:"/v0.53/build",component:u("/v0.53/build","d26"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/abci/checktx",component:u("/v0.53/build/abci/checktx","30a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/abci/introduction",component:u("/v0.53/build/abci/introduction","3be"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/abci/prepare-proposal",component:u("/v0.53/build/abci/prepare-proposal","c32"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/abci/process-proposal",component:u("/v0.53/build/abci/process-proposal","034"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/abci/vote-extensions",component:u("/v0.53/build/abci/vote-extensions","8e1"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture",component:u("/v0.53/build/architecture","9c5"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-002-docs-structure",component:u("/v0.53/build/architecture/adr-002-docs-structure","a7d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-003-dynamic-capability-store",component:u("/v0.53/build/architecture/adr-003-dynamic-capability-store","55d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-004-split-denomination-keys",component:u("/v0.53/build/architecture/adr-004-split-denomination-keys","ba2"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-006-secret-store-replacement",component:u("/v0.53/build/architecture/adr-006-secret-store-replacement","4ed"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-007-specialization-groups",component:u("/v0.53/build/architecture/adr-007-specialization-groups","d5a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-008-dCERT-group",component:u("/v0.53/build/architecture/adr-008-dCERT-group","a2f"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-009-evidence-module",component:u("/v0.53/build/architecture/adr-009-evidence-module","d68"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-010-modular-antehandler",component:u("/v0.53/build/architecture/adr-010-modular-antehandler","313"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-011-generalize-genesis-accounts",component:u("/v0.53/build/architecture/adr-011-generalize-genesis-accounts","041"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-012-state-accessors",component:u("/v0.53/build/architecture/adr-012-state-accessors","4e8"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-013-metrics",component:u("/v0.53/build/architecture/adr-013-metrics","c46"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-014-proportional-slashing",component:u("/v0.53/build/architecture/adr-014-proportional-slashing","583"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-016-validator-consensus-key-rotation",component:u("/v0.53/build/architecture/adr-016-validator-consensus-key-rotation","695"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-017-historical-header-module",component:u("/v0.53/build/architecture/adr-017-historical-header-module","509"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-018-extendable-voting-period",component:u("/v0.53/build/architecture/adr-018-extendable-voting-period","fb0"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-019-protobuf-state-encoding",component:u("/v0.53/build/architecture/adr-019-protobuf-state-encoding","68a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-020-protobuf-transaction-encoding",component:u("/v0.53/build/architecture/adr-020-protobuf-transaction-encoding","1b6"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-021-protobuf-query-encoding",component:u("/v0.53/build/architecture/adr-021-protobuf-query-encoding","542"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-022-custom-panic-handling",component:u("/v0.53/build/architecture/adr-022-custom-panic-handling","10c"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-023-protobuf-naming",component:u("/v0.53/build/architecture/adr-023-protobuf-naming","10a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-024-coin-metadata",component:u("/v0.53/build/architecture/adr-024-coin-metadata","c2b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-027-deterministic-protobuf-serialization",component:u("/v0.53/build/architecture/adr-027-deterministic-protobuf-serialization","32b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-028-public-key-addresses",component:u("/v0.53/build/architecture/adr-028-public-key-addresses","619"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-029-fee-grant-module",component:u("/v0.53/build/architecture/adr-029-fee-grant-module","ce5"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-030-authz-module",component:u("/v0.53/build/architecture/adr-030-authz-module","090"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-031-msg-service",component:u("/v0.53/build/architecture/adr-031-msg-service","97d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-032-typed-events",component:u("/v0.53/build/architecture/adr-032-typed-events","75d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-033-protobuf-inter-module-comm",component:u("/v0.53/build/architecture/adr-033-protobuf-inter-module-comm","737"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-034-account-rekeying",component:u("/v0.53/build/architecture/adr-034-account-rekeying","ed4"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-035-rosetta-api-support",component:u("/v0.53/build/architecture/adr-035-rosetta-api-support","811"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-036-arbitrary-signature",component:u("/v0.53/build/architecture/adr-036-arbitrary-signature","dba"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-037-gov-split-vote",component:u("/v0.53/build/architecture/adr-037-gov-split-vote","a81"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-038-state-listening",component:u("/v0.53/build/architecture/adr-038-state-listening","71c"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-039-epoched-staking",component:u("/v0.53/build/architecture/adr-039-epoched-staking","31b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-040-storage-and-smt-state-commitments",component:u("/v0.53/build/architecture/adr-040-storage-and-smt-state-commitments","f56"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-041-in-place-store-migrations",component:u("/v0.53/build/architecture/adr-041-in-place-store-migrations","870"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-042-group-module",component:u("/v0.53/build/architecture/adr-042-group-module","eab"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-043-nft-module",component:u("/v0.53/build/architecture/adr-043-nft-module","78d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-044-protobuf-updates-guidelines",component:u("/v0.53/build/architecture/adr-044-protobuf-updates-guidelines","74d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-045-check-delivertx-middlewares",component:u("/v0.53/build/architecture/adr-045-check-delivertx-middlewares","951"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-046-module-params",component:u("/v0.53/build/architecture/adr-046-module-params","806"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-047-extend-upgrade-plan",component:u("/v0.53/build/architecture/adr-047-extend-upgrade-plan","278"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-048-consensus-fees",component:u("/v0.53/build/architecture/adr-048-consensus-fees","dcc"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-049-state-sync-hooks",component:u("/v0.53/build/architecture/adr-049-state-sync-hooks","340"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-050-sign-mode-textual",component:u("/v0.53/build/architecture/adr-050-sign-mode-textual","2de"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-050-sign-mode-textual-annex1",component:u("/v0.53/build/architecture/adr-050-sign-mode-textual-annex1","942"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-050-sign-mode-textual-annex2",component:u("/v0.53/build/architecture/adr-050-sign-mode-textual-annex2","38d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-053-go-module-refactoring",component:u("/v0.53/build/architecture/adr-053-go-module-refactoring","b63"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-054-semver-compatible-modules",component:u("/v0.53/build/architecture/adr-054-semver-compatible-modules","301"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-055-orm",component:u("/v0.53/build/architecture/adr-055-orm","d45"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-057-app-wiring",component:u("/v0.53/build/architecture/adr-057-app-wiring","83d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-058-auto-generated-cli",component:u("/v0.53/build/architecture/adr-058-auto-generated-cli","ceb"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-059-test-scopes",component:u("/v0.53/build/architecture/adr-059-test-scopes","2c8"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-060-abci-1.0",component:u("/v0.53/build/architecture/adr-060-abci-1.0","46a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-061-liquid-staking",component:u("/v0.53/build/architecture/adr-061-liquid-staking","dc8"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-062-collections-state-layer",component:u("/v0.53/build/architecture/adr-062-collections-state-layer","00a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-063-core-module-api",component:u("/v0.53/build/architecture/adr-063-core-module-api","588"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-064-abci-2.0",component:u("/v0.53/build/architecture/adr-064-abci-2.0","2f4"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-065-store-v2",component:u("/v0.53/build/architecture/adr-065-store-v2","108"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-068-preblock",component:u("/v0.53/build/architecture/adr-068-preblock","e48"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-070-unordered-account",component:u("/v0.53/build/architecture/adr-070-unordered-account","509"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-076-tx-malleability",component:u("/v0.53/build/architecture/adr-076-tx-malleability","fd7"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/adr-template",component:u("/v0.53/build/architecture/adr-template","506"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/architecture/PROCESS",component:u("/v0.53/build/architecture/PROCESS","0d2"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-apps/app-go",component:u("/v0.53/build/building-apps/app-go","1c2"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-apps/app-go-di",component:u("/v0.53/build/building-apps/app-go-di","1fd"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-apps/app-mempool",component:u("/v0.53/build/building-apps/app-mempool","f74"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-apps/app-testnet",component:u("/v0.53/build/building-apps/app-testnet","169"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-apps/app-upgrade",component:u("/v0.53/build/building-apps/app-upgrade","155"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-apps/runtime",component:u("/v0.53/build/building-apps/runtime","bde"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-apps/vote-extensions",component:u("/v0.53/build/building-apps/vote-extensions","fe9"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/beginblock-endblock",component:u("/v0.53/build/building-modules/beginblock-endblock","2eb"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/depinject",component:u("/v0.53/build/building-modules/depinject","9b0"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/errors",component:u("/v0.53/build/building-modules/errors","a8e"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/genesis",component:u("/v0.53/build/building-modules/genesis","937"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/intro",component:u("/v0.53/build/building-modules/intro","d9d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/invariants",component:u("/v0.53/build/building-modules/invariants","418"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/keeper",component:u("/v0.53/build/building-modules/keeper","666"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/messages-and-queries",component:u("/v0.53/build/building-modules/messages-and-queries","cd1"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/module-interfaces",component:u("/v0.53/build/building-modules/module-interfaces","1c1"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/module-manager",component:u("/v0.53/build/building-modules/module-manager","98b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/msg-services",component:u("/v0.53/build/building-modules/msg-services","313"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/preblock",component:u("/v0.53/build/building-modules/preblock","d67"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/protobuf-annotations",component:u("/v0.53/build/building-modules/protobuf-annotations","383"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/query-services",component:u("/v0.53/build/building-modules/query-services","bf4"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/simulator",component:u("/v0.53/build/building-modules/simulator","94d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/structure",component:u("/v0.53/build/building-modules/structure","3c8"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/testing",component:u("/v0.53/build/building-modules/testing","02b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/building-modules/upgrade",component:u("/v0.53/build/building-modules/upgrade","427"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/migrations/intro",component:u("/v0.53/build/migrations/intro","589"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/migrations/upgrade-guide",component:u("/v0.53/build/migrations/upgrade-guide","9ad"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/migrations/upgrade-reference",component:u("/v0.53/build/migrations/upgrade-reference","c1a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules",component:u("/v0.53/build/modules","cf7"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/auth",component:u("/v0.53/build/modules/auth","9c2"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/auth/tx",component:u("/v0.53/build/modules/auth/tx","97c"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/auth/vesting",component:u("/v0.53/build/modules/auth/vesting","07b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/authz",component:u("/v0.53/build/modules/authz","9fa"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/bank",component:u("/v0.53/build/modules/bank","a3d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/circuit",component:u("/v0.53/build/modules/circuit","7e2"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/consensus",component:u("/v0.53/build/modules/consensus","dc9"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/crisis",component:u("/v0.53/build/modules/crisis","774"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/distribution",component:u("/v0.53/build/modules/distribution","23f"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/epochs",component:u("/v0.53/build/modules/epochs","883"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/evidence",component:u("/v0.53/build/modules/evidence","0d3"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/feegrant",component:u("/v0.53/build/modules/feegrant","3e4"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/genutil",component:u("/v0.53/build/modules/genutil","93b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/gov",component:u("/v0.53/build/modules/gov","90b"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/group",component:u("/v0.53/build/modules/group","0b1"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/mint",component:u("/v0.53/build/modules/mint","3a9"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/nft",component:u("/v0.53/build/modules/nft","e4d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/params",component:u("/v0.53/build/modules/params","38e"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/protocolpool",component:u("/v0.53/build/modules/protocolpool","a11"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/slashing",component:u("/v0.53/build/modules/slashing","531"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/staking",component:u("/v0.53/build/modules/staking","93d"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/modules/upgrade",component:u("/v0.53/build/modules/upgrade","188"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/packages",component:u("/v0.53/build/packages","3a5"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/packages/collections",component:u("/v0.53/build/packages/collections","f11"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/packages/depinject",component:u("/v0.53/build/packages/depinject","18a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/rfc",component:u("/v0.53/build/rfc","2e0"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/rfc/PROCESS",component:u("/v0.53/build/rfc/PROCESS","bbc"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/rfc/rfc-001-tx-validation",component:u("/v0.53/build/rfc/rfc-001-tx-validation","80e"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/rfc/rfc-template",component:u("/v0.53/build/rfc/rfc-template","218"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/spec",component:u("/v0.53/build/spec","1de"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/spec/addresses",component:u("/v0.53/build/spec/addresses","361"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/spec/addresses/bech32",component:u("/v0.53/build/spec/addresses/bech32","dd3"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/spec/SPEC_MODULE",component:u("/v0.53/build/spec/SPEC_MODULE","5c1"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/spec/SPEC_STANDARD",component:u("/v0.53/build/spec/SPEC_STANDARD","15a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/spec/store",component:u("/v0.53/build/spec/store","9ff"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/spec/store/interblock-cache",component:u("/v0.53/build/spec/store/interblock-cache","05a"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/tooling",component:u("/v0.53/build/tooling","c19"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/tooling/confix",component:u("/v0.53/build/tooling/confix","f77"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/tooling/cosmovisor",component:u("/v0.53/build/tooling/cosmovisor","d76"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/build/tooling/protobuf",component:u("/v0.53/build/tooling/protobuf","753"),exact:!0,sidebar:"buildSidebar"},{path:"/v0.53/learn",component:u("/v0.53/learn","950"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/advanced/autocli",component:u("/v0.53/learn/advanced/autocli","b4d"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/advanced/baseapp",component:u("/v0.53/learn/advanced/baseapp","cca"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/advanced/cli",component:u("/v0.53/learn/advanced/cli","2e4"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/advanced/config",component:u("/v0.53/learn/advanced/config","e08"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/advanced/context",component:u("/v0.53/learn/advanced/context","d4c"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/advanced/encoding",component:u("/v0.53/learn/advanced/encoding","63d"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/advanced/events",component:u("/v0.53/learn/advanced/events","908"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/advanced/grpc_rest",component:u("/v0.53/learn/advanced/grpc_rest","63b"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/advanced/node",component:u("/v0.53/learn/advanced/node","dea"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/advanced/ocap",component:u("/v0.53/learn/advanced/ocap","d63"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/advanced/proto-docs",component:u("/v0.53/learn/advanced/proto-docs","b2e"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/advanced/runtx_middleware",component:u("/v0.53/learn/advanced/runtx_middleware","17d"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/advanced/simulation",component:u("/v0.53/learn/advanced/simulation","c07"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/advanced/store",component:u("/v0.53/learn/advanced/store","4e6"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/advanced/telemetry",component:u("/v0.53/learn/advanced/telemetry","4a6"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/advanced/transactions",component:u("/v0.53/learn/advanced/transactions","e46"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/advanced/upgrade",component:u("/v0.53/learn/advanced/upgrade","530"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/beginner/accounts",component:u("/v0.53/learn/beginner/accounts","e7a"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/beginner/app-anatomy",component:u("/v0.53/learn/beginner/app-anatomy","4de"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/beginner/gas-fees",component:u("/v0.53/learn/beginner/gas-fees","2b1"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/beginner/query-lifecycle",component:u("/v0.53/learn/beginner/query-lifecycle","d86"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/beginner/tx-lifecycle",component:u("/v0.53/learn/beginner/tx-lifecycle","bd8"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/intro/overview",component:u("/v0.53/learn/intro/overview","27c"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/intro/sdk-app-architecture",component:u("/v0.53/learn/intro/sdk-app-architecture","183"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/intro/sdk-design",component:u("/v0.53/learn/intro/sdk-design","6ae"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/learn/intro/why-app-specific",component:u("/v0.53/learn/intro/why-app-specific","fb7"),exact:!0,sidebar:"learnSidebar"},{path:"/v0.53/tutorials",component:u("/v0.53/tutorials","e36"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.53/tutorials/transactions/building-a-transaction",component:u("/v0.53/tutorials/transactions/building-a-transaction","48b"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.53/tutorials/vote-extensions/auction-frontrunning/demo-of-mitigating-front-running",component:u("/v0.53/tutorials/vote-extensions/auction-frontrunning/demo-of-mitigating-front-running","8be"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.53/tutorials/vote-extensions/auction-frontrunning/getting-started",component:u("/v0.53/tutorials/vote-extensions/auction-frontrunning/getting-started","d3d"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.53/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extensions",component:u("/v0.53/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extensions","22d"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.53/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extesions",component:u("/v0.53/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extesions","7ea"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.53/tutorials/vote-extensions/auction-frontrunning/understanding-frontrunning",component:u("/v0.53/tutorials/vote-extensions/auction-frontrunning/understanding-frontrunning","323"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.53/tutorials/vote-extensions/oracle/getting-started",component:u("/v0.53/tutorials/vote-extensions/oracle/getting-started","4d8"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.53/tutorials/vote-extensions/oracle/implementing-vote-extensions",component:u("/v0.53/tutorials/vote-extensions/oracle/implementing-vote-extensions","87e"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.53/tutorials/vote-extensions/oracle/testing-oracle",component:u("/v0.53/tutorials/vote-extensions/oracle/testing-oracle","c94"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.53/tutorials/vote-extensions/oracle/what-is-an-oracle",component:u("/v0.53/tutorials/vote-extensions/oracle/what-is-an-oracle","df3"),exact:!0,sidebar:"tutorialsSidebar"},{path:"/v0.53/user",component:u("/v0.53/user","d5c"),exact:!0,sidebar:"userSidebar"},{path:"/v0.53/user/run-node/interact-node",component:u("/v0.53/user/run-node/interact-node","4cd"),exact:!0,sidebar:"userSidebar"},{path:"/v0.53/user/run-node/keyring",component:u("/v0.53/user/run-node/keyring","cd1"),exact:!0,sidebar:"userSidebar"},{path:"/v0.53/user/run-node/run-node",component:u("/v0.53/user/run-node/run-node","14d"),exact:!0,sidebar:"userSidebar"},{path:"/v0.53/user/run-node/run-production",component:u("/v0.53/user/run-node/run-production","a97"),exact:!0,sidebar:"userSidebar"},{path:"/v0.53/user/run-node/run-testnet",component:u("/v0.53/user/run-node/run-testnet","7e0"),exact:!0,sidebar:"userSidebar"},{path:"/v0.53/user/run-node/txs",component:u("/v0.53/user/run-node/txs","3fd"),exact:!0,sidebar:"userSidebar"}]},{path:"/",component:u("/","10b"),exact:!0},{path:"*",component:u("*")}]},98934:(e,t,n)=>{"use strict";n.d(t,{_:()=>i,t:()=>a});var o=n(67294);const i=o.createContext(!1);function a(e){let{children:t}=e;const[n,a]=(0,o.useState)(!1);return(0,o.useEffect)((()=>{a(!0)}),[]),o.createElement(i.Provider,{value:n},t)}},49383:(e,t,n)=>{"use strict";var o=n(67294),i=n(73935),a=n(73727),s=n(70405),r=n(10412);const d=[n(32497),n(3310),n(18320),n(52295),n(41304),n(4750),n(74367)];var p=n(723),l=n(16550),c=n(18790);function u(e){let{children:t}=e;return o.createElement(o.Fragment,null,t)}var m=n(87462),h=n(35742),f=n(52263),y=n(44996),b=n(86668),g=n(10833),v=n(94711),_=n(19727),k=n(43320),w=n(90197);function S(){const{i18n:{defaultLocale:e,localeConfigs:t}}=(0,f.Z)(),n=(0,v.l)();return o.createElement(h.Z,null,Object.entries(t).map((e=>{let[t,{htmlLang:i}]=e;return o.createElement("link",{key:t,rel:"alternate",href:n.createUrl({locale:t,fullyQualified:!0}),hrefLang:i})})),o.createElement("link",{rel:"alternate",href:n.createUrl({locale:e,fullyQualified:!0}),hrefLang:"x-default"}))}function T(e){let{permalink:t}=e;const{siteConfig:{url:n}}=(0,f.Z)(),i=function(){const{siteConfig:{url:e}}=(0,f.Z)(),{pathname:t}=(0,l.TH)();return e+(0,y.Z)(t)}(),a=t?`${n}${t}`:i;return o.createElement(h.Z,null,o.createElement("meta",{property:"og:url",content:a}),o.createElement("link",{rel:"canonical",href:a}))}function E(){const{i18n:{currentLocale:e}}=(0,f.Z)(),{metadata:t,image:n}=(0,b.L)();return o.createElement(o.Fragment,null,o.createElement(h.Z,null,o.createElement("meta",{name:"twitter:card",content:"summary_large_image"}),o.createElement("body",{className:_.h})),n&&o.createElement(g.d,{image:n}),o.createElement(T,null),o.createElement(S,null),o.createElement(w.Z,{tag:k.HX,locale:e}),o.createElement(h.Z,null,t.map(((e,t)=>o.createElement("meta",(0,m.Z)({key:t},e))))))}const P=new Map;function x(e){if(P.has(e.pathname))return{...e,pathname:P.get(e.pathname)};if((0,c.f)(p.Z,e.pathname).some((e=>{let{route:t}=e;return!0===t.exact})))return P.set(e.pathname,e.pathname),e;const t=e.pathname.trim().replace(/(?:\/index)?\.html$/,"")||"/";return P.set(e.pathname,t),{...e,pathname:t}}var R=n(98934),A=n(58940);function I(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];const i=d.map((t=>{const o=t.default?.[e]??t[e];return o?.(...n)}));return()=>i.forEach((e=>e?.()))}const O=function(e){let{children:t,location:n,previousLocation:i}=e;return(0,o.useLayoutEffect)((()=>{i!==n&&(!function(e){let{location:t,previousLocation:n}=e;if(!n)return;const o=t.pathname===n.pathname,i=t.hash===n.hash,a=t.search===n.search;if(o&&i&&!a)return;const{hash:s}=t;if(s){const e=decodeURIComponent(s.substring(1)),t=document.getElementById(e);t?.scrollIntoView()}else window.scrollTo(0,0)}({location:n,previousLocation:i}),I("onRouteDidUpdate",{previousLocation:i,location:n}))}),[i,n]),t};function U(e){const t=Array.from(new Set([e,decodeURI(e)])).map((e=>(0,c.f)(p.Z,e))).flat();return Promise.all(t.map((e=>e.route.component.preload?.())))}class N extends o.Component{previousLocation;routeUpdateCleanupCb;constructor(e){super(e),this.previousLocation=null,this.routeUpdateCleanupCb=r.default.canUseDOM?I("onRouteUpdate",{previousLocation:null,location:this.props.location}):()=>{},this.state={nextRouteHasLoaded:!0}}shouldComponentUpdate(e,t){if(e.location===this.props.location)return t.nextRouteHasLoaded;const n=e.location;return this.previousLocation=this.props.location,this.setState({nextRouteHasLoaded:!1}),this.routeUpdateCleanupCb=I("onRouteUpdate",{previousLocation:this.previousLocation,location:n}),U(n.pathname).then((()=>{this.routeUpdateCleanupCb(),this.setState({nextRouteHasLoaded:!0})})).catch((e=>{console.warn(e),window.location.reload()})),!1}render(){const{children:e,location:t}=this.props;return o.createElement(O,{previousLocation:this.previousLocation,location:t},o.createElement(l.AW,{location:t,render:()=>e}))}}const L=N,D="docusaurus-base-url-issue-banner-container",C="docusaurus-base-url-issue-banner",F="docusaurus-base-url-issue-banner-suggestion-container",q="__DOCUSAURUS_INSERT_BASEURL_BANNER";function j(e){return`\nwindow['${q}'] = true;\n\ndocument.addEventListener('DOMContentLoaded', maybeInsertBanner);\n\nfunction maybeInsertBanner() {\n  var shouldInsert = window['${q}'];\n  shouldInsert && insertBanner();\n}\n\nfunction insertBanner() {\n  var bannerContainer = document.getElementById('${D}');\n  if (!bannerContainer) {\n    return;\n  }\n  var bannerHtml = ${JSON.stringify(function(e){return`\n<div id="${C}" style="border: thick solid red; background-color: rgb(255, 230, 179); margin: 20px; padding: 20px; font-size: 20px;">\n   <p style="font-weight: bold; font-size: 30px;">Your Docusaurus site did not load properly.</p>\n   <p>A very common reason is a wrong site <a href="https://docusaurus.io/docs/docusaurus.config.js/#baseUrl" style="font-weight: bold;">baseUrl configuration</a>.</p>\n   <p>Current configured baseUrl = <span style="font-weight: bold; color: red;">${e}</span> ${"/"===e?" (default value)":""}</p>\n   <p>We suggest trying baseUrl = <span id="${F}" style="font-weight: bold; color: green;"></span></p>\n</div>\n`}(e)).replace(/</g,"\\<")};\n  bannerContainer.innerHTML = bannerHtml;\n  var suggestionContainer = document.getElementById('${F}');\n  var actualHomePagePath = window.location.pathname;\n  var suggestedBaseUrl = actualHomePagePath.substr(-1) === '/'\n        ? actualHomePagePath\n        : actualHomePagePath + '/';\n  suggestionContainer.innerHTML = suggestedBaseUrl;\n}\n`}function M(){const{siteConfig:{baseUrl:e}}=(0,f.Z)();return(0,o.useLayoutEffect)((()=>{window[q]=!1}),[]),o.createElement(o.Fragment,null,!r.default.canUseDOM&&o.createElement(h.Z,null,o.createElement("script",null,j(e))),o.createElement("div",{id:D}))}function G(){const{siteConfig:{baseUrl:e,baseUrlIssueBanner:t}}=(0,f.Z)(),{pathname:n}=(0,l.TH)();return t&&n===e?o.createElement(M,null):null}function B(){const{siteConfig:{favicon:e,title:t,noIndex:n},i18n:{currentLocale:i,localeConfigs:a}}=(0,f.Z)(),s=(0,y.Z)(e),{htmlLang:r,direction:d}=a[i];return o.createElement(h.Z,null,o.createElement("html",{lang:r,dir:d}),o.createElement("title",null,t),o.createElement("meta",{property:"og:title",content:t}),o.createElement("meta",{name:"viewport",content:"width=device-width, initial-scale=1.0"}),n&&o.createElement("meta",{name:"robots",content:"noindex, nofollow"}),e&&o.createElement("link",{rel:"icon",href:s}))}var z=n(44763);function V(){const e=(0,c.H)(p.Z),t=(0,l.TH)();return o.createElement(z.Z,null,o.createElement(A.M,null,o.createElement(R.t,null,o.createElement(u,null,o.createElement(B,null),o.createElement(E,null),o.createElement(G,null),o.createElement(L,{location:x(t)},e)))))}var H=n(16887);const J=function(e){try{return document.createElement("link").relList.supports(e)}catch{return!1}}("prefetch")?function(e){return new Promise(((t,n)=>{if("undefined"==typeof document)return void n();const o=document.createElement("link");o.setAttribute("rel","prefetch"),o.setAttribute("href",e),o.onload=()=>t(),o.onerror=()=>n();const i=document.getElementsByTagName("head")[0]??document.getElementsByName("script")[0]?.parentNode;i?.appendChild(o)}))}:function(e){return new Promise(((t,n)=>{const o=new XMLHttpRequest;o.open("GET",e,!0),o.withCredentials=!0,o.onload=()=>{200===o.status?t():n()},o.send(null)}))};var Q=n(99670);const K=new Set,Y=new Set,W=()=>navigator.connection?.effectiveType.includes("2g")||navigator.connection?.saveData,$={prefetch(e){if(!(e=>!W()&&!Y.has(e)&&!K.has(e))(e))return!1;K.add(e);const t=(0,c.f)(p.Z,e).flatMap((e=>{return t=e.route.path,Object.entries(H).filter((e=>{let[n]=e;return n.replace(/-[^-]+$/,"")===t})).flatMap((e=>{let[,t]=e;return Object.values((0,Q.Z)(t))}));var t}));return Promise.all(t.map((e=>{const t=n.gca(e);return t&&!t.includes("undefined")?J(t).catch((()=>{})):Promise.resolve()})))},preload:e=>!!(e=>!W()&&!Y.has(e))(e)&&(Y.add(e),U(e))},Z=Object.freeze($);if(r.default.canUseDOM){window.docusaurus=Z;const e=i.hydrate;U(window.location.pathname).then((()=>{e(o.createElement(s.B6,null,o.createElement(a.VK,null,o.createElement(V,null))),document.getElementById("__docusaurus"))}))}},58940:(e,t,n)=>{"use strict";n.d(t,{_:()=>l,M:()=>c});var o=n(67294),i=n(36809);const a=JSON.parse('{"docusaurus-theme-redoc":{"theme-redoc":{"lightTheme":{"typography":{"fontFamily":"var(--ifm-font-family-base)","fontSize":"var(--ifm-font-size-base)","lineHeight":"var(--ifm-line-height-base)","fontWeightLight":"var(--ifm-font-weight-light)","fontWeightRegular":"var(--ifm-font-weight-base)","fontWeightBold":"var(--ifm-font-weight-bold)","headings":{"fontFamily":"var(--ifm-heading-font-family)","fontWeight":"var(--ifm-heading-font-weight)","lineHeight":"var(--ifm-heading-line-height)"},"code":{"fontFamily":"var(--ifm-font-family-monospace)","lineHeight":"var(--ifm-pre-line-height)"}},"sidebar":{"width":"300px","backgroundColor":"#ffffff"},"rightPanel":{"backgroundColor":"#303846"},"colors":{"primary":{"main":"#1890ff"}},"theme":{"prism":{"additionalLanguages":["scala"]}}},"darkTheme":{"typography":{"fontFamily":"var(--ifm-font-family-base)","fontSize":"var(--ifm-font-size-base)","lineHeight":"var(--ifm-line-height-base)","fontWeightLight":"var(--ifm-font-weight-light)","fontWeightRegular":"var(--ifm-font-weight-base)","fontWeightBold":"var(--ifm-font-weight-bold)","headings":{"fontFamily":"var(--ifm-heading-font-family)","fontWeight":"var(--ifm-heading-font-weight)","lineHeight":"var(--ifm-heading-line-height)"},"code":{"fontFamily":"var(--ifm-font-family-monospace)","lineHeight":"var(--ifm-pre-line-height)"}},"sidebar":{"width":"300px","backgroundColor":"rgb(24, 25, 26)","textColor":"#f5f6f7","arrow":{"color":"#f5f6f7"}},"colors":{"text":{"primary":"#f5f6f7","secondary":"rgba(255, 255, 255, 1)"},"gray":{"50":"#FAFAFA","100":"#F5F5F5"},"border":{"dark":"#ffffff","light":"rgba(0,0,0, 0.1)"},"primary":{"main":"#1890ff"}},"schema":{"nestedBackground":"rgb(24, 25, 26)","typeNameColor":"rgba(255, 255, 255, 1)","typeTitleColor":"rgba(255, 255, 255, 1)"},"theme":{"prism":{"additionalLanguages":["scala"]}}},"options":{"scrollYOffset":"nav.navbar","expandSingleSchemaField":true,"menuToggle":true,"suppressWarnings":true}}},"docusaurus-plugin-redoc":{"plugin-redoc-0":{"url":"redocusaurus/plugin-redoc-0.yaml","themeId":"theme-redoc","isSpecFile":true,"spec":{"openapi":"3.0.0","info":{"title":"Cosmos SDK - gRPC Gateway docs","description":"A REST interface for state queries.","version":"1.0.0"},"paths":{"/cosmos/auth/v1beta1/account_info/{address}":{"get":{"summary":"AccountInfo queries account info which is common to all account types.","operationId":"AccountInfo","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"info":{"description":"info is the account info which is represented by BaseAccount.","type":"object","properties":{"address":{"type":"string"},"pub_key":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"account_number":{"type":"string","format":"uint64"},"sequence":{"type":"string","format":"uint64"}}}},"description":"QueryAccountInfoResponse is the Query/AccountInfo response type."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"address","description":"address is the account address string.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/auth/v1beta1/accounts":{"get":{"summary":"Accounts returns all the existing accounts.\\nWhen called from another module, this query might consume a high amount of\\ngas if the pagination field is incorrectly set.","operationId":"Accounts","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"accounts":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"title":"accounts are the existing accounts"},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryAccountsResponse is the response type for the Query/Accounts RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/auth/v1beta1/accounts/{address}":{"get":{"summary":"Account returns account details based on address.","operationId":"Account","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"account":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}},"description":"QueryAccountResponse is the response type for the Query/Account RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"address","description":"address defines the address to query for.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/auth/v1beta1/address_by_id/{account_id}":{"get":{"summary":"AccountAddressByID returns account address based on account number.","operationId":"AccountAddressByID","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"account_address":{"type":"string"}},"title":"QueryAccountAddressByIDResponse is the response type for AccountAddressByID rpc method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"account_id","description":"account_id is the account number of the address to be queried.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}},{"name":"id","description":"Deprecated, use account_id instead\\n\\nid is the account number of the address to be queried. This field\\nshould have been an uint64 (like all account numbers), and will be\\nupdated to uint64 in a future version of the auth query.","in":"query","required":false,"schema":{"type":"string","format":"int64"}}],"tags":["Query"]}},"/cosmos/auth/v1beta1/bech32":{"get":{"summary":"Bech32Prefix queries bech32Prefix","operationId":"Bech32Prefix","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"bech32_prefix":{"type":"string"}},"description":"Bech32PrefixResponse is the response type for Bech32Prefix rpc method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"tags":["Query"]}},"/cosmos/auth/v1beta1/bech32/decode/{address_bytes}":{"get":{"summary":"AddressBytesToString converts Account Address bytes to string","operationId":"AddressBytesToString2","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"address_string":{"type":"string"}},"description":"AddressBytesToStringResponse is the response type for AddressString rpc method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"address_bytes","in":"path","required":true,"schema":{"type":"string","format":"byte"}}],"tags":["Query"]}},"/cosmos/auth/v1beta1/bech32/encode/{address_string}":{"get":{"summary":"AddressStringToBytes converts Address string to bytes","operationId":"AddressStringToBytes","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"address_bytes":{"type":"string","format":"byte"}},"description":"AddressStringToBytesResponse is the response type for AddressBytes rpc method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"address_string","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/auth/v1beta1/bech32/{address_bytes}":{"get":{"summary":"AddressBytesToString converts Account Address bytes to string","operationId":"AddressBytesToString","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"address_string":{"type":"string"}},"description":"AddressBytesToStringResponse is the response type for AddressString rpc method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"address_bytes","in":"path","required":true,"schema":{"type":"string","format":"byte"}}],"tags":["Query"]}},"/cosmos/auth/v1beta1/module_accounts":{"get":{"summary":"ModuleAccounts returns all the existing module accounts.","operationId":"ModuleAccounts","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"accounts":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}},"description":"QueryModuleAccountsResponse is the response type for the Query/ModuleAccounts RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"tags":["Query"]}},"/cosmos/auth/v1beta1/module_accounts/{name}":{"get":{"summary":"ModuleAccountByName returns the module account info by module name","operationId":"ModuleAccountByName","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"account":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}},"description":"QueryModuleAccountByNameResponse is the response type for the Query/ModuleAccountByName RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"name","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/auth/v1beta1/params":{"get":{"summary":"Params queries all parameters.","operationId":"AuthParams","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"params":{"description":"params defines the parameters of the module.","type":"object","properties":{"max_memo_characters":{"type":"string","format":"uint64"},"tx_sig_limit":{"type":"string","format":"uint64"},"tx_size_cost_per_byte":{"type":"string","format":"uint64"},"sig_verify_cost_ed25519":{"type":"string","format":"uint64"},"sig_verify_cost_secp256k1":{"type":"string","format":"uint64"}}}},"description":"QueryParamsResponse is the response type for the Query/Params RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"tags":["Query"]}},"/cosmos/bank/v1beta1/balances/{address}":{"get":{"summary":"AllBalances queries the balance of all coins for a single account.","description":"When called from another module, this query might consume a high amount of\\ngas if the pagination field is incorrectly set.","operationId":"AllBalances","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"balances":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"balances is the balances of all the coins."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryAllBalancesResponse is the response type for the Query/AllBalances RPC\\nmethod."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"address","description":"address is the address to query balances for.","in":"path","required":true,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"resolve_denom","description":"resolve_denom is the flag to resolve the denom into a human-readable form from the metadata.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/bank/v1beta1/balances/{address}/by_denom":{"get":{"summary":"Balance queries the balance of a single coin for a single account.","operationId":"Balance","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"balance":{"description":"balance is the balance of the coin.","type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}}}},"description":"QueryBalanceResponse is the response type for the Query/Balance RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"address","description":"address is the address to query balances for.","in":"path","required":true,"schema":{"type":"string"}},{"name":"denom","description":"denom is the coin denom to query balances for.","in":"query","required":false,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/bank/v1beta1/denom_owners/{denom}":{"get":{"summary":"DenomOwners queries for all account addresses that own a particular token\\ndenomination.","description":"When called from another module, this query might consume a high amount of\\ngas if the pagination field is incorrectly set.","operationId":"DenomOwners","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"denom_owners":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","description":"address defines the address that owns a particular denomination."},"balance":{"description":"balance is the balance of the denominated coin for an account.","type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}}}},"description":"DenomOwner defines structure representing an account that owns or holds a\\nparticular denominated token. It contains the account address and account\\nbalance of the denominated token."}},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryDenomOwnersResponse defines the RPC response of a DenomOwners RPC query."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"denom","description":"denom defines the coin denomination to query all account holders for.","in":"path","required":true,"schema":{"type":"string","pattern":".+"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/bank/v1beta1/denom_owners_by_query":{"get":{"summary":"DenomOwnersByQuery queries for all account addresses that own a particular token\\ndenomination.","operationId":"DenomOwnersByQuery","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"denom_owners":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","description":"address defines the address that owns a particular denomination."},"balance":{"description":"balance is the balance of the denominated coin for an account.","type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}}}},"description":"DenomOwner defines structure representing an account that owns or holds a\\nparticular denominated token. It contains the account address and account\\nbalance of the denominated token."}},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryDenomOwnersByQueryResponse defines the RPC response of a DenomOwnersByQuery RPC query."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"denom","description":"denom defines the coin denomination to query all account holders for.","in":"query","required":false,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/bank/v1beta1/denoms_metadata":{"get":{"summary":"DenomsMetadata queries the client metadata for all registered coin\\ndenominations.","operationId":"DenomsMetadata","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"metadatas":{"type":"array","items":{"type":"object","properties":{"description":{"type":"string"},"denom_units":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string","description":"denom represents the string name of the given denom unit (e.g uatom)."},"exponent":{"type":"integer","format":"int64","description":"exponent represents power of 10 exponent that one must\\nraise the base_denom to in order to equal the given DenomUnit\'s denom\\n1 denom = 10^exponent base_denom\\n(e.g. with a base_denom of uatom, one can create a DenomUnit of \'atom\' with\\nexponent = 6, thus: 1 atom = 10^6 uatom)."},"aliases":{"type":"array","items":{"type":"string"},"title":"aliases is a list of string aliases for the given denom"}},"description":"DenomUnit represents a struct that describes a given\\ndenomination unit of the basic token."},"title":"denom_units represents the list of DenomUnit\'s for a given coin"},"base":{"type":"string","description":"base represents the base denom (should be the DenomUnit with exponent = 0)."},"display":{"type":"string","description":"display indicates the suggested denom that should be\\ndisplayed in clients."},"name":{"type":"string","title":"name defines the name of the token (eg: Cosmos Atom)"},"symbol":{"type":"string","description":"symbol is the token symbol usually shown on exchanges (eg: ATOM). This can\\nbe the same as the display."},"uri":{"type":"string","description":"URI to a document (on or off-chain) that contains additional information. Optional."},"uri_hash":{"type":"string","description":"URIHash is a sha256 hash of a document pointed by URI. It\'s used to verify that\\nthe document didn\'t change. Optional."}},"description":"Metadata represents a struct that describes\\na basic token."},"description":"metadata provides the client information for all the registered tokens."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC\\nmethod."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/bank/v1beta1/denoms_metadata/{denom}":{"get":{"summary":"DenomMetadata queries the client metadata of a given coin denomination.","operationId":"DenomMetadata","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"metadata":{"description":"metadata describes and provides all the client information for the requested token.","type":"object","properties":{"description":{"type":"string"},"denom_units":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string","description":"denom represents the string name of the given denom unit (e.g uatom)."},"exponent":{"type":"integer","format":"int64","description":"exponent represents power of 10 exponent that one must\\nraise the base_denom to in order to equal the given DenomUnit\'s denom\\n1 denom = 10^exponent base_denom\\n(e.g. with a base_denom of uatom, one can create a DenomUnit of \'atom\' with\\nexponent = 6, thus: 1 atom = 10^6 uatom)."},"aliases":{"type":"array","items":{"type":"string"},"title":"aliases is a list of string aliases for the given denom"}},"description":"DenomUnit represents a struct that describes a given\\ndenomination unit of the basic token."},"title":"denom_units represents the list of DenomUnit\'s for a given coin"},"base":{"type":"string","description":"base represents the base denom (should be the DenomUnit with exponent = 0)."},"display":{"type":"string","description":"display indicates the suggested denom that should be\\ndisplayed in clients."},"name":{"type":"string","title":"name defines the name of the token (eg: Cosmos Atom)"},"symbol":{"type":"string","description":"symbol is the token symbol usually shown on exchanges (eg: ATOM). This can\\nbe the same as the display."},"uri":{"type":"string","description":"URI to a document (on or off-chain) that contains additional information. Optional."},"uri_hash":{"type":"string","description":"URIHash is a sha256 hash of a document pointed by URI. It\'s used to verify that\\nthe document didn\'t change. Optional."}}}},"description":"QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC\\nmethod."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"denom","description":"denom is the coin denom to query the metadata for.","in":"path","required":true,"schema":{"type":"string","pattern":".+"}}],"tags":["Query"]}},"/cosmos/bank/v1beta1/denoms_metadata_by_query_string":{"get":{"summary":"DenomMetadataByQueryString queries the client metadata of a given coin denomination.","operationId":"DenomMetadataByQueryString","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"metadata":{"description":"metadata describes and provides all the client information for the requested token.","type":"object","properties":{"description":{"type":"string"},"denom_units":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string","description":"denom represents the string name of the given denom unit (e.g uatom)."},"exponent":{"type":"integer","format":"int64","description":"exponent represents power of 10 exponent that one must\\nraise the base_denom to in order to equal the given DenomUnit\'s denom\\n1 denom = 10^exponent base_denom\\n(e.g. with a base_denom of uatom, one can create a DenomUnit of \'atom\' with\\nexponent = 6, thus: 1 atom = 10^6 uatom)."},"aliases":{"type":"array","items":{"type":"string"},"title":"aliases is a list of string aliases for the given denom"}},"description":"DenomUnit represents a struct that describes a given\\ndenomination unit of the basic token."},"title":"denom_units represents the list of DenomUnit\'s for a given coin"},"base":{"type":"string","description":"base represents the base denom (should be the DenomUnit with exponent = 0)."},"display":{"type":"string","description":"display indicates the suggested denom that should be\\ndisplayed in clients."},"name":{"type":"string","title":"name defines the name of the token (eg: Cosmos Atom)"},"symbol":{"type":"string","description":"symbol is the token symbol usually shown on exchanges (eg: ATOM). This can\\nbe the same as the display."},"uri":{"type":"string","description":"URI to a document (on or off-chain) that contains additional information. Optional."},"uri_hash":{"type":"string","description":"URIHash is a sha256 hash of a document pointed by URI. It\'s used to verify that\\nthe document didn\'t change. Optional."}}}},"description":"QueryDenomMetadataByQueryStringResponse is the response type for the Query/DenomMetadata RPC\\nmethod. Identical with QueryDenomMetadataResponse but receives denom as query string in request."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"denom","description":"denom is the coin denom to query the metadata for.","in":"query","required":false,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/bank/v1beta1/params":{"get":{"summary":"Params queries the parameters of x/bank module.","operationId":"BankParams","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"params":{"description":"params provides the parameters of the bank module.","type":"object","properties":{"send_enabled":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"enabled":{"type":"boolean"}},"description":"SendEnabled maps coin denom to a send_enabled status (whether a denom is\\nsendable)."},"description":"Deprecated: Use of SendEnabled in params is deprecated.\\nFor genesis, use the newly added send_enabled field in the genesis object.\\nStorage, lookup, and manipulation of this information is now in the keeper.\\n\\nAs of cosmos-sdk 0.47, this only exists for backwards compatibility of genesis files."},"default_send_enabled":{"type":"boolean"}}}},"description":"QueryParamsResponse defines the response type for querying x/bank parameters."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"tags":["Query"]}},"/cosmos/bank/v1beta1/send_enabled":{"get":{"summary":"SendEnabled queries for SendEnabled entries.","description":"This query only returns denominations that have specific SendEnabled settings.\\nAny denomination that does not have a specific setting will use the default\\nparams.default_send_enabled, and will not be returned by this query.","operationId":"SendEnabled","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"send_enabled":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"enabled":{"type":"boolean"}},"description":"SendEnabled maps coin denom to a send_enabled status (whether a denom is\\nsendable)."}},"pagination":{"description":"pagination defines the pagination in the response. This field is only\\npopulated if the denoms field in the request is empty.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QuerySendEnabledResponse defines the RPC response of a SendEnable query."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"denoms","description":"denoms is the specific denoms you want look up. Leave empty to get all entries.","in":"query","required":false,"explode":true,"schema":{"type":"array","items":{"type":"string"}}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/bank/v1beta1/spendable_balances/{address}":{"get":{"summary":"SpendableBalances queries the spendable balance of all coins for a single\\naccount.\\nWhen called from another module, this query might consume a high amount of\\ngas if the pagination field is incorrectly set.","operationId":"SpendableBalances","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"balances":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"balances is the spendable balances of all the coins."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QuerySpendableBalancesResponse defines the gRPC response structure for querying\\nan account\'s spendable balances."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"address","description":"address is the address to query spendable balances for.","in":"path","required":true,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/bank/v1beta1/spendable_balances/{address}/by_denom":{"get":{"summary":"SpendableBalanceByDenom queries the spendable balance of a single denom for\\na single account.","description":"When called from another module, this query might consume a high amount of\\ngas if the pagination field is incorrectly set.","operationId":"SpendableBalanceByDenom","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"balance":{"description":"balance is the balance of the coin.","type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}}}},"description":"QuerySpendableBalanceByDenomResponse defines the gRPC response structure for\\nquerying an account\'s spendable balance for a specific denom."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"address","description":"address is the address to query balances for.","in":"path","required":true,"schema":{"type":"string"}},{"name":"denom","description":"denom is the coin denom to query balances for.","in":"query","required":false,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/bank/v1beta1/supply":{"get":{"summary":"TotalSupply queries the total supply of all coins.","description":"When called from another module, this query might consume a high amount of\\ngas if the pagination field is incorrectly set.","operationId":"TotalSupply","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"supply":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"title":"supply is the supply of the coins"},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"title":"QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC\\nmethod"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/bank/v1beta1/supply/by_denom":{"get":{"summary":"SupplyOf queries the supply of a single coin.","description":"When called from another module, this query might consume a high amount of\\ngas if the pagination field is incorrectly set.","operationId":"SupplyOf","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"amount":{"description":"amount is the supply of the coin.","type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}}}},"description":"QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"denom","description":"denom is the coin denom to query balances for.","in":"query","required":false,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/base/tendermint/v1beta1/abci_query":{"get":{"summary":"ABCIQuery defines a query handler that supports ABCI queries directly to the\\napplication, bypassing Tendermint completely. The ABCI query must contain\\na valid and supported path, including app, custom, p2p, and store.","operationId":"ABCIQuery","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int64"},"log":{"type":"string","title":"nondeterministic"},"info":{"type":"string","title":"nondeterministic"},"index":{"type":"string","format":"int64"},"key":{"type":"string","format":"byte"},"value":{"type":"string","format":"byte"},"height":{"type":"string","format":"int64"},"codespace":{"type":"string"},"proof_ops":{"type":"object","properties":{"ops":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"key":{"type":"string","format":"byte"},"data":{"type":"string","format":"byte"}},"title":"ProofOp defines an operation used for calculating Merkle root\\nThe data could be arbitrary format, providing necessary data\\nfor example neighbouring node hash"}}},"title":"ProofOps is Merkle proof defined by the list of ProofOps"}},"description":"ABCIQueryResponse defines the response structure for the ABCIQuery gRPC query.\\n\\nNote: This type is a duplicate of the ResponseQuery proto type defined in\\nTendermint."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"data","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"path","in":"query","required":false,"schema":{"type":"string"}},{"name":"height","in":"query","required":false,"schema":{"type":"string","format":"int64"}},{"name":"prove","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Service"]}},"/cosmos/base/tendermint/v1beta1/blocks/latest":{"get":{"summary":"GetLatestBlock returns the latest block.","operationId":"GetLatestBlock","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"block":{"title":"Deprecated: please use `sdk_block` instead","type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"data":{"type":"object","properties":{"txs":{"type":"array","items":{"type":"string","format":"byte"},"description":"Txs that will be applied by state @ block.Height+1.\\nNOTE: not all txs here are valid.  We\'re just agreeing on the order first.\\nThis means that block.AppHash does not include these txs."}},"title":"Data contains the set of transactions included in the block"},"evidence":{"type":"object","properties":{"evidence":{"type":"array","items":{"type":"object","properties":{"duplicate_vote_evidence":{"type":"object","properties":{"vote_a":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"vote_b":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"total_voting_power":{"type":"string","format":"int64"},"validator_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},"light_client_attack_evidence":{"type":"object","properties":{"conflicting_block":{"type":"object","properties":{"signed_header":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it."},"validator_set":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"proposer":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."},"total_voting_power":{"type":"string","format":"int64"}},"description":"ValidatorSet defines a set of validators."}},"description":"LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients."},"common_height":{"type":"string","format":"int64"},"byzantine_validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"total_voting_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."}},"description":"Evidence is a generic type for wrapping evidence of misbehavior by a validator."}}},"description":"EvidenceList is a list of evidence."},"last_commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"Block defines the structure of a block in the CometBFT blockchain."},"sdk_block":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","description":"proposer_address is the original block proposer address, formatted as a Bech32 string.\\nIn Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string\\nfor better UX.\\n\\noriginal proposer of the block"}},"description":"Header defines the structure of a Tendermint block header."},"data":{"type":"object","properties":{"txs":{"type":"array","items":{"type":"string","format":"byte"},"description":"Txs that will be applied by state @ block.Height+1.\\nNOTE: not all txs here are valid.  We\'re just agreeing on the order first.\\nThis means that block.AppHash does not include these txs."}},"title":"Data contains the set of transactions included in the block"},"evidence":{"type":"object","properties":{"evidence":{"type":"array","items":{"type":"object","properties":{"duplicate_vote_evidence":{"type":"object","properties":{"vote_a":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"vote_b":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"total_voting_power":{"type":"string","format":"int64"},"validator_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},"light_client_attack_evidence":{"type":"object","properties":{"conflicting_block":{"type":"object","properties":{"signed_header":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it."},"validator_set":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"proposer":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."},"total_voting_power":{"type":"string","format":"int64"}},"description":"ValidatorSet defines a set of validators."}},"description":"LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients."},"common_height":{"type":"string","format":"int64"},"byzantine_validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"total_voting_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."}},"description":"Evidence is a generic type for wrapping evidence of misbehavior by a validator."}}},"description":"EvidenceList is a list of evidence."},"last_commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"Block is tendermint type Block, with the Header proposer address\\nfield converted to bech32 string."}},"description":"GetLatestBlockResponse is the response type for the Query/GetLatestBlock RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"tags":["Service"]}},"/cosmos/base/tendermint/v1beta1/blocks/{height}":{"get":{"summary":"GetBlockByHeight queries block for given height.","operationId":"GetBlockByHeight","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"block":{"title":"Deprecated: please use `sdk_block` instead","type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"data":{"type":"object","properties":{"txs":{"type":"array","items":{"type":"string","format":"byte"},"description":"Txs that will be applied by state @ block.Height+1.\\nNOTE: not all txs here are valid.  We\'re just agreeing on the order first.\\nThis means that block.AppHash does not include these txs."}},"title":"Data contains the set of transactions included in the block"},"evidence":{"type":"object","properties":{"evidence":{"type":"array","items":{"type":"object","properties":{"duplicate_vote_evidence":{"type":"object","properties":{"vote_a":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"vote_b":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"total_voting_power":{"type":"string","format":"int64"},"validator_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},"light_client_attack_evidence":{"type":"object","properties":{"conflicting_block":{"type":"object","properties":{"signed_header":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it."},"validator_set":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"proposer":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."},"total_voting_power":{"type":"string","format":"int64"}},"description":"ValidatorSet defines a set of validators."}},"description":"LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients."},"common_height":{"type":"string","format":"int64"},"byzantine_validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"total_voting_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."}},"description":"Evidence is a generic type for wrapping evidence of misbehavior by a validator."}}},"description":"EvidenceList is a list of evidence."},"last_commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"Block defines the structure of a block in the CometBFT blockchain."},"sdk_block":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","description":"proposer_address is the original block proposer address, formatted as a Bech32 string.\\nIn Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string\\nfor better UX.\\n\\noriginal proposer of the block"}},"description":"Header defines the structure of a Tendermint block header."},"data":{"type":"object","properties":{"txs":{"type":"array","items":{"type":"string","format":"byte"},"description":"Txs that will be applied by state @ block.Height+1.\\nNOTE: not all txs here are valid.  We\'re just agreeing on the order first.\\nThis means that block.AppHash does not include these txs."}},"title":"Data contains the set of transactions included in the block"},"evidence":{"type":"object","properties":{"evidence":{"type":"array","items":{"type":"object","properties":{"duplicate_vote_evidence":{"type":"object","properties":{"vote_a":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"vote_b":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"total_voting_power":{"type":"string","format":"int64"},"validator_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},"light_client_attack_evidence":{"type":"object","properties":{"conflicting_block":{"type":"object","properties":{"signed_header":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it."},"validator_set":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"proposer":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."},"total_voting_power":{"type":"string","format":"int64"}},"description":"ValidatorSet defines a set of validators."}},"description":"LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients."},"common_height":{"type":"string","format":"int64"},"byzantine_validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"total_voting_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."}},"description":"Evidence is a generic type for wrapping evidence of misbehavior by a validator."}}},"description":"EvidenceList is a list of evidence."},"last_commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"Block is tendermint type Block, with the Header proposer address\\nfield converted to bech32 string."}},"description":"GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"height","in":"path","required":true,"schema":{"type":"string","format":"int64"}}],"tags":["Service"]}},"/cosmos/base/tendermint/v1beta1/node_info":{"get":{"summary":"GetNodeInfo queries the current node info.","operationId":"GetNodeInfo","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"default_node_info":{"type":"object","properties":{"protocol_version":{"type":"object","properties":{"p2p":{"type":"string","format":"uint64"},"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"ProtocolVersion represents the current p2p protocol version."},"default_node_id":{"type":"string"},"listen_addr":{"type":"string"},"network":{"type":"string"},"version":{"type":"string"},"channels":{"type":"string","format":"byte"},"moniker":{"type":"string"},"other":{"type":"object","properties":{"tx_index":{"type":"string"},"rpc_address":{"type":"string"}},"description":"DefaultNodeInfoOther is the misc. application specific data."}},"description":"DefaultNodeInfo is a basic node\'s information sent to other peers during the\\np2p handshake."},"application_version":{"type":"object","properties":{"name":{"type":"string"},"app_name":{"type":"string"},"version":{"type":"string"},"git_commit":{"type":"string"},"build_tags":{"type":"string"},"go_version":{"type":"string"},"build_deps":{"type":"array","items":{"type":"object","properties":{"path":{"type":"string","title":"module path"},"version":{"type":"string","title":"module version"},"sum":{"type":"string","title":"checksum"}},"title":"Module is the type for VersionInfo"}},"cosmos_sdk_version":{"type":"string"},"comet_server_version":{"type":"string"},"runtime_version":{"type":"string"},"stf_version":{"type":"string"}},"description":"VersionInfo is the type for the GetNodeInfoResponse message."}},"description":"GetNodeInfoResponse is the response type for the Query/GetNodeInfo RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"tags":["Service"]}},"/cosmos/base/tendermint/v1beta1/syncing":{"get":{"summary":"GetSyncing queries node syncing.","operationId":"GetSyncing","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"syncing":{"type":"boolean"}},"description":"GetSyncingResponse is the response type for the Query/GetSyncing RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"tags":["Service"]}},"/cosmos/base/tendermint/v1beta1/validatorsets/latest":{"get":{"summary":"GetLatestValidatorSet queries latest validator-set.","operationId":"GetLatestValidatorSet","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"block_height":{"type":"string","format":"int64"},"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string"},"pub_key":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator is the type for the validator-set."}},"pagination":{"description":"pagination defines an pagination for the response. offset and limit are used for pagination, next_key is not\\nsupported for this query.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"GetLatestValidatorSetResponse is the response type for the Query/GetValidatorSetByHeight RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Service"]}},"/cosmos/base/tendermint/v1beta1/validatorsets/{height}":{"get":{"summary":"GetValidatorSetByHeight queries validator-set at a given height.","operationId":"GetValidatorSetByHeight","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"block_height":{"type":"string","format":"int64"},"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string"},"pub_key":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator is the type for the validator-set."}},"pagination":{"description":"pagination defines an pagination for the response. offset and limit are used for pagination, next_key is not\\nsupported for this query.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"GetValidatorSetByHeightResponse is the response type for the Query/GetValidatorSetByHeight RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"height","in":"path","required":true,"schema":{"type":"string","format":"int64"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Service"]}},"/cosmos/base/node/v1beta1/config":{"get":{"summary":"Config queries for the operator configuration.","operationId":"Config","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"minimum_gas_price":{"type":"string"},"pruning_keep_recent":{"type":"string"},"pruning_interval":{"type":"string"},"halt_height":{"type":"string","format":"uint64"}},"description":"ConfigResponse defines the response structure for the Config gRPC query."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"tags":["Service"]}},"/cosmos/base/node/v1beta1/status":{"get":{"summary":"Status queries for the node status.","operationId":"Status","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"earliest_store_height":{"type":"string","format":"uint64","title":"earliest block height available in the store"},"height":{"type":"string","format":"uint64","title":"current block height"},"timestamp":{"type":"string","format":"date-time","title":"block height timestamp"},"app_hash":{"type":"string","format":"byte","title":"app hash of the current block"},"validator_hash":{"type":"string","format":"byte","title":"validator hash provided by the consensus header"}},"description":"StatusResponse defines the response structure for the status of a node."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"tags":["Service"]}},"/cosmos/distribution/v1beta1/community_pool":{"get":{"summary":"CommunityPool queries the community pool coins.","description":"Deprecated: Prefer to use x/protocolpool module\'s CommunityPool rpc method.","operationId":"CommunityPool","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"pool":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."},"description":"pool defines community pool\'s coins."}},"description":"QueryCommunityPoolResponse is the response type for the Query/CommunityPool\\nRPC method.\\n\\nDeprecated"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"tags":["Query"]}},"/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards":{"get":{"summary":"DelegationTotalRewards queries the total rewards accrued by each\\nvalidator.","operationId":"DelegationTotalRewards","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"rewards":{"type":"array","items":{"type":"object","properties":{"validator_address":{"type":"string"},"reward":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."}}},"description":"DelegationDelegatorReward represents the properties\\nof a delegator\'s delegation reward."},"description":"rewards defines all the rewards accrued by a delegator."},"total":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."},"description":"total defines the sum of all the rewards."}},"description":"QueryDelegationTotalRewardsResponse is the response type for the\\nQuery/DelegationTotalRewards RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"delegator_address","description":"delegator_address defines the delegator address to query for.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}":{"get":{"summary":"DelegationRewards queries the total rewards accrued by a delegation.","operationId":"DelegationRewards","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"rewards":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."},"description":"rewards defines the rewards accrued by a delegation."}},"description":"QueryDelegationRewardsResponse is the response type for the\\nQuery/DelegationRewards RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"delegator_address","description":"delegator_address defines the delegator address to query for.","in":"path","required":true,"schema":{"type":"string"}},{"name":"validator_address","description":"validator_address defines the validator address to query for.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/distribution/v1beta1/delegators/{delegator_address}/validators":{"get":{"summary":"DelegatorValidators queries the validators of a delegator.","operationId":"DelegatorValidators","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"string"},"description":"validators defines the validators a delegator is delegating for."}},"description":"QueryDelegatorValidatorsResponse is the response type for the\\nQuery/DelegatorValidators RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"delegator_address","description":"delegator_address defines the delegator address to query for.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/distribution/v1beta1/delegators/{delegator_address}/withdraw_address":{"get":{"summary":"DelegatorWithdrawAddress queries withdraw address of a delegator.","operationId":"DelegatorWithdrawAddress","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"withdraw_address":{"type":"string","description":"withdraw_address defines the delegator address to query for."}},"description":"QueryDelegatorWithdrawAddressResponse is the response type for the\\nQuery/DelegatorWithdrawAddress RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"delegator_address","description":"delegator_address defines the delegator address to query for.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/distribution/v1beta1/params":{"get":{"summary":"Params queries params of the distribution module.","operationId":"DistributionParams","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"params":{"description":"params defines the parameters of the module.","type":"object","properties":{"community_tax":{"type":"string"},"base_proposer_reward":{"type":"string","description":"Deprecated: The base_proposer_reward field is deprecated and is no longer used\\nin the x/distribution module\'s reward mechanism."},"bonus_proposer_reward":{"type":"string","description":"Deprecated: The bonus_proposer_reward field is deprecated and is no longer used\\nin the x/distribution module\'s reward mechanism."},"withdraw_addr_enabled":{"type":"boolean"}}}},"description":"QueryParamsResponse is the response type for the Query/Params RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"tags":["Query"]}},"/cosmos/distribution/v1beta1/validators/{validator_address}":{"get":{"summary":"ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator","operationId":"ValidatorDistributionInfo","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"operator_address":{"type":"string","description":"operator_address defines the validator operator address."},"self_bond_rewards":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."},"description":"self_bond_rewards defines the self delegations rewards."},"commission":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."},"description":"commission defines the commission the validator received."}},"description":"QueryValidatorDistributionInfoResponse is the response type for the Query/ValidatorDistributionInfo RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"validator_address","description":"validator_address defines the validator address to query for.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/distribution/v1beta1/validators/{validator_address}/commission":{"get":{"summary":"ValidatorCommission queries accumulated commission for a validator.","operationId":"ValidatorCommission","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"commission":{"description":"commission defines the commission the validator received.","type":"object","properties":{"commission":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."}}}}},"title":"QueryValidatorCommissionResponse is the response type for the\\nQuery/ValidatorCommission RPC method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"validator_address","description":"validator_address defines the validator address to query for.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards":{"get":{"summary":"ValidatorOutstandingRewards queries rewards of a validator address.","operationId":"ValidatorOutstandingRewards","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"rewards":{"type":"object","properties":{"rewards":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."}}},"description":"ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards\\nfor a validator inexpensive to track, allows simple sanity checks."}},"description":"QueryValidatorOutstandingRewardsResponse is the response type for the\\nQuery/ValidatorOutstandingRewards RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"validator_address","description":"validator_address defines the validator address to query for.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/distribution/v1beta1/validators/{validator_address}/slashes":{"get":{"summary":"ValidatorSlashes queries slash events of a validator.","operationId":"ValidatorSlashes","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"slashes":{"type":"array","items":{"type":"object","properties":{"validator_period":{"type":"string","format":"uint64"},"fraction":{"type":"string"}},"description":"ValidatorSlashEvent represents a validator slash event.\\nHeight is implicit within the store key.\\nThis is needed to calculate appropriate amount of staking tokens\\nfor delegations which are withdrawn after a slash has occurred."},"description":"slashes defines the slashes the validator received."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryValidatorSlashesResponse is the response type for the\\nQuery/ValidatorSlashes RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"validator_address","description":"validator_address defines the validator address to query for.","in":"path","required":true,"schema":{"type":"string"}},{"name":"starting_height","description":"starting_height defines the optional starting height to query the slashes.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"ending_height","description":"starting_height defines the optional ending height to query the slashes.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/evidence/v1beta1/evidence":{"get":{"summary":"AllEvidence queries all evidence.","operationId":"AllEvidence","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"evidence":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"description":"evidence returns all evidences."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC\\nmethod."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/evidence/v1beta1/evidence/{hash}":{"get":{"summary":"Evidence queries evidence based on evidence hash.","operationId":"Evidence","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"evidence":{"description":"evidence returns the requested evidence.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}}},"description":"QueryEvidenceResponse is the response type for the Query/Evidence RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"hash","description":"hash defines the evidence hash of the requested evidence.","in":"path","required":true,"schema":{"type":"string"}},{"name":"evidence_hash","description":"evidence_hash defines the hash of the requested evidence.\\nDeprecated: Use hash, a HEX encoded string, instead.","in":"query","required":false,"schema":{"type":"string","format":"byte"}}],"tags":["Query"]}},"/cosmos/gov/v1beta1/params/{params_type}":{"get":{"summary":"Params queries all parameters of the gov module.","operationId":"GovParams","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"voting_params":{"description":"voting_params defines the parameters related to voting.","type":"object","properties":{"voting_period":{"type":"string","description":"Duration of the voting period."}}},"deposit_params":{"description":"deposit_params defines the parameters related to deposit.","type":"object","properties":{"min_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"Minimum deposit for a proposal to enter voting period."},"max_deposit_period":{"type":"string","description":"Maximum period for Atom holders to deposit on a proposal. Initial value: 2\\nmonths."}}},"tally_params":{"description":"tally_params defines the parameters related to tally.","type":"object","properties":{"quorum":{"type":"string","format":"byte","description":"Minimum percentage of total stake needed to vote for a result to be\\nconsidered valid."},"threshold":{"type":"string","format":"byte","description":"Minimum proportion of Yes votes for proposal to pass. Default value: 0.5."},"veto_threshold":{"type":"string","format":"byte","description":"Minimum value of Veto votes to Total votes ratio for proposal to be\\nvetoed. Default value: 1/3."}}}},"description":"QueryParamsResponse is the response type for the Query/Params RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"params_type","description":"params_type defines which parameters to query for, can be one of \\"voting\\",\\n\\"tallying\\" or \\"deposit\\".","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/gov/v1beta1/proposals":{"get":{"summary":"Proposals queries all proposals based on given status.","operationId":"Proposals","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"proposals":{"type":"array","items":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"content":{"description":"content is the proposal\'s content.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"status":{"description":"status defines the proposal status.","type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_DEPOSIT_PERIOD","PROPOSAL_STATUS_VOTING_PERIOD","PROPOSAL_STATUS_PASSED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_FAILED"],"default":"PROPOSAL_STATUS_UNSPECIFIED"},"final_tally_result":{"description":"final_tally_result is the final tally result of the proposal. When\\nquerying a proposal via gRPC, this field is not populated until the\\nproposal\'s voting period has ended.","type":"object","properties":{"yes":{"type":"string","description":"yes is the number of yes votes on a proposal."},"abstain":{"type":"string","description":"abstain is the number of abstain votes on a proposal."},"no":{"type":"string","description":"no is the number of no votes on a proposal."},"no_with_veto":{"type":"string","description":"no_with_veto is the number of no with veto votes on a proposal."}}},"submit_time":{"type":"string","format":"date-time","description":"submit_time is the time of proposal submission."},"deposit_end_time":{"type":"string","format":"date-time","description":"deposit_end_time is the end time for deposition."},"total_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"total_deposit is the total deposit on the proposal."},"voting_start_time":{"type":"string","format":"date-time","description":"voting_start_time is the starting time to vote on a proposal."},"voting_end_time":{"type":"string","format":"date-time","description":"voting_end_time is the end time of voting on a proposal."}},"description":"Proposal defines the core field members of a governance proposal."},"description":"proposals defines all the requested governance proposals."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryProposalsResponse is the response type for the Query/Proposals RPC\\nmethod."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_status","description":"proposal_status defines the status of the proposals.\\n\\n - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.\\n - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit\\nperiod.\\n - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting\\nperiod.\\n - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has\\npassed.\\n - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has\\nbeen rejected.\\n - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has\\nfailed.","in":"query","required":false,"schema":{"type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_DEPOSIT_PERIOD","PROPOSAL_STATUS_VOTING_PERIOD","PROPOSAL_STATUS_PASSED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_FAILED"],"default":"PROPOSAL_STATUS_UNSPECIFIED"}},{"name":"voter","description":"voter defines the voter address for the proposals.","in":"query","required":false,"schema":{"type":"string"}},{"name":"depositor","description":"depositor defines the deposit addresses from the proposals.","in":"query","required":false,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/gov/v1beta1/proposals/{proposal_id}":{"get":{"summary":"Proposal queries proposal details based on ProposalID.","operationId":"Proposal","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"proposal":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"content":{"description":"content is the proposal\'s content.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"status":{"description":"status defines the proposal status.","type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_DEPOSIT_PERIOD","PROPOSAL_STATUS_VOTING_PERIOD","PROPOSAL_STATUS_PASSED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_FAILED"],"default":"PROPOSAL_STATUS_UNSPECIFIED"},"final_tally_result":{"description":"final_tally_result is the final tally result of the proposal. When\\nquerying a proposal via gRPC, this field is not populated until the\\nproposal\'s voting period has ended.","type":"object","properties":{"yes":{"type":"string","description":"yes is the number of yes votes on a proposal."},"abstain":{"type":"string","description":"abstain is the number of abstain votes on a proposal."},"no":{"type":"string","description":"no is the number of no votes on a proposal."},"no_with_veto":{"type":"string","description":"no_with_veto is the number of no with veto votes on a proposal."}}},"submit_time":{"type":"string","format":"date-time","description":"submit_time is the time of proposal submission."},"deposit_end_time":{"type":"string","format":"date-time","description":"deposit_end_time is the end time for deposition."},"total_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"total_deposit is the total deposit on the proposal."},"voting_start_time":{"type":"string","format":"date-time","description":"voting_start_time is the starting time to vote on a proposal."},"voting_end_time":{"type":"string","format":"date-time","description":"voting_end_time is the end time of voting on a proposal."}},"description":"Proposal defines the core field members of a governance proposal."}},"description":"QueryProposalResponse is the response type for the Query/Proposal RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_id","description":"proposal_id defines the unique id of the proposal.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}}],"tags":["Query"]}},"/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits":{"get":{"summary":"Deposits queries all deposits of a single proposal.","operationId":"Deposits","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"deposits":{"type":"array","items":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"depositor":{"type":"string","description":"depositor defines the deposit addresses from the proposals."},"amount":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"amount to be deposited by depositor."}},"description":"Deposit defines an amount deposited by an account address to an active\\nproposal."},"description":"deposits defines the requested deposits."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryDepositsResponse is the response type for the Query/Deposits RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_id","description":"proposal_id defines the unique id of the proposal.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}":{"get":{"summary":"Deposit queries single deposit information based on proposalID, depositor address.","operationId":"Deposit","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"deposit":{"description":"deposit defines the requested deposit.","type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"depositor":{"type":"string","description":"depositor defines the deposit addresses from the proposals."},"amount":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"amount to be deposited by depositor."}}}},"description":"QueryDepositResponse is the response type for the Query/Deposit RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_id","description":"proposal_id defines the unique id of the proposal.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}},{"name":"depositor","description":"depositor defines the deposit addresses from the proposals.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/gov/v1beta1/proposals/{proposal_id}/tally":{"get":{"summary":"TallyResult queries the tally of a proposal vote.","operationId":"TallyResult","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"tally":{"description":"tally defines the requested tally.","type":"object","properties":{"yes":{"type":"string","description":"yes is the number of yes votes on a proposal."},"abstain":{"type":"string","description":"abstain is the number of abstain votes on a proposal."},"no":{"type":"string","description":"no is the number of no votes on a proposal."},"no_with_veto":{"type":"string","description":"no_with_veto is the number of no with veto votes on a proposal."}}}},"description":"QueryTallyResultResponse is the response type for the Query/Tally RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_id","description":"proposal_id defines the unique id of the proposal.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}}],"tags":["Query"]}},"/cosmos/gov/v1beta1/proposals/{proposal_id}/votes":{"get":{"summary":"Votes queries votes of a given proposal.","operationId":"Votes","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"votes":{"type":"array","items":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"voter":{"type":"string","description":"voter is the voter address of the proposal."},"option":{"description":"Deprecated: Prefer to use `options` instead. This field is set in queries\\nif and only if `len(options) == 1` and that option has weight 1. In all\\nother cases, this field will default to VOTE_OPTION_UNSPECIFIED.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"options":{"type":"array","items":{"type":"object","properties":{"option":{"description":"option defines the valid vote options, it must not contain duplicate vote options.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"weight":{"type":"string","description":"weight is the vote weight associated with the vote option."}},"description":"WeightedVoteOption defines a unit of vote for vote split."},"description":"options is the weighted vote options.\\n\\nSince: cosmos-sdk 0.43"}},"description":"Vote defines a vote on a governance proposal.\\nA Vote consists of a proposal ID, the voter, and the vote option."},"description":"votes defines the queried votes."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryVotesResponse is the response type for the Query/Votes RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_id","description":"proposal_id defines the unique id of the proposal.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}":{"get":{"summary":"Vote queries voted information based on proposalID, voterAddr.\\nDue to how we handle state, this query would error for proposals that has already been finished.","operationId":"Vote","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"vote":{"description":"vote defines the queried vote.","type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"voter":{"type":"string","description":"voter is the voter address of the proposal."},"option":{"description":"Deprecated: Prefer to use `options` instead. This field is set in queries\\nif and only if `len(options) == 1` and that option has weight 1. In all\\nother cases, this field will default to VOTE_OPTION_UNSPECIFIED.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"options":{"type":"array","items":{"type":"object","properties":{"option":{"description":"option defines the valid vote options, it must not contain duplicate vote options.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"weight":{"type":"string","description":"weight is the vote weight associated with the vote option."}},"description":"WeightedVoteOption defines a unit of vote for vote split."},"description":"options is the weighted vote options.\\n\\nSince: cosmos-sdk 0.43"}}}},"description":"QueryVoteResponse is the response type for the Query/Vote RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_id","description":"proposal_id defines the unique id of the proposal.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}},{"name":"voter","description":"voter defines the voter address for the proposals.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/gov/v1/constitution":{"get":{"summary":"Constitution queries the chain\'s constitution.","operationId":"Constitution","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"constitution":{"type":"string"}},"title":"QueryConstitutionResponse is the response type for the Query/Constitution RPC method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"tags":["Query"]}},"/cosmos/gov/v1/params":{"get":{"summary":"Params queries all parameters of the gov module.","operationId":"GovV1Params","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"voting_params":{"description":"Deprecated: Prefer to use `params` instead.\\nvoting_params defines the parameters related to voting.","type":"object","properties":{"voting_period":{"type":"string","description":"Duration of the voting period."}}},"deposit_params":{"description":"Deprecated: Prefer to use `params` instead.\\ndeposit_params defines the parameters related to deposit.","type":"object","properties":{"min_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"Minimum deposit for a proposal to enter voting period."},"max_deposit_period":{"type":"string","description":"Maximum period for Atom holders to deposit on a proposal. Initial value: 2\\nmonths."}}},"tally_params":{"description":"Deprecated: Prefer to use `params` instead.\\ntally_params defines the parameters related to tally.","type":"object","properties":{"quorum":{"type":"string","description":"Minimum percentage of total stake needed to vote for a result to be\\nconsidered valid."},"threshold":{"type":"string","description":"Minimum proportion of Yes votes for proposal to pass. Default value: 0.5."},"veto_threshold":{"type":"string","description":"Minimum value of Veto votes to Total votes ratio for proposal to be\\nvetoed. Default value: 1/3."}}},"params":{"description":"params defines all the parameters of x/gov module.","type":"object","properties":{"min_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"Minimum deposit for a proposal to enter voting period."},"max_deposit_period":{"type":"string","description":"Maximum period for stake holders to deposit on a proposal. Initial value: 2\\nmonths."},"voting_period":{"type":"string","description":"Duration of the voting period."},"quorum":{"type":"string","description":"Minimum percentage of total stake needed to vote for a result to be\\n considered valid."},"threshold":{"type":"string","description":"Minimum proportion of Yes votes for proposal to pass. Default value: 0.5."},"veto_threshold":{"type":"string","description":"Minimum value of Veto votes to Total votes ratio for proposal to be\\n vetoed. Default value: 1/3."},"min_initial_deposit_ratio":{"type":"string","description":"The ratio representing the proportion of the deposit value that must be paid at proposal submission."},"proposal_cancel_ratio":{"type":"string","description":"The cancel ratio which will not be returned back to the depositors when a proposal is cancelled."},"proposal_cancel_dest":{"type":"string","description":"The address which will receive (proposal_cancel_ratio * deposit) proposal deposits.\\nIf empty, the (proposal_cancel_ratio * deposit) proposal deposits will be burned."},"expedited_voting_period":{"type":"string","description":"Duration of the voting period of an expedited proposal."},"expedited_threshold":{"type":"string","description":"Minimum proportion of Yes votes for proposal to pass. Default value: 0.67."},"expedited_min_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"Minimum expedited deposit for a proposal to enter voting period."},"burn_vote_quorum":{"type":"boolean","title":"burn deposits if a proposal does not meet quorum"},"burn_proposal_deposit_prevote":{"type":"boolean","title":"burn deposits if the proposal does not enter voting period"},"burn_vote_veto":{"type":"boolean","title":"burn deposits if quorum with vote type no_veto is met"},"min_deposit_ratio":{"type":"string","description":"The ratio representing the proportion of the deposit value minimum that must be met when making a deposit.\\nDefault value: 0.01. Meaning that for a chain with a min_deposit of 100stake, a deposit of 1stake would be\\nrequired."},"proposal_cancel_max_period":{"type":"string","description":"proposal_cancel_max_period defines how far in the voting period a proposer can cancel a proposal.\\nIf the proposal is cancelled before the max cancel period, the deposit will be returned/burn to the\\ndepositors, according to the proposal_cancel_ratio and proposal_cancel_dest parameters.\\nAfter the max cancel period, the proposal cannot be cancelled anymore."},"optimistic_authorized_addresses":{"type":"array","items":{"type":"string"},"title":"optimistic_authorized_addresses is an optional governance parameter that limits the authorized accounts than can\\nsubmit optimistic proposals"},"optimistic_rejected_threshold":{"type":"string","description":"optimistic rejected threshold defines at which percentage of NO votes, the optimistic proposal should fail and be\\nconverted to a standard proposal. The threshold is expressed as a percentage of the total bonded tokens."},"yes_quorum":{"type":"string","description":"yes_quorum defines the minimum percentage of Yes votes in quorum for proposal to pass.\\nDefault value: 0 (disabled)."},"expedited_quorum":{"type":"string","description":"Minimum percentage of total stake needed to vote for a result to be\\nconsidered valid for an expedited proposal."},"proposal_execution_gas":{"type":"string","format":"uint64"}}}},"description":"QueryParamsResponse is the response type for the Query/Params RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"params_type","description":"params_type defines which parameters to query for, can be one of \\"voting\\",\\n\\"tallying\\" or \\"deposit\\".\\nDeprecated: all params are stored in Params.","in":"query","required":false,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/gov/v1/params/{msg_url}":{"get":{"summary":"MessageBasedParams queries the message specific governance params based on a msg url.","operationId":"MessageBasedParams","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"params":{"type":"object","properties":{"voting_period":{"type":"string","description":"Duration of the voting period."},"quorum":{"type":"string","description":"Minimum percentage of total stake needed to vote for a result to be considered valid."},"yes_quorum":{"type":"string","description":"yes_quorum defines the minimum percentage of Yes votes in quorum for proposal to pass.\\nIf zero then the yes_quorum is disabled."},"threshold":{"type":"string","description":"Minimum proportion of Yes votes for proposal to pass."},"veto_threshold":{"type":"string","description":"Minimum value of Veto votes to Total votes ratio for proposal to be vetoed."}},"description":"MessageBasedParams defines the parameters of specific messages in a proposal.\\nIt is used to define the parameters of a proposal that is based on a specific message.\\nOnce a message has message based params, it only supports a standard proposal type."}},"description":"QueryMessageBasedParamsResponse is the response for the Query/MessageBasedParams RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"msg_url","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/gov/v1/proposals":{"get":{"summary":"Proposals queries all proposals based on given status.","operationId":"GovV1Proposal","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"proposals":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id defines the unique id of the proposal."},"messages":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"description":"messages are the arbitrary messages to be executed if the proposal passes."},"status":{"description":"status defines the proposal status.","type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_DEPOSIT_PERIOD","PROPOSAL_STATUS_VOTING_PERIOD","PROPOSAL_STATUS_PASSED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_FAILED"],"default":"PROPOSAL_STATUS_UNSPECIFIED"},"final_tally_result":{"description":"final_tally_result is the final tally result of the proposal. When\\nquerying a proposal via gRPC, this field is not populated until the\\nproposal\'s voting period has ended.","type":"object","properties":{"yes_count":{"type":"string","description":"yes_count is the number of yes votes on a proposal.\\n\\noption 1"},"abstain_count":{"type":"string","description":"abstain_count is the number of abstain votes on a proposal.\\n\\noption 2"},"no_count":{"type":"string","description":"no_count is the number of no votes on a proposal.\\n\\noption 3"},"no_with_veto_count":{"type":"string","description":"no_with_veto_count is the number of no with veto votes on a proposal.\\n\\noption 4"},"option_one_count":{"type":"string","description":"option_one_count corresponds to the number of votes for option one (= yes_count for non multiple choice proposals)."},"option_two_count":{"type":"string","description":"option_two_count corresponds to the number of votes for option two (= abstain_count for non multiple choice\\nproposals)."},"option_three_count":{"type":"string","description":"option_three_count corresponds to the number of votes for option three (= no_count for non multiple choice\\nproposals)."},"option_four_count":{"type":"string","description":"option_four_count corresponds to the number of votes for option four (= no_with_veto_count for non multiple choice\\nproposals)."},"spam_count":{"type":"string","description":"spam_count is the number of spam votes on a proposal."}}},"submit_time":{"type":"string","format":"date-time","description":"submit_time is the time of proposal submission."},"deposit_end_time":{"type":"string","format":"date-time","description":"deposit_end_time is the end time for deposition."},"total_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"total_deposit is the total deposit on the proposal."},"voting_start_time":{"type":"string","format":"date-time","description":"voting_start_time is the starting time to vote on a proposal."},"voting_end_time":{"type":"string","format":"date-time","description":"voting_end_time is the end time of voting on a proposal."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the proposal.\\nthe recommended format of the metadata is to be found here:\\nhttps://docs.cosmos.network/v0.47/modules/gov#proposal-3"},"title":{"type":"string","title":"title is the title of the proposal"},"summary":{"type":"string","title":"summary is a short summary of the proposal"},"proposer":{"type":"string","title":"proposer is the address of the proposal sumbitter"},"expedited":{"type":"boolean","description":"Deprecated: Use ProposalType instead.","title":"expedited defines if the proposal is expedited"},"failed_reason":{"type":"string","title":"failed_reason defines the reason why the proposal failed"},"proposal_type":{"title":"proposal_type defines the type of the proposal","type":"string","enum":["PROPOSAL_TYPE_UNSPECIFIED","PROPOSAL_TYPE_STANDARD","PROPOSAL_TYPE_MULTIPLE_CHOICE","PROPOSAL_TYPE_OPTIMISTIC","PROPOSAL_TYPE_EXPEDITED"],"default":"PROPOSAL_TYPE_UNSPECIFIED","description":"ProposalType enumerates the valid proposal types.\\nAll proposal types are v1.Proposal which have different voting periods or tallying logic.\\n\\n - PROPOSAL_TYPE_UNSPECIFIED: PROPOSAL_TYPE_UNSPECIFIED defines no proposal type, which fallback to PROPOSAL_TYPE_STANDARD.\\n - PROPOSAL_TYPE_STANDARD: PROPOSAL_TYPE_STANDARD defines the type for a standard proposal.\\n - PROPOSAL_TYPE_MULTIPLE_CHOICE: PROPOSAL_TYPE_MULTIPLE_CHOICE defines the type for a multiple choice proposal.\\n - PROPOSAL_TYPE_OPTIMISTIC: PROPOSAL_TYPE_OPTIMISTIC defines the type for an optimistic proposal.\\n - PROPOSAL_TYPE_EXPEDITED: PROPOSAL_TYPE_EXPEDITED defines the type for an expedited proposal."}},"description":"Proposal defines the core field members of a governance proposal."},"description":"proposals defines all the requested governance proposals."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryProposalsResponse is the response type for the Query/Proposals RPC\\nmethod."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_status","description":"proposal_status defines the status of the proposals.\\n\\n - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.\\n - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit\\nperiod.\\n - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting\\nperiod.\\n - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has\\npassed.\\n - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has\\nbeen rejected.\\n - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has\\nfailed.","in":"query","required":false,"schema":{"type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_DEPOSIT_PERIOD","PROPOSAL_STATUS_VOTING_PERIOD","PROPOSAL_STATUS_PASSED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_FAILED"],"default":"PROPOSAL_STATUS_UNSPECIFIED"}},{"name":"voter","description":"voter defines the voter address for the proposals.","in":"query","required":false,"schema":{"type":"string"}},{"name":"depositor","description":"depositor defines the deposit addresses from the proposals.","in":"query","required":false,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/gov/v1/proposals/{proposal_id}":{"get":{"summary":"Proposal queries proposal details based on ProposalID.","operationId":"GovV1Proposal","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"proposal":{"description":"proposal is the requested governance proposal.","type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id defines the unique id of the proposal."},"messages":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"description":"messages are the arbitrary messages to be executed if the proposal passes."},"status":{"description":"status defines the proposal status.","type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_DEPOSIT_PERIOD","PROPOSAL_STATUS_VOTING_PERIOD","PROPOSAL_STATUS_PASSED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_FAILED"],"default":"PROPOSAL_STATUS_UNSPECIFIED"},"final_tally_result":{"description":"final_tally_result is the final tally result of the proposal. When\\nquerying a proposal via gRPC, this field is not populated until the\\nproposal\'s voting period has ended.","type":"object","properties":{"yes_count":{"type":"string","description":"yes_count is the number of yes votes on a proposal.\\n\\noption 1"},"abstain_count":{"type":"string","description":"abstain_count is the number of abstain votes on a proposal.\\n\\noption 2"},"no_count":{"type":"string","description":"no_count is the number of no votes on a proposal.\\n\\noption 3"},"no_with_veto_count":{"type":"string","description":"no_with_veto_count is the number of no with veto votes on a proposal.\\n\\noption 4"},"option_one_count":{"type":"string","description":"option_one_count corresponds to the number of votes for option one (= yes_count for non multiple choice proposals)."},"option_two_count":{"type":"string","description":"option_two_count corresponds to the number of votes for option two (= abstain_count for non multiple choice\\nproposals)."},"option_three_count":{"type":"string","description":"option_three_count corresponds to the number of votes for option three (= no_count for non multiple choice\\nproposals)."},"option_four_count":{"type":"string","description":"option_four_count corresponds to the number of votes for option four (= no_with_veto_count for non multiple choice\\nproposals)."},"spam_count":{"type":"string","description":"spam_count is the number of spam votes on a proposal."}}},"submit_time":{"type":"string","format":"date-time","description":"submit_time is the time of proposal submission."},"deposit_end_time":{"type":"string","format":"date-time","description":"deposit_end_time is the end time for deposition."},"total_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"total_deposit is the total deposit on the proposal."},"voting_start_time":{"type":"string","format":"date-time","description":"voting_start_time is the starting time to vote on a proposal."},"voting_end_time":{"type":"string","format":"date-time","description":"voting_end_time is the end time of voting on a proposal."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the proposal.\\nthe recommended format of the metadata is to be found here:\\nhttps://docs.cosmos.network/v0.47/modules/gov#proposal-3"},"title":{"type":"string","title":"title is the title of the proposal"},"summary":{"type":"string","title":"summary is a short summary of the proposal"},"proposer":{"type":"string","title":"proposer is the address of the proposal sumbitter"},"expedited":{"type":"boolean","description":"Deprecated: Use ProposalType instead.","title":"expedited defines if the proposal is expedited"},"failed_reason":{"type":"string","title":"failed_reason defines the reason why the proposal failed"},"proposal_type":{"title":"proposal_type defines the type of the proposal","type":"string","enum":["PROPOSAL_TYPE_UNSPECIFIED","PROPOSAL_TYPE_STANDARD","PROPOSAL_TYPE_MULTIPLE_CHOICE","PROPOSAL_TYPE_OPTIMISTIC","PROPOSAL_TYPE_EXPEDITED"],"default":"PROPOSAL_TYPE_UNSPECIFIED","description":"ProposalType enumerates the valid proposal types.\\nAll proposal types are v1.Proposal which have different voting periods or tallying logic.\\n\\n - PROPOSAL_TYPE_UNSPECIFIED: PROPOSAL_TYPE_UNSPECIFIED defines no proposal type, which fallback to PROPOSAL_TYPE_STANDARD.\\n - PROPOSAL_TYPE_STANDARD: PROPOSAL_TYPE_STANDARD defines the type for a standard proposal.\\n - PROPOSAL_TYPE_MULTIPLE_CHOICE: PROPOSAL_TYPE_MULTIPLE_CHOICE defines the type for a multiple choice proposal.\\n - PROPOSAL_TYPE_OPTIMISTIC: PROPOSAL_TYPE_OPTIMISTIC defines the type for an optimistic proposal.\\n - PROPOSAL_TYPE_EXPEDITED: PROPOSAL_TYPE_EXPEDITED defines the type for an expedited proposal."}}}},"description":"QueryProposalResponse is the response type for the Query/Proposal RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_id","description":"proposal_id defines the unique id of the proposal.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}}],"tags":["Query"]}},"/cosmos/gov/v1/proposals/{proposal_id}/deposits":{"get":{"summary":"Deposits queries all deposits of a single proposal.","operationId":"GovV1Deposit","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"deposits":{"type":"array","items":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"depositor":{"type":"string","description":"depositor defines the deposit addresses from the proposals."},"amount":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"amount to be deposited by depositor."}},"description":"Deposit defines an amount deposited by an account address to an active\\nproposal."},"description":"deposits defines the requested deposits."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryDepositsResponse is the response type for the Query/Deposits RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_id","description":"proposal_id defines the unique id of the proposal.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/gov/v1/proposals/{proposal_id}/deposits/{depositor}":{"get":{"summary":"Deposit queries single deposit information based on proposalID, depositAddr.","operationId":"GovV1Deposit","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"deposit":{"description":"deposit defines the requested deposit.","type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"depositor":{"type":"string","description":"depositor defines the deposit addresses from the proposals."},"amount":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"amount to be deposited by depositor."}}}},"description":"QueryDepositResponse is the response type for the Query/Deposit RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_id","description":"proposal_id defines the unique id of the proposal.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}},{"name":"depositor","description":"depositor defines the deposit addresses from the proposals.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/gov/v1/proposals/{proposal_id}/tally":{"get":{"summary":"TallyResult queries the tally of a proposal vote.","operationId":"GovV1TallyResult","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"tally":{"description":"tally defines the requested tally.","type":"object","properties":{"yes_count":{"type":"string","description":"yes_count is the number of yes votes on a proposal.\\n\\noption 1"},"abstain_count":{"type":"string","description":"abstain_count is the number of abstain votes on a proposal.\\n\\noption 2"},"no_count":{"type":"string","description":"no_count is the number of no votes on a proposal.\\n\\noption 3"},"no_with_veto_count":{"type":"string","description":"no_with_veto_count is the number of no with veto votes on a proposal.\\n\\noption 4"},"option_one_count":{"type":"string","description":"option_one_count corresponds to the number of votes for option one (= yes_count for non multiple choice proposals)."},"option_two_count":{"type":"string","description":"option_two_count corresponds to the number of votes for option two (= abstain_count for non multiple choice\\nproposals)."},"option_three_count":{"type":"string","description":"option_three_count corresponds to the number of votes for option three (= no_count for non multiple choice\\nproposals)."},"option_four_count":{"type":"string","description":"option_four_count corresponds to the number of votes for option four (= no_with_veto_count for non multiple choice\\nproposals)."},"spam_count":{"type":"string","description":"spam_count is the number of spam votes on a proposal."}}}},"description":"QueryTallyResultResponse is the response type for the Query/Tally RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_id","description":"proposal_id defines the unique id of the proposal.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}}],"tags":["Query"]}},"/cosmos/gov/v1/proposals/{proposal_id}/vote_options":{"get":{"summary":"ProposalVoteOptions queries the valid voting options for a proposal.","operationId":"ProposalVoteOptions","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"vote_options":{"description":"vote_options defines the valid voting options for a proposal.","type":"object","properties":{"option_one":{"type":"string","title":"option_one is the first option of the proposal"},"option_two":{"type":"string","title":"option_two is the second option of the proposal"},"option_three":{"type":"string","title":"option_three is the third option of the proposal"},"option_four":{"type":"string","title":"option_four is the fourth option of the proposal"},"option_spam":{"type":"string","description":"option_spam is always present for all proposals."}}}},"description":"QueryProposalVoteOptionsResponse is the response type for the Query/ProposalVoteOptions RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_id","description":"proposal_id defines the unique id of the proposal.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}}],"tags":["Query"]}},"/cosmos/gov/v1/proposals/{proposal_id}/votes":{"get":{"summary":"Votes queries votes of a given proposal.","operationId":"GovV1Votes","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"votes":{"type":"array","items":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"voter":{"type":"string","description":"voter is the voter address of the proposal."},"options":{"type":"array","items":{"type":"object","properties":{"option":{"description":"option defines the valid vote options, it must not contain duplicate vote options.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ONE","VOTE_OPTION_ABSTAIN","VOTE_OPTION_TWO","VOTE_OPTION_NO","VOTE_OPTION_THREE","VOTE_OPTION_NO_WITH_VETO","VOTE_OPTION_FOUR","VOTE_OPTION_SPAM"],"default":"VOTE_OPTION_UNSPECIFIED"},"weight":{"type":"string","description":"weight is the vote weight associated with the vote option."}},"description":"WeightedVoteOption defines a unit of vote for vote split."},"description":"options is the weighted vote options."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the vote.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#vote-5"}},"description":"Vote defines a vote on a governance proposal.\\nA Vote consists of a proposal ID, the voter, and the vote option."},"description":"votes defines the queried votes."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryVotesResponse is the response type for the Query/Votes RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_id","description":"proposal_id defines the unique id of the proposal.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/gov/v1/proposals/{proposal_id}/votes/{voter}":{"get":{"summary":"Vote queries voted information based on proposalID, voterAddr.","operationId":"GovV1Vote","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"vote":{"description":"vote defines the queried vote.","type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"voter":{"type":"string","description":"voter is the voter address of the proposal."},"options":{"type":"array","items":{"type":"object","properties":{"option":{"description":"option defines the valid vote options, it must not contain duplicate vote options.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ONE","VOTE_OPTION_ABSTAIN","VOTE_OPTION_TWO","VOTE_OPTION_NO","VOTE_OPTION_THREE","VOTE_OPTION_NO_WITH_VETO","VOTE_OPTION_FOUR","VOTE_OPTION_SPAM"],"default":"VOTE_OPTION_UNSPECIFIED"},"weight":{"type":"string","description":"weight is the vote weight associated with the vote option."}},"description":"WeightedVoteOption defines a unit of vote for vote split."},"description":"options is the weighted vote options."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the vote.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#vote-5"}}}},"description":"QueryVoteResponse is the response type for the Query/Vote RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_id","description":"proposal_id defines the unique id of the proposal.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}},{"name":"voter","description":"voter defines the voter address for the proposals.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/mint/v1beta1/annual_provisions":{"get":{"summary":"AnnualProvisions current minting annual provisions value.","operationId":"AnnualProvisions","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"annual_provisions":{"type":"string","format":"byte","description":"annual_provisions is the current minting annual provisions value."}},"description":"QueryAnnualProvisionsResponse is the response type for the\\nQuery/AnnualProvisions RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"tags":["Query"]}},"/cosmos/mint/v1beta1/inflation":{"get":{"summary":"Inflation returns the current minting inflation value.","operationId":"Inflation","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"inflation":{"type":"string","format":"byte","description":"inflation is the current minting inflation value."}},"description":"QueryInflationResponse is the response type for the Query/Inflation RPC\\nmethod."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"tags":["Query"]}},"/cosmos/mint/v1beta1/params":{"get":{"summary":"Params returns the total set of minting parameters.","operationId":"MintParams","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"params":{"description":"params defines the parameters of the module.","type":"object","properties":{"mint_denom":{"type":"string","title":"type of coin to mint"},"inflation_rate_change":{"type":"string","title":"maximum annual change in inflation rate"},"inflation_max":{"type":"string","title":"maximum inflation rate"},"inflation_min":{"type":"string","title":"minimum inflation rate"},"goal_bonded":{"type":"string","title":"goal of percent bonded atoms"},"blocks_per_year":{"type":"string","format":"uint64","title":"expected blocks per year"},"max_supply":{"type":"string","title":"maximum supply for the token"}}}},"description":"QueryParamsResponse is the response type for the Query/Params RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"tags":["Query"]}},"/cosmos/slashing/v1beta1/params":{"get":{"summary":"Params queries the parameters of slashing module","operationId":"SlashingParams","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"params":{"type":"object","properties":{"signed_blocks_window":{"type":"string","format":"int64"},"min_signed_per_window":{"type":"string","format":"byte"},"downtime_jail_duration":{"type":"string"},"slash_fraction_double_sign":{"type":"string","format":"byte"},"slash_fraction_downtime":{"type":"string","format":"byte"}},"description":"Params represents the parameters used for by the slashing module."}},"title":"QueryParamsResponse is the response type for the Query/Params RPC method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"tags":["Query"]}},"/cosmos/slashing/v1beta1/signing_infos":{"get":{"summary":"SigningInfos queries signing info of all validators","operationId":"SigningInfos","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"info":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string"},"start_height":{"type":"string","format":"int64","title":"Height at which validator was first a candidate OR was un-jailed"},"index_offset":{"type":"string","format":"int64","description":"DEPRECATED: Index which is incremented every time a validator is bonded in a block and\\n_may_ have signed a pre-commit or not. This in conjunction with the\\nsigned_blocks_window param determines the index in the missed block bitmap."},"jailed_until":{"type":"string","format":"date-time","description":"Timestamp until which the validator is jailed due to liveness downtime."},"tombstoned":{"type":"boolean","description":"Whether or not a validator has been tombstoned (killed out of validator\\nset). It is set once the validator commits an equivocation or for any other\\nconfigured misbehavior."},"missed_blocks_counter":{"type":"string","format":"int64","description":"A counter of missed (unsigned) blocks. It is used to avoid unnecessary\\nreads in the missed block bitmap."}},"description":"ValidatorSigningInfo defines a validator\'s signing info for monitoring their\\nliveness activity."},"title":"info is the signing info of all validators"},"pagination":{"type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}},"description":"PageResponse is to be embedded in gRPC response messages where the\\ncorresponding request message has used PageRequest.\\n\\n message SomeResponse {\\n         repeated Bar results = 1;\\n         PageResponse page = 2;\\n }"}},"title":"QuerySigningInfosResponse is the response type for the Query/SigningInfos RPC\\nmethod"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/slashing/v1beta1/signing_infos/{cons_address}":{"get":{"summary":"SigningInfo queries the signing info of given cons address","operationId":"SigningInfo","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"val_signing_info":{"title":"val_signing_info is the signing info of requested val cons address","type":"object","properties":{"address":{"type":"string"},"start_height":{"type":"string","format":"int64","title":"Height at which validator was first a candidate OR was un-jailed"},"index_offset":{"type":"string","format":"int64","description":"DEPRECATED: Index which is incremented every time a validator is bonded in a block and\\n_may_ have signed a pre-commit or not. This in conjunction with the\\nsigned_blocks_window param determines the index in the missed block bitmap."},"jailed_until":{"type":"string","format":"date-time","description":"Timestamp until which the validator is jailed due to liveness downtime."},"tombstoned":{"type":"boolean","description":"Whether or not a validator has been tombstoned (killed out of validator\\nset). It is set once the validator commits an equivocation or for any other\\nconfigured misbehavior."},"missed_blocks_counter":{"type":"string","format":"int64","description":"A counter of missed (unsigned) blocks. It is used to avoid unnecessary\\nreads in the missed block bitmap."}},"description":"ValidatorSigningInfo defines a validator\'s signing info for monitoring their\\nliveness activity."}},"title":"QuerySigningInfoResponse is the response type for the Query/SigningInfo RPC\\nmethod"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"cons_address","description":"cons_address is the address to query signing info of","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/staking/v1beta1/delegations/{delegator_addr}":{"get":{"summary":"DelegatorDelegations queries all delegations of a given delegator address.","description":"When called from another module, this query might consume a high amount of\\ngas if the pagination field is incorrectly set.","operationId":"DelegatorDelegations","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"delegation_responses":{"type":"array","items":{"type":"object","properties":{"delegation":{"type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the encoded address of the delegator."},"validator_address":{"type":"string","description":"validator_address is the encoded address of the validator."},"shares":{"type":"string","description":"shares define the delegation shares received."}},"description":"Delegation represents the bond with tokens held by an account. It is\\nowned by one delegator, and is associated with the voting power of one\\nvalidator."},"balance":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."}},"description":"DelegationResponse is equivalent to Delegation except that it contains a\\nbalance in addition to shares which is more suitable for client responses."},"description":"delegation_responses defines all the delegations\' info of a delegator."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryDelegatorDelegationsResponse is response type for the\\nQuery/DelegatorDelegations RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"delegator_addr","description":"delegator_addr defines the delegator address to query for.","in":"path","required":true,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations":{"get":{"summary":"Redelegations queries redelegations of given address.","description":"When called from another module, this query might consume a high amount of\\ngas if the pagination field is incorrectly set.","operationId":"Redelegations","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"redelegation_responses":{"type":"array","items":{"type":"object","properties":{"redelegation":{"type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the bech32-encoded address of the delegator."},"validator_src_address":{"type":"string","description":"validator_src_address is the validator redelegation source operator address."},"validator_dst_address":{"type":"string","description":"validator_dst_address is the validator redelegation destination operator address."},"entries":{"type":"array","items":{"type":"object","properties":{"creation_height":{"type":"string","format":"int64","description":"creation_height  defines the height which the redelegation took place."},"completion_time":{"type":"string","format":"date-time","description":"completion_time defines the unix time for redelegation completion."},"initial_balance":{"type":"string","description":"initial_balance defines the initial balance when redelegation started."},"shares_dst":{"type":"string","description":"shares_dst is the amount of destination-validator shares created by redelegation."},"unbonding_id":{"type":"string","format":"uint64","title":"Incrementing id that uniquely identifies this entry"},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"Strictly positive if this entry\'s unbonding has been stopped by external modules"}},"description":"RedelegationEntry defines a redelegation object with relevant metadata."},"description":"entries are the redelegation entries.\\n\\nredelegation entries"}},"description":"Redelegation contains the list of a particular delegator\'s redelegating bonds\\nfrom a particular source validator to a particular destination validator."},"entries":{"type":"array","items":{"type":"object","properties":{"redelegation_entry":{"type":"object","properties":{"creation_height":{"type":"string","format":"int64","description":"creation_height  defines the height which the redelegation took place."},"completion_time":{"type":"string","format":"date-time","description":"completion_time defines the unix time for redelegation completion."},"initial_balance":{"type":"string","description":"initial_balance defines the initial balance when redelegation started."},"shares_dst":{"type":"string","description":"shares_dst is the amount of destination-validator shares created by redelegation."},"unbonding_id":{"type":"string","format":"uint64","title":"Incrementing id that uniquely identifies this entry"},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"Strictly positive if this entry\'s unbonding has been stopped by external modules"}},"description":"RedelegationEntry defines a redelegation object with relevant metadata."},"balance":{"type":"string"}},"description":"RedelegationEntryResponse is equivalent to a RedelegationEntry except that it\\ncontains a balance in addition to shares which is more suitable for client\\nresponses."}}},"description":"RedelegationResponse is equivalent to a Redelegation except that its entries\\ncontain a balance in addition to shares which is more suitable for client\\nresponses."}},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryRedelegationsResponse is response type for the Query/Redelegations RPC\\nmethod."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"delegator_addr","description":"delegator_addr defines the delegator address to query for.","in":"path","required":true,"schema":{"type":"string"}},{"name":"src_validator_addr","description":"src_validator_addr defines the validator address to redelegate from.","in":"query","required":false,"schema":{"type":"string"}},{"name":"dst_validator_addr","description":"dst_validator_addr defines the validator address to redelegate to.","in":"query","required":false,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations":{"get":{"summary":"DelegatorUnbondingDelegations queries all unbonding delegations of a given\\ndelegator address.","description":"When called from another module, this query might consume a high amount of\\ngas if the pagination field is incorrectly set.","operationId":"DelegatorUnbondingDelegations","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"unbonding_responses":{"type":"array","items":{"type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the encoded address of the delegator."},"validator_address":{"type":"string","description":"validator_address is the encoded address of the validator."},"entries":{"type":"array","items":{"type":"object","properties":{"creation_height":{"type":"string","format":"int64","description":"creation_height is the height which the unbonding took place."},"completion_time":{"type":"string","format":"date-time","description":"completion_time is the unix time for unbonding completion."},"initial_balance":{"type":"string","description":"initial_balance defines the tokens initially scheduled to receive at completion."},"balance":{"type":"string","description":"balance defines the tokens to receive at completion."},"unbonding_id":{"type":"string","format":"uint64","title":"Incrementing id that uniquely identifies this entry"},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"Strictly positive if this entry\'s unbonding has been stopped by external modules"}},"description":"UnbondingDelegationEntry defines an unbonding object with relevant metadata."},"description":"entries are the unbonding delegation entries.\\n\\nunbonding delegation entries"}},"description":"UnbondingDelegation stores all of a single delegator\'s unbonding bonds\\nfor a single validator in an time-ordered list."}},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryUnbondingDelegatorDelegationsResponse is response type for the\\nQuery/UnbondingDelegatorDelegations RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"delegator_addr","description":"delegator_addr defines the delegator address to query for.","in":"path","required":true,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators":{"get":{"summary":"DelegatorValidators queries all validators info for given delegator\\naddress.","description":"When called from another module, this query might consume a high amount of\\ngas if the pagination field is incorrectly set.","operationId":"StakingDelegatorValidators","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"operator_address":{"type":"string","description":"operator_address defines the address of the validator\'s operator; bech encoded in JSON."},"consensus_pubkey":{"description":"consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"jailed":{"type":"boolean","description":"jailed defined whether the validator has been jailed from bonded status or not."},"status":{"description":"status is the validator status (bonded/unbonding/unbonded).","type":"string","enum":["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"],"default":"BOND_STATUS_UNSPECIFIED"},"tokens":{"type":"string","description":"tokens define the delegated tokens (incl. self-delegation)."},"delegator_shares":{"type":"string","description":"delegator_shares defines total shares issued to a validator\'s delegators."},"description":{"description":"description defines the description terms for the validator.","type":"object","properties":{"moniker":{"type":"string","description":"moniker defines a human-readable name for the validator."},"identity":{"type":"string","description":"identity defines an optional identity signature (ex. UPort or Keybase)."},"website":{"type":"string","description":"website defines an optional website link."},"security_contact":{"type":"string","description":"security_contact defines an optional email for security contact."},"details":{"type":"string","description":"details define other optional details."},"metadata":{"description":"metadata defines extra information about the validator.","type":"object","properties":{"profile_pic_uri":{"type":"string","description":"profile_pic_uri defines a link to the validator profile picture."},"social_handle_uris":{"type":"array","items":{"type":"string"},"description":"social_handle_uris defines a string array of uris to the validator\'s social handles."}}}}},"unbonding_height":{"type":"string","format":"int64","description":"unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."},"unbonding_time":{"type":"string","format":"date-time","description":"unbonding_time defines, if unbonding, the min time for the validator to complete unbonding."},"commission":{"description":"commission defines the commission parameters.","type":"object","properties":{"commission_rates":{"description":"commission_rates defines the initial commission rates to be used for creating a validator.","type":"object","properties":{"rate":{"type":"string","description":"rate is the commission rate charged to delegators, as a fraction."},"max_rate":{"type":"string","description":"max_rate defines the maximum commission rate which validator can ever charge, as a fraction."},"max_change_rate":{"type":"string","description":"max_change_rate defines the maximum daily increase of the validator commission, as a fraction."}}},"update_time":{"type":"string","format":"date-time","description":"update_time is the last time the commission rate was changed."}}},"min_self_delegation":{"type":"string","description":"min_self_delegation is the validator\'s self declared minimum self delegation."},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"strictly positive if this validator\'s unbonding has been stopped by external modules"},"unbonding_ids":{"type":"array","items":{"type":"string","format":"uint64"},"title":"list of unbonding ids, each uniquely identifying an unbonding of this validator"}},"description":"Validator defines a validator, together with the total amount of the\\nValidator\'s bond shares and their exchange rate to coins. Slashing results in\\na decrease in the exchange rate, allowing correct calculation of future\\nundelegations without iterating over delegators. When coins are delegated to\\nthis validator, the validator is credited with a delegation whose number of\\nbond shares is based on the amount of coins delegated divided by the current\\nexchange rate. Voting power can be calculated as total bonded shares\\nmultiplied by exchange rate."},"description":"validators defines the validators\' info of a delegator."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryDelegatorValidatorsResponse is response type for the\\nQuery/DelegatorValidators RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"delegator_addr","description":"delegator_addr defines the delegator address to query for.","in":"path","required":true,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}":{"get":{"summary":"DelegatorValidator queries validator info for given delegator validator\\npair.","operationId":"DelegatorValidator","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"validator":{"description":"validator defines the validator info.","type":"object","properties":{"operator_address":{"type":"string","description":"operator_address defines the address of the validator\'s operator; bech encoded in JSON."},"consensus_pubkey":{"description":"consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"jailed":{"type":"boolean","description":"jailed defined whether the validator has been jailed from bonded status or not."},"status":{"description":"status is the validator status (bonded/unbonding/unbonded).","type":"string","enum":["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"],"default":"BOND_STATUS_UNSPECIFIED"},"tokens":{"type":"string","description":"tokens define the delegated tokens (incl. self-delegation)."},"delegator_shares":{"type":"string","description":"delegator_shares defines total shares issued to a validator\'s delegators."},"description":{"description":"description defines the description terms for the validator.","type":"object","properties":{"moniker":{"type":"string","description":"moniker defines a human-readable name for the validator."},"identity":{"type":"string","description":"identity defines an optional identity signature (ex. UPort or Keybase)."},"website":{"type":"string","description":"website defines an optional website link."},"security_contact":{"type":"string","description":"security_contact defines an optional email for security contact."},"details":{"type":"string","description":"details define other optional details."},"metadata":{"description":"metadata defines extra information about the validator.","type":"object","properties":{"profile_pic_uri":{"type":"string","description":"profile_pic_uri defines a link to the validator profile picture."},"social_handle_uris":{"type":"array","items":{"type":"string"},"description":"social_handle_uris defines a string array of uris to the validator\'s social handles."}}}}},"unbonding_height":{"type":"string","format":"int64","description":"unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."},"unbonding_time":{"type":"string","format":"date-time","description":"unbonding_time defines, if unbonding, the min time for the validator to complete unbonding."},"commission":{"description":"commission defines the commission parameters.","type":"object","properties":{"commission_rates":{"description":"commission_rates defines the initial commission rates to be used for creating a validator.","type":"object","properties":{"rate":{"type":"string","description":"rate is the commission rate charged to delegators, as a fraction."},"max_rate":{"type":"string","description":"max_rate defines the maximum commission rate which validator can ever charge, as a fraction."},"max_change_rate":{"type":"string","description":"max_change_rate defines the maximum daily increase of the validator commission, as a fraction."}}},"update_time":{"type":"string","format":"date-time","description":"update_time is the last time the commission rate was changed."}}},"min_self_delegation":{"type":"string","description":"min_self_delegation is the validator\'s self declared minimum self delegation."},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"strictly positive if this validator\'s unbonding has been stopped by external modules"},"unbonding_ids":{"type":"array","items":{"type":"string","format":"uint64"},"title":"list of unbonding ids, each uniquely identifying an unbonding of this validator"}}}},"description":"QueryDelegatorValidatorResponse response type for the\\nQuery/DelegatorValidator RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"delegator_addr","description":"delegator_addr defines the delegator address to query for.","in":"path","required":true,"schema":{"type":"string"}},{"name":"validator_addr","description":"validator_addr defines the validator address to query for.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/staking/v1beta1/historical_info/{height}":{"get":{"summary":"HistoricalInfo queries the historical info for given height.","operationId":"HistoricalInfo","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"hist":{"description":"hist defines the historical info at the given height.","type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"title":"prev block info","type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"valset":{"type":"array","items":{"type":"object","properties":{"operator_address":{"type":"string","description":"operator_address defines the address of the validator\'s operator; bech encoded in JSON."},"consensus_pubkey":{"description":"consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"jailed":{"type":"boolean","description":"jailed defined whether the validator has been jailed from bonded status or not."},"status":{"description":"status is the validator status (bonded/unbonding/unbonded).","type":"string","enum":["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"],"default":"BOND_STATUS_UNSPECIFIED"},"tokens":{"type":"string","description":"tokens define the delegated tokens (incl. self-delegation)."},"delegator_shares":{"type":"string","description":"delegator_shares defines total shares issued to a validator\'s delegators."},"description":{"description":"description defines the description terms for the validator.","type":"object","properties":{"moniker":{"type":"string","description":"moniker defines a human-readable name for the validator."},"identity":{"type":"string","description":"identity defines an optional identity signature (ex. UPort or Keybase)."},"website":{"type":"string","description":"website defines an optional website link."},"security_contact":{"type":"string","description":"security_contact defines an optional email for security contact."},"details":{"type":"string","description":"details define other optional details."},"metadata":{"description":"metadata defines extra information about the validator.","type":"object","properties":{"profile_pic_uri":{"type":"string","description":"profile_pic_uri defines a link to the validator profile picture."},"social_handle_uris":{"type":"array","items":{"type":"string"},"description":"social_handle_uris defines a string array of uris to the validator\'s social handles."}}}}},"unbonding_height":{"type":"string","format":"int64","description":"unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."},"unbonding_time":{"type":"string","format":"date-time","description":"unbonding_time defines, if unbonding, the min time for the validator to complete unbonding."},"commission":{"description":"commission defines the commission parameters.","type":"object","properties":{"commission_rates":{"description":"commission_rates defines the initial commission rates to be used for creating a validator.","type":"object","properties":{"rate":{"type":"string","description":"rate is the commission rate charged to delegators, as a fraction."},"max_rate":{"type":"string","description":"max_rate defines the maximum commission rate which validator can ever charge, as a fraction."},"max_change_rate":{"type":"string","description":"max_change_rate defines the maximum daily increase of the validator commission, as a fraction."}}},"update_time":{"type":"string","format":"date-time","description":"update_time is the last time the commission rate was changed."}}},"min_self_delegation":{"type":"string","description":"min_self_delegation is the validator\'s self declared minimum self delegation."},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"strictly positive if this validator\'s unbonding has been stopped by external modules"},"unbonding_ids":{"type":"array","items":{"type":"string","format":"uint64"},"title":"list of unbonding ids, each uniquely identifying an unbonding of this validator"}},"description":"Validator defines a validator, together with the total amount of the\\nValidator\'s bond shares and their exchange rate to coins. Slashing results in\\na decrease in the exchange rate, allowing correct calculation of future\\nundelegations without iterating over delegators. When coins are delegated to\\nthis validator, the validator is credited with a delegation whose number of\\nbond shares is based on the amount of coins delegated divided by the current\\nexchange rate. Voting power can be calculated as total bonded shares\\nmultiplied by exchange rate."}}}}},"description":"QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC\\nmethod."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"height","description":"height defines at which height to query the historical info.","in":"path","required":true,"schema":{"type":"string","format":"int64"}}],"tags":["Query"]}},"/cosmos/staking/v1beta1/params":{"get":{"summary":"Parameters queries the staking parameters.","operationId":"StakingParams","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"params":{"description":"params holds all the parameters of this module.","type":"object","properties":{"unbonding_time":{"type":"string","description":"unbonding_time is the time duration of unbonding."},"max_validators":{"type":"integer","format":"int64","description":"max_validators is the maximum number of validators."},"max_entries":{"type":"integer","format":"int64","description":"max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio)."},"historical_entries":{"type":"integer","format":"int64","description":"historical_entries is the number of historical entries to persist."},"bond_denom":{"type":"string","description":"bond_denom defines the bondable coin denomination."},"min_commission_rate":{"type":"string","title":"min_commission_rate is the chain-wide minimum commission rate that a validator can charge their delegators"},"key_rotation_fee":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto.","title":"key_rotation_fee is fee to be spent when rotating validator\'s key\\n(either consensus pubkey or operator key)"}}}},"description":"QueryParamsResponse is response type for the Query/Params RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"tags":["Query"]}},"/cosmos/staking/v1beta1/pool":{"get":{"summary":"Pool queries the pool info.","operationId":"Pool","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"pool":{"description":"pool defines the pool info.","type":"object","properties":{"not_bonded_tokens":{"type":"string"},"bonded_tokens":{"type":"string"}}}},"description":"QueryPoolResponse is response type for the Query/Pool RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"tags":["Query"]}},"/cosmos/staking/v1beta1/validators":{"get":{"summary":"Validators queries all validators that match the given status.","description":"When called from another module, this query might consume a high amount of\\ngas if the pagination field is incorrectly set.","operationId":"Validators","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"operator_address":{"type":"string","description":"operator_address defines the address of the validator\'s operator; bech encoded in JSON."},"consensus_pubkey":{"description":"consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"jailed":{"type":"boolean","description":"jailed defined whether the validator has been jailed from bonded status or not."},"status":{"description":"status is the validator status (bonded/unbonding/unbonded).","type":"string","enum":["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"],"default":"BOND_STATUS_UNSPECIFIED"},"tokens":{"type":"string","description":"tokens define the delegated tokens (incl. self-delegation)."},"delegator_shares":{"type":"string","description":"delegator_shares defines total shares issued to a validator\'s delegators."},"description":{"description":"description defines the description terms for the validator.","type":"object","properties":{"moniker":{"type":"string","description":"moniker defines a human-readable name for the validator."},"identity":{"type":"string","description":"identity defines an optional identity signature (ex. UPort or Keybase)."},"website":{"type":"string","description":"website defines an optional website link."},"security_contact":{"type":"string","description":"security_contact defines an optional email for security contact."},"details":{"type":"string","description":"details define other optional details."},"metadata":{"description":"metadata defines extra information about the validator.","type":"object","properties":{"profile_pic_uri":{"type":"string","description":"profile_pic_uri defines a link to the validator profile picture."},"social_handle_uris":{"type":"array","items":{"type":"string"},"description":"social_handle_uris defines a string array of uris to the validator\'s social handles."}}}}},"unbonding_height":{"type":"string","format":"int64","description":"unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."},"unbonding_time":{"type":"string","format":"date-time","description":"unbonding_time defines, if unbonding, the min time for the validator to complete unbonding."},"commission":{"description":"commission defines the commission parameters.","type":"object","properties":{"commission_rates":{"description":"commission_rates defines the initial commission rates to be used for creating a validator.","type":"object","properties":{"rate":{"type":"string","description":"rate is the commission rate charged to delegators, as a fraction."},"max_rate":{"type":"string","description":"max_rate defines the maximum commission rate which validator can ever charge, as a fraction."},"max_change_rate":{"type":"string","description":"max_change_rate defines the maximum daily increase of the validator commission, as a fraction."}}},"update_time":{"type":"string","format":"date-time","description":"update_time is the last time the commission rate was changed."}}},"min_self_delegation":{"type":"string","description":"min_self_delegation is the validator\'s self declared minimum self delegation."},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"strictly positive if this validator\'s unbonding has been stopped by external modules"},"unbonding_ids":{"type":"array","items":{"type":"string","format":"uint64"},"title":"list of unbonding ids, each uniquely identifying an unbonding of this validator"}},"description":"Validator defines a validator, together with the total amount of the\\nValidator\'s bond shares and their exchange rate to coins. Slashing results in\\na decrease in the exchange rate, allowing correct calculation of future\\nundelegations without iterating over delegators. When coins are delegated to\\nthis validator, the validator is credited with a delegation whose number of\\nbond shares is based on the amount of coins delegated divided by the current\\nexchange rate. Voting power can be calculated as total bonded shares\\nmultiplied by exchange rate."}},"validator_info":{"type":"array","items":{"type":"object","properties":{"consensus_address":{"type":"string","description":"consensus_address is the consensus address of the validator."}},"description":"ValidatorInfo contains the validator\'s address and public key."},"description":"validator_info contains additional information for each validator.\\nThe order of the elements in this list corresponds to the order of the elements in the validators list.\\nFor example, if you want the ValidatorInfo for the third validator in the validators list,\\nyou should look at the third element in the validator_info list."},"pagination":{"type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}},"description":"PageResponse is to be embedded in gRPC response messages where the\\ncorresponding request message has used PageRequest.\\n\\n message SomeResponse {\\n         repeated Bar results = 1;\\n         PageResponse page = 2;\\n }"}},"title":"QueryValidatorsResponse is response type for the Query/Validators RPC method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"status","description":"status enables to query for validators matching a given status.","in":"query","required":false,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/staking/v1beta1/validators/{validator_addr}":{"get":{"summary":"Validator queries validator info for given validator address.","operationId":"Validator","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"validator":{"description":"validator defines the validator info.","type":"object","properties":{"operator_address":{"type":"string","description":"operator_address defines the address of the validator\'s operator; bech encoded in JSON."},"consensus_pubkey":{"description":"consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"jailed":{"type":"boolean","description":"jailed defined whether the validator has been jailed from bonded status or not."},"status":{"description":"status is the validator status (bonded/unbonding/unbonded).","type":"string","enum":["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"],"default":"BOND_STATUS_UNSPECIFIED"},"tokens":{"type":"string","description":"tokens define the delegated tokens (incl. self-delegation)."},"delegator_shares":{"type":"string","description":"delegator_shares defines total shares issued to a validator\'s delegators."},"description":{"description":"description defines the description terms for the validator.","type":"object","properties":{"moniker":{"type":"string","description":"moniker defines a human-readable name for the validator."},"identity":{"type":"string","description":"identity defines an optional identity signature (ex. UPort or Keybase)."},"website":{"type":"string","description":"website defines an optional website link."},"security_contact":{"type":"string","description":"security_contact defines an optional email for security contact."},"details":{"type":"string","description":"details define other optional details."},"metadata":{"description":"metadata defines extra information about the validator.","type":"object","properties":{"profile_pic_uri":{"type":"string","description":"profile_pic_uri defines a link to the validator profile picture."},"social_handle_uris":{"type":"array","items":{"type":"string"},"description":"social_handle_uris defines a string array of uris to the validator\'s social handles."}}}}},"unbonding_height":{"type":"string","format":"int64","description":"unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."},"unbonding_time":{"type":"string","format":"date-time","description":"unbonding_time defines, if unbonding, the min time for the validator to complete unbonding."},"commission":{"description":"commission defines the commission parameters.","type":"object","properties":{"commission_rates":{"description":"commission_rates defines the initial commission rates to be used for creating a validator.","type":"object","properties":{"rate":{"type":"string","description":"rate is the commission rate charged to delegators, as a fraction."},"max_rate":{"type":"string","description":"max_rate defines the maximum commission rate which validator can ever charge, as a fraction."},"max_change_rate":{"type":"string","description":"max_change_rate defines the maximum daily increase of the validator commission, as a fraction."}}},"update_time":{"type":"string","format":"date-time","description":"update_time is the last time the commission rate was changed."}}},"min_self_delegation":{"type":"string","description":"min_self_delegation is the validator\'s self declared minimum self delegation."},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"strictly positive if this validator\'s unbonding has been stopped by external modules"},"unbonding_ids":{"type":"array","items":{"type":"string","format":"uint64"},"title":"list of unbonding ids, each uniquely identifying an unbonding of this validator"}}}},"title":"QueryValidatorResponse is response type for the Query/Validator RPC method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"validator_addr","description":"validator_addr defines the validator address to query for.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/staking/v1beta1/validators/{validator_addr}/delegations":{"get":{"summary":"ValidatorDelegations queries delegate info for given validator.","description":"When called from another module, this query might consume a high amount of\\ngas if the pagination field is incorrectly set.","operationId":"ValidatorDelegations","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"delegation_responses":{"type":"array","items":{"type":"object","properties":{"delegation":{"type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the encoded address of the delegator."},"validator_address":{"type":"string","description":"validator_address is the encoded address of the validator."},"shares":{"type":"string","description":"shares define the delegation shares received."}},"description":"Delegation represents the bond with tokens held by an account. It is\\nowned by one delegator, and is associated with the voting power of one\\nvalidator."},"balance":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."}},"description":"DelegationResponse is equivalent to Delegation except that it contains a\\nbalance in addition to shares which is more suitable for client responses."}},"pagination":{"type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}},"description":"PageResponse is to be embedded in gRPC response messages where the\\ncorresponding request message has used PageRequest.\\n\\n message SomeResponse {\\n         repeated Bar results = 1;\\n         PageResponse page = 2;\\n }"}},"title":"QueryValidatorDelegationsResponse is response type for the\\nQuery/ValidatorDelegations RPC method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"validator_addr","description":"validator_addr defines the validator address to query for.","in":"path","required":true,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}":{"get":{"summary":"Delegation queries delegate info for given validator delegator pair.","operationId":"Delegation","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"delegation_response":{"description":"delegation_responses defines the delegation info of a delegation.","type":"object","properties":{"delegation":{"type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the encoded address of the delegator."},"validator_address":{"type":"string","description":"validator_address is the encoded address of the validator."},"shares":{"type":"string","description":"shares define the delegation shares received."}},"description":"Delegation represents the bond with tokens held by an account. It is\\nowned by one delegator, and is associated with the voting power of one\\nvalidator."},"balance":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."}}}},"description":"QueryDelegationResponse is response type for the Query/Delegation RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"validator_addr","description":"validator_addr defines the validator address to query for.","in":"path","required":true,"schema":{"type":"string"}},{"name":"delegator_addr","description":"delegator_addr defines the delegator address to query for.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation":{"get":{"summary":"UnbondingDelegation queries unbonding info for given validator delegator\\npair.","operationId":"UnbondingDelegation","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"unbond":{"description":"unbond defines the unbonding information of a delegation.","type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the encoded address of the delegator."},"validator_address":{"type":"string","description":"validator_address is the encoded address of the validator."},"entries":{"type":"array","items":{"type":"object","properties":{"creation_height":{"type":"string","format":"int64","description":"creation_height is the height which the unbonding took place."},"completion_time":{"type":"string","format":"date-time","description":"completion_time is the unix time for unbonding completion."},"initial_balance":{"type":"string","description":"initial_balance defines the tokens initially scheduled to receive at completion."},"balance":{"type":"string","description":"balance defines the tokens to receive at completion."},"unbonding_id":{"type":"string","format":"uint64","title":"Incrementing id that uniquely identifies this entry"},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"Strictly positive if this entry\'s unbonding has been stopped by external modules"}},"description":"UnbondingDelegationEntry defines an unbonding object with relevant metadata."},"description":"entries are the unbonding delegation entries.\\n\\nunbonding delegation entries"}}}},"description":"QueryDelegationResponse is response type for the Query/UnbondingDelegation\\nRPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"validator_addr","description":"validator_addr defines the validator address to query for.","in":"path","required":true,"schema":{"type":"string"}},{"name":"delegator_addr","description":"delegator_addr defines the delegator address to query for.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations":{"get":{"summary":"ValidatorUnbondingDelegations queries unbonding delegations of a validator.","description":"When called from another module, this query might consume a high amount of\\ngas if the pagination field is incorrectly set.","operationId":"ValidatorUnbondingDelegations","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"unbonding_responses":{"type":"array","items":{"type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the encoded address of the delegator."},"validator_address":{"type":"string","description":"validator_address is the encoded address of the validator."},"entries":{"type":"array","items":{"type":"object","properties":{"creation_height":{"type":"string","format":"int64","description":"creation_height is the height which the unbonding took place."},"completion_time":{"type":"string","format":"date-time","description":"completion_time is the unix time for unbonding completion."},"initial_balance":{"type":"string","description":"initial_balance defines the tokens initially scheduled to receive at completion."},"balance":{"type":"string","description":"balance defines the tokens to receive at completion."},"unbonding_id":{"type":"string","format":"uint64","title":"Incrementing id that uniquely identifies this entry"},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"Strictly positive if this entry\'s unbonding has been stopped by external modules"}},"description":"UnbondingDelegationEntry defines an unbonding object with relevant metadata."},"description":"entries are the unbonding delegation entries.\\n\\nunbonding delegation entries"}},"description":"UnbondingDelegation stores all of a single delegator\'s unbonding bonds\\nfor a single validator in an time-ordered list."}},"pagination":{"type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}},"description":"PageResponse is to be embedded in gRPC response messages where the\\ncorresponding request message has used PageRequest.\\n\\n message SomeResponse {\\n         repeated Bar results = 1;\\n         PageResponse page = 2;\\n }"}},"description":"QueryValidatorUnbondingDelegationsResponse is response type for the\\nQuery/ValidatorUnbondingDelegations RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"validator_addr","description":"validator_addr defines the validator address to query for.","in":"path","required":true,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/tx/v1beta1/decode":{"post":{"summary":"TxDecode decodes the transaction.","operationId":"TxDecode","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/cosmos.tx.v1beta1.TxDecodeResponse"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"tx_bytes":{"type":"string","format":"byte","description":"tx_bytes is the raw transaction."}},"description":"TxDecodeRequest is the request type for the Service.TxDecode\\nRPC method."}}},"description":"TxDecodeRequest is the request type for the Service.TxDecode\\nRPC method.","required":true},"tags":["Service"]}},"/cosmos/tx/v1beta1/decode/amino":{"post":{"summary":"TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.","operationId":"TxDecodeAmino","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"amino_json":{"type":"string"}},"description":"TxDecodeAminoResponse is the response type for the Service.TxDecodeAmino\\nRPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"amino_binary":{"type":"string","format":"byte"}},"description":"TxDecodeAminoRequest is the request type for the Service.TxDecodeAmino\\nRPC method."}}},"description":"TxDecodeAminoRequest is the request type for the Service.TxDecodeAmino\\nRPC method.","required":true},"tags":["Service"]}},"/cosmos/tx/v1beta1/encode":{"post":{"summary":"TxEncode encodes the transaction.","operationId":"TxEncode","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"tx_bytes":{"type":"string","format":"byte","description":"tx_bytes is the encoded transaction bytes."}},"description":"TxEncodeResponse is the response type for the\\nService.TxEncode method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/cosmos.tx.v1beta1.TxEncodeRequest"}}},"description":"TxEncodeRequest is the request type for the Service.TxEncode\\nRPC method.","required":true},"tags":["Service"]}},"/cosmos/tx/v1beta1/encode/amino":{"post":{"summary":"TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.","operationId":"TxEncodeAmino","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"amino_binary":{"type":"string","format":"byte"}},"description":"TxEncodeAminoResponse is the response type for the Service.TxEncodeAmino\\nRPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"amino_json":{"type":"string"}},"description":"TxEncodeAminoRequest is the request type for the Service.TxEncodeAmino\\nRPC method."}}},"description":"TxEncodeAminoRequest is the request type for the Service.TxEncodeAmino\\nRPC method.","required":true},"tags":["Service"]}},"/cosmos/tx/v1beta1/simulate":{"post":{"summary":"Simulate simulates executing a transaction for estimating gas usage.","operationId":"Simulate","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"gas_info":{"description":"gas_info is the information about gas used in the simulation.","type":"object","properties":{"gas_wanted":{"type":"string","format":"uint64","description":"GasWanted is the maximum units of work we allow this tx to perform."},"gas_used":{"type":"string","format":"uint64","description":"GasUsed is the amount of gas actually consumed."}}},"result":{"description":"result is the result of the simulation.","type":"object","properties":{"data":{"type":"string","format":"byte","description":"Data is any data returned from message or handler execution. It MUST be\\nlength prefixed in order to separate data from multiple message executions.\\nDeprecated. This field is still populated, but prefer msg_response instead\\nbecause it also contains the Msg response typeURL."},"log":{"type":"string","description":"Log contains the log information from message or handler execution."},"events":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"attributes":{"type":"array","items":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"},"index":{"type":"boolean","title":"nondeterministic"}},"description":"EventAttribute is a single key-value pair, associated with an event."}}},"description":"Event allows application developers to attach additional information to\\nResponseFinalizeBlock and ResponseCheckTx.\\nUp to 0.37, this could also be used in ResponseBeginBlock, ResponseEndBlock,\\nand ResponseDeliverTx.\\nLater, transactions may be queried using these events."},"description":"Events contains a slice of Event objects that were emitted during message\\nor handler execution."},"msg_responses":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"description":"msg_responses contains the Msg handler responses type packed in Anys."}}}},"description":"SimulateResponse is the response type for the\\nService.SimulateRPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/cosmos.tx.v1beta1.SimulateRequest"}}},"description":"SimulateRequest is the request type for the Service.Simulate\\nRPC method.","required":true},"tags":["Service"]}},"/cosmos/tx/v1beta1/txs":{"get":{"summary":"GetTxsEvent fetches txs by event.","operationId":"GetTxsEvent","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/cosmos.tx.v1beta1.GetTxsEventResponse"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"events","description":"events is the list of transaction event type.\\nDeprecated: post v0.47.x use query instead, which should contain a valid\\nevents query.","in":"query","required":false,"explode":true,"schema":{"type":"array","items":{"type":"string"}}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"order_by","description":" - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults\\nto ASC in this case.\\n - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order\\n - ORDER_BY_DESC: ORDER_BY_DESC defines descending order","in":"query","required":false,"schema":{"type":"string","enum":["ORDER_BY_UNSPECIFIED","ORDER_BY_ASC","ORDER_BY_DESC"],"default":"ORDER_BY_UNSPECIFIED"}},{"name":"page","description":"page is the page number to query, starts at 1. If not provided, will\\ndefault to first page.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"query","description":"query defines the transaction event query that is proxied to Tendermint\'s\\nTxSearch RPC method. The query must be valid.","in":"query","required":false,"schema":{"type":"string"}}],"tags":["Service"]},"post":{"summary":"BroadcastTx broadcast transaction.","operationId":"BroadcastTx","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"tx_response":{"description":"tx_response is the queried TxResponses.","type":"object","properties":{"height":{"type":"string","format":"int64","title":"The block height"},"txhash":{"type":"string","description":"The transaction hash."},"codespace":{"type":"string","title":"Namespace for the Code"},"code":{"type":"integer","format":"int64","description":"Response code."},"data":{"type":"string","description":"Result bytes, if any."},"raw_log":{"type":"string","description":"The output of the application\'s logger (raw string). May be\\nnon-deterministic."},"logs":{"type":"array","items":{"type":"object","properties":{"msg_index":{"type":"integer","format":"int64"},"log":{"type":"string"},"events":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"attributes":{"type":"array","items":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"}},"description":"Attribute defines an attribute wrapper where the key and value are\\nstrings instead of raw bytes."}}},"description":"StringEvent defines en Event object wrapper where all the attributes\\ncontain key/value pairs that are strings instead of raw bytes."},"description":"Events contains a slice of Event objects that were emitted during some\\nexecution."}},"description":"ABCIMessageLog defines a structure containing an indexed tx ABCI message log."},"description":"The output of the application\'s logger (typed). May be non-deterministic."},"info":{"type":"string","description":"Additional information. May be non-deterministic."},"gas_wanted":{"type":"string","format":"int64","description":"Amount of gas requested for transaction."},"gas_used":{"type":"string","format":"int64","description":"Amount of gas consumed by transaction."},"tx":{"description":"The request transaction bytes.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"timestamp":{"type":"string","description":"Time of the previous block. For heights > 1, it\'s the weighted median of\\nthe timestamps of the valid votes in the block.LastCommit. For height == 1,\\nit\'s genesis time."},"events":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"attributes":{"type":"array","items":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"},"index":{"type":"boolean","title":"nondeterministic"}},"description":"EventAttribute is a single key-value pair, associated with an event."}}},"description":"Event allows application developers to attach additional information to\\nResponseFinalizeBlock and ResponseCheckTx.\\nUp to 0.37, this could also be used in ResponseBeginBlock, ResponseEndBlock,\\nand ResponseDeliverTx.\\nLater, transactions may be queried using these events."},"description":"Events defines all the events emitted by processing a transaction. Note,\\nthese events include those emitted by processing all the messages and those\\nemitted from the ante. Whereas Logs contains the events, with\\nadditional metadata, emitted only by processing the messages."}}}},"description":"BroadcastTxResponse is the response type for the\\nService.BroadcastTx method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"requestBody":{"content":{"application/json":{"schema":{"type":"object","properties":{"tx_bytes":{"type":"string","format":"byte","description":"tx_bytes is the raw transaction."},"mode":{"type":"string","enum":["BROADCAST_MODE_UNSPECIFIED","BROADCAST_MODE_BLOCK","BROADCAST_MODE_SYNC","BROADCAST_MODE_ASYNC"],"default":"BROADCAST_MODE_UNSPECIFIED","description":"BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC\\nmethod.\\n\\n - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering\\n - BROADCAST_MODE_BLOCK: Deprecated: use BROADCAST_MODE_SYNC instead,\\nBROADCAST_MODE_BLOCK is not supported by the SDK from v0.47.x onwards.\\n - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits\\nfor a CheckTx execution response only.\\n - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client\\nreturns immediately."}},"description":"BroadcastTxRequest is the request type for the Service.BroadcastTxRequest\\nRPC method."}}},"description":"BroadcastTxRequest is the request type for the Service.BroadcastTxRequest\\nRPC method.","required":true},"tags":["Service"]}},"/cosmos/tx/v1beta1/txs/block/{height}":{"get":{"summary":"GetBlockWithTxs fetches a block with decoded txs.","operationId":"GetBlockWithTxs","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/cosmos.tx.v1beta1.GetBlockWithTxsResponse"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"height","description":"height is the height of the block to query.","in":"path","required":true,"schema":{"type":"string","format":"int64"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Service"]}},"/cosmos/tx/v1beta1/txs/{hash}":{"get":{"summary":"GetTx fetches a tx by hash.","operationId":"GetTx","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/cosmos.tx.v1beta1.GetTxResponse"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"hash","description":"hash is the tx hash to query, encoded as a hex string.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Service"]}},"/cosmos/upgrade/v1beta1/applied_plan/{name}":{"get":{"summary":"AppliedPlan queries a previously applied upgrade plan by its name.","operationId":"AppliedPlan","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"height":{"type":"string","format":"int64","description":"height is the block height at which the plan was applied."}},"description":"QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC\\nmethod."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"name","description":"name is the name of the applied plan to query for.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/upgrade/v1beta1/authority":{"get":{"summary":"Returns the account with authority to conduct upgrades","operationId":"Authority","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"address":{"type":"string"}},"title":"QueryAuthorityResponse is the response type for Query/Authority"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"tags":["Query"]}},"/cosmos/upgrade/v1beta1/current_plan":{"get":{"summary":"CurrentPlan queries the current upgrade plan.","operationId":"CurrentPlan","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"plan":{"description":"plan is the current upgrade plan.","type":"object","properties":{"name":{"type":"string","description":"Sets the name for the upgrade. This name will be used by the upgraded\\nversion of the software to apply any special \\"on-upgrade\\" commands during\\nthe first BeginBlock method after the upgrade is applied. It is also used\\nto detect whether a software version can handle a given upgrade. If no\\nupgrade handler with this name has been set in the software, it will be\\nassumed that the software is out-of-date when the upgrade Time or Height is\\nreached and the software will exit."},"time":{"type":"string","format":"date-time","description":"Deprecated: Time based upgrades have been deprecated. Time based upgrade logic\\nhas been removed from the SDK.\\nIf this field is not empty, an error will be thrown."},"height":{"type":"string","format":"int64","description":"The height at which the upgrade must be performed."},"info":{"type":"string","title":"Any application specific upgrade info to be included on-chain\\nsuch as a git commit that validators could automatically upgrade to"},"upgraded_client_state":{"description":"Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been\\nmoved to the IBC module in the sub module 02-client.\\nIf this field is not empty, an error will be thrown.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}}}}},"description":"QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC\\nmethod."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"tags":["Query"]}},"/cosmos/upgrade/v1beta1/module_versions":{"get":{"summary":"ModuleVersions queries the list of module versions from state.","operationId":"ModuleVersions","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"module_versions":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string","title":"name of the app module"},"version":{"type":"string","format":"uint64","title":"consensus version of the app module"}},"description":"ModuleVersion specifies a module and its consensus version."},"description":"module_versions is a list of module names with their consensus versions."}},"description":"QueryModuleVersionsResponse is the response type for the Query/ModuleVersions\\nRPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"module_name","description":"module_name is a field to query a specific module\\nconsensus version from state. Leaving this empty will\\nfetch the full list of module versions from state","in":"query","required":false,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/upgrade/v1beta1/upgraded_consensus_state/{last_height}":{"get":{"summary":"UpgradedConsensusState queries the consensus state that will serve\\nas a trusted kernel for the next version of this chain. It will only be\\nstored at the last height of this chain.\\nUpgradedConsensusState RPC not supported with legacy querier\\nThis rpc is deprecated now that IBC has its own replacement\\n(https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)","operationId":"UpgradedConsensusState","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"upgraded_consensus_state":{"type":"string","format":"byte"}},"description":"QueryUpgradedConsensusStateResponse is the response type for the Query/UpgradedConsensusState\\nRPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"last_height","description":"last height of the current chain must be sent in request\\nas this is the height under which next consensus state is stored","in":"path","required":true,"schema":{"type":"string","format":"int64"}}],"tags":["Query"]}},"/cosmos/authz/v1beta1/grants":{"get":{"summary":"Returns list of `Authorization`, granted to the grantee by the granter.","operationId":"Grants","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"grants":{"type":"array","items":{"type":"object","properties":{"authorization":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"expiration":{"type":"string","format":"date-time","title":"time when the grant will expire and will be pruned. If null, then the grant\\ndoesn\'t have a time expiration (other conditions  in `authorization`\\nmay apply to invalidate the grant)"}},"description":"Grant gives permissions to execute\\nthe provide method with expiration time."},"description":"authorizations is a list of grants granted for grantee by granter."},"pagination":{"description":"pagination defines an pagination for the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGrantsResponse is the response type for the Query/Authorizations RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"granter","in":"query","required":false,"schema":{"type":"string"}},{"name":"grantee","in":"query","required":false,"schema":{"type":"string"}},{"name":"msg_type_url","description":"Optional, msg_type_url, when set, will query only grants matching given msg type.","in":"query","required":false,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/authz/v1beta1/grants/grantee/{grantee}":{"get":{"summary":"GranteeGrants returns a list of `GrantAuthorization` by grantee.","operationId":"GranteeGrants","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"grants":{"type":"array","items":{"type":"object","properties":{"granter":{"type":"string"},"grantee":{"type":"string"},"authorization":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"expiration":{"type":"string","format":"date-time"}},"title":"GrantAuthorization extends a grant with both the addresses of the grantee and granter.\\nIt is used in genesis.proto and query.proto"},"description":"grants is a list of grants granted to the grantee."},"pagination":{"description":"pagination defines an pagination for the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGranteeGrantsResponse is the response type for the Query/GranteeGrants RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"grantee","in":"path","required":true,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/authz/v1beta1/grants/granter/{granter}":{"get":{"summary":"GranterGrants returns list of `GrantAuthorization`, granted by granter.","operationId":"GranterGrants","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"grants":{"type":"array","items":{"type":"object","properties":{"granter":{"type":"string"},"grantee":{"type":"string"},"authorization":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"expiration":{"type":"string","format":"date-time"}},"title":"GrantAuthorization extends a grant with both the addresses of the grantee and granter.\\nIt is used in genesis.proto and query.proto"},"description":"grants is a list of grants granted by the granter."},"pagination":{"description":"pagination defines an pagination for the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGranterGrantsResponse is the response type for the Query/GranterGrants RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"granter","in":"path","required":true,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}":{"get":{"summary":"Allowance returns granted allowance to the grantee by the granter.","operationId":"Allowance","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"allowance":{"description":"allowance is a allowance granted for grantee by granter.","type":"object","properties":{"granter":{"type":"string","description":"granter is the address of the user granting an allowance of their funds."},"grantee":{"type":"string","description":"grantee is the address of the user being granted an allowance of another user\'s funds."},"allowance":{"description":"allowance can be any of basic, periodic, allowed fee allowance.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}}},"title":"Grant is stored in the KVStore to record a grant with full context"}},"description":"QueryAllowanceResponse is the response type for the Query/Allowance RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"granter","description":"granter is the address of the user granting an allowance of their funds.","in":"path","required":true,"schema":{"type":"string"}},{"name":"grantee","description":"grantee is the address of the user being granted an allowance of another user\'s funds.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/feegrant/v1beta1/allowances/{grantee}":{"get":{"summary":"Allowances returns all the grants for the given grantee address.","operationId":"Allowances","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"allowances":{"type":"array","items":{"type":"object","properties":{"granter":{"type":"string","description":"granter is the address of the user granting an allowance of their funds."},"grantee":{"type":"string","description":"grantee is the address of the user being granted an allowance of another user\'s funds."},"allowance":{"description":"allowance can be any of basic, periodic, allowed fee allowance.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}}},"title":"Grant is stored in the KVStore to record a grant with full context"},"description":"allowances are allowance\'s granted for grantee by granter."},"pagination":{"description":"pagination defines an pagination for the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryAllowancesResponse is the response type for the Query/Allowances RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"grantee","in":"path","required":true,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/feegrant/v1beta1/issued/{granter}":{"get":{"summary":"AllowancesByGranter returns all the grants given by an address","operationId":"AllowancesByGranter","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"allowances":{"type":"array","items":{"type":"object","properties":{"granter":{"type":"string","description":"granter is the address of the user granting an allowance of their funds."},"grantee":{"type":"string","description":"grantee is the address of the user being granted an allowance of another user\'s funds."},"allowance":{"description":"allowance can be any of basic, periodic, allowed fee allowance.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}}},"title":"Grant is stored in the KVStore to record a grant with full context"},"description":"allowances that have been issued by the granter."},"pagination":{"description":"pagination defines an pagination for the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryAllowancesByGranterResponse is the response type for the Query/AllowancesByGranter RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"granter","in":"path","required":true,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/nft/v1beta1/balance":{"get":{"summary":"BalanceByQueryString queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721","operationId":"BalanceByQueryString","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"amount":{"type":"string","format":"uint64","title":"amount is the number of all NFTs of a given class owned by the owner"}},"title":"QueryBalanceByQueryStringResponse is the response type for the Query/Balance RPC method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"class_id","description":"class_id associated with the nft","in":"query","required":false,"schema":{"type":"string"}},{"name":"owner","description":"owner is the owner address of the nft","in":"query","required":false,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/nft/v1beta1/balance/{owner}/{class_id}":{"get":{"summary":"Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721","operationId":"NftBalance","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"amount":{"type":"string","format":"uint64","title":"amount is the number of all NFTs of a given class owned by the owner"}},"title":"QueryBalanceResponse is the response type for the Query/Balance RPC method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"owner","description":"owner is the owner address of the nft","in":"path","required":true,"schema":{"type":"string"}},{"name":"class_id","description":"class_id associated with the nft","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/nft/v1beta1/class":{"get":{"summary":"Class queries an NFT class based on its id","operationId":"ClassByQueryString","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"class":{"description":"class defines the class of the nft type.","type":"object","properties":{"id":{"type":"string","title":"id defines the unique identifier of the NFT classification, similar to the contract address of ERC721"},"name":{"type":"string","title":"name defines the human-readable name of the NFT classification. Optional"},"symbol":{"type":"string","title":"symbol is an abbreviated name for nft classification. Optional"},"description":{"type":"string","title":"description is a brief description of nft classification. Optional"},"uri":{"type":"string","title":"uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional"},"uri_hash":{"type":"string","title":"uri_hash is a hash of the document pointed by uri. Optional"},"data":{"title":"data is the app specific metadata of the NFT class. Optional","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}},"title":"QueryClassByQueryStringResponse is the response type for the Query/Class RPC method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"class_id","description":"class_id associated with the nft","in":"query","required":false,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/nft/v1beta1/classes":{"get":{"summary":"Classes queries all NFT classes","operationId":"Classes","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"classes":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","title":"id defines the unique identifier of the NFT classification, similar to the contract address of ERC721"},"name":{"type":"string","title":"name defines the human-readable name of the NFT classification. Optional"},"symbol":{"type":"string","title":"symbol is an abbreviated name for nft classification. Optional"},"description":{"type":"string","title":"description is a brief description of nft classification. Optional"},"uri":{"type":"string","title":"uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional"},"uri_hash":{"type":"string","title":"uri_hash is a hash of the document pointed by uri. Optional"},"data":{"title":"data is the app specific metadata of the NFT class. Optional","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}},"description":"Class defines the class of the nft type."},"description":"class defines the class of the nft type."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"title":"QueryClassesResponse is the response type for the Query/Classes RPC method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/nft/v1beta1/classes/{class_id}":{"get":{"summary":"Class queries an NFT class based on its id","operationId":"Class","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"class":{"description":"class defines the class of the nft type.","type":"object","properties":{"id":{"type":"string","title":"id defines the unique identifier of the NFT classification, similar to the contract address of ERC721"},"name":{"type":"string","title":"name defines the human-readable name of the NFT classification. Optional"},"symbol":{"type":"string","title":"symbol is an abbreviated name for nft classification. Optional"},"description":{"type":"string","title":"description is a brief description of nft classification. Optional"},"uri":{"type":"string","title":"uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional"},"uri_hash":{"type":"string","title":"uri_hash is a hash of the document pointed by uri. Optional"},"data":{"title":"data is the app specific metadata of the NFT class. Optional","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}},"title":"QueryClassResponse is the response type for the Query/Class RPC method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"class_id","description":"class_id associated with the nft","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/nft/v1beta1/nft":{"get":{"summary":"NFTByQueryString queries an NFT based on its class and id.","operationId":"NFTByQueryString","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"nft":{"title":"owner is the owner address of the nft","type":"object","properties":{"class_id":{"type":"string","title":"class_id associated with the NFT, similar to the contract address of ERC721"},"id":{"type":"string","title":"id is a unique identifier of the NFT"},"uri":{"type":"string","title":"uri for the NFT metadata stored off chain"},"uri_hash":{"type":"string","title":"uri_hash is a hash of the document pointed by uri"},"data":{"title":"data is an app specific data of the NFT. Optional","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}},"description":"NFT defines the NFT."}},"title":"QueryNFTByQueryStringResponse is the response type for the Query/NFT RPC method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"class_id","description":"class_id associated with the nft","in":"query","required":false,"schema":{"type":"string"}},{"name":"id","description":"id is a unique identifier of the NFT","in":"query","required":false,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/nft/v1beta1/nfts":{"get":{"summary":"NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in\\nERC721Enumerable","operationId":"NFTs","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"nfts":{"type":"array","items":{"type":"object","properties":{"class_id":{"type":"string","title":"class_id associated with the NFT, similar to the contract address of ERC721"},"id":{"type":"string","title":"id is a unique identifier of the NFT"},"uri":{"type":"string","title":"uri for the NFT metadata stored off chain"},"uri_hash":{"type":"string","title":"uri_hash is a hash of the document pointed by uri"},"data":{"title":"data is an app specific data of the NFT. Optional","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}},"description":"NFT defines the NFT."},"title":"NFT defines the NFT"},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"title":"QueryNFTsResponse is the response type for the Query/NFTs RPC methods"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"class_id","description":"class_id associated with the nft","in":"query","required":false,"schema":{"type":"string"}},{"name":"owner","description":"owner is the owner address of the nft","in":"query","required":false,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/nft/v1beta1/nfts/{class_id}/{id}":{"get":{"summary":"NFT queries an NFT based on its class and id.","operationId":"NFT","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"nft":{"title":"owner is the owner address of the nft","type":"object","properties":{"class_id":{"type":"string","title":"class_id associated with the NFT, similar to the contract address of ERC721"},"id":{"type":"string","title":"id is a unique identifier of the NFT"},"uri":{"type":"string","title":"uri for the NFT metadata stored off chain"},"uri_hash":{"type":"string","title":"uri_hash is a hash of the document pointed by uri"},"data":{"title":"data is an app specific data of the NFT. Optional","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}},"description":"NFT defines the NFT."}},"title":"QueryNFTResponse is the response type for the Query/NFT RPC method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"class_id","description":"class_id associated with the nft","in":"path","required":true,"schema":{"type":"string"}},{"name":"id","description":"id is a unique identifier of the NFT","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/nft/v1beta1/owner":{"get":{"summary":"OwnerByQueryString queries the owner of the NFT based on its class and id, same as ownerOf in ERC721","operationId":"OwnerByQueryString","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"owner":{"type":"string","title":"owner is the owner address of the nft"}},"title":"QueryOwnerByQueryStringResponse is the response type for the Query/Owner RPC method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"class_id","description":"class_id associated with the nft","in":"query","required":false,"schema":{"type":"string"}},{"name":"id","description":"id is a unique identifier of the NFT","in":"query","required":false,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/nft/v1beta1/owner/{class_id}/{id}":{"get":{"summary":"Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721","operationId":"Owner","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"owner":{"type":"string","title":"owner is the owner address of the nft"}},"title":"QueryOwnerResponse is the response type for the Query/Owner RPC method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"class_id","description":"class_id associated with the nft","in":"path","required":true,"schema":{"type":"string"}},{"name":"id","description":"id is a unique identifier of the NFT","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/nft/v1beta1/supply":{"get":{"summary":"SupplyByQueryString queries the number of NFTs from the given class, same as totalSupply of ERC721.","operationId":"SupplyByQueryString","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"amount":{"type":"string","format":"uint64","title":"amount is the number of all NFTs from the given class"}},"title":"QuerySupplyByQueryStringResponse is the response type for the Query/Supply RPC method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"class_id","description":"class_id associated with the nft","in":"query","required":false,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/nft/v1beta1/supply/{class_id}":{"get":{"summary":"Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.","operationId":"Supply","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"amount":{"type":"string","format":"uint64","title":"amount is the number of all NFTs from the given class"}},"title":"QuerySupplyResponse is the response type for the Query/Supply RPC method"}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"class_id","description":"class_id associated with the nft","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/group/v1/group_info/{group_id}":{"get":{"summary":"GroupInfo queries group info based on group id.","operationId":"GroupInfo","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"info":{"description":"info is the GroupInfo of the group.","type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id is the unique ID of the group."},"admin":{"type":"string","description":"admin is the account address of the group\'s admin."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata to attached to the group.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1"},"version":{"type":"string","format":"uint64","title":"version is used to track changes to a group\'s membership structure that\\nwould break existing proposals. Whenever any members weight is changed,\\nor any member is added or removed this version is incremented and will\\ncause proposals based on older versions of this group to fail"},"total_weight":{"type":"string","description":"total_weight is the sum of the group members\' weights."},"created_at":{"type":"string","format":"date-time","description":"created_at is a timestamp specifying when a group was created."}}}},"description":"QueryGroupInfoResponse is the Query/GroupInfo response type."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"group_id","description":"group_id is the unique ID of the group.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}}],"tags":["Query"]}},"/cosmos/group/v1/group_members/{group_id}":{"get":{"summary":"GroupMembers queries members of a group by group id.","operationId":"GroupMembers","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"members":{"type":"array","items":{"type":"object","properties":{"group_id":{"type":"string","format":"uint64","description":"group_id is the unique ID of the group."},"member":{"description":"member is the member data.","type":"object","properties":{"address":{"type":"string","description":"address is the member\'s account address."},"weight":{"type":"string","description":"weight is the member\'s voting weight that should be greater than 0."},"metadata":{"type":"string","description":"metadata is any arbitrary metadata attached to the member."},"added_at":{"type":"string","format":"date-time","description":"added_at is a timestamp specifying when a member was added."}}}},"description":"GroupMember represents the relationship between a group and a member."},"description":"members are the members of the group with given group_id."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGroupMembersResponse is the Query/GroupMembersResponse response type."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"group_id","description":"group_id is the unique ID of the group.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/group/v1/group_policies_by_admin/{admin}":{"get":{"summary":"GroupPoliciesByAdmin queries group policies by admin address.","operationId":"GroupPoliciesByAdmin","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"group_policies":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","description":"address is the account address of group policy."},"group_id":{"type":"string","format":"uint64","description":"group_id is the unique ID of the group."},"admin":{"type":"string","description":"admin is the account address of the group admin."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the group policy.\\nthe recommended format of the metadata is to be found here:\\nhttps://docs.cosmos.network/v0.47/modules/group#decision-policy-1"},"version":{"type":"string","format":"uint64","description":"version is used to track changes to a group\'s GroupPolicyInfo structure that\\nwould create a different result on a running proposal."},"decision_policy":{"description":"decision_policy specifies the group policy\'s decision policy.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"created_at":{"type":"string","format":"date-time","description":"created_at is a timestamp specifying when a group policy was created."}},"description":"GroupPolicyInfo represents the high-level on-chain information for a group policy."},"description":"group_policies are the group policies info with provided admin."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGroupPoliciesByAdminResponse is the Query/GroupPoliciesByAdmin response type."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"admin","description":"admin is the admin address of the group policy.","in":"path","required":true,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/group/v1/group_policies_by_group/{group_id}":{"get":{"summary":"GroupPoliciesByGroup queries group policies by group id.","operationId":"GroupPoliciesByGroup","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"group_policies":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","description":"address is the account address of group policy."},"group_id":{"type":"string","format":"uint64","description":"group_id is the unique ID of the group."},"admin":{"type":"string","description":"admin is the account address of the group admin."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the group policy.\\nthe recommended format of the metadata is to be found here:\\nhttps://docs.cosmos.network/v0.47/modules/group#decision-policy-1"},"version":{"type":"string","format":"uint64","description":"version is used to track changes to a group\'s GroupPolicyInfo structure that\\nwould create a different result on a running proposal."},"decision_policy":{"description":"decision_policy specifies the group policy\'s decision policy.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"created_at":{"type":"string","format":"date-time","description":"created_at is a timestamp specifying when a group policy was created."}},"description":"GroupPolicyInfo represents the high-level on-chain information for a group policy."},"description":"group_policies are the group policies info associated with the provided group."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGroupPoliciesByGroupResponse is the Query/GroupPoliciesByGroup response type."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"group_id","description":"group_id is the unique ID of the group policy\'s group.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/group/v1/group_policy_info/{address}":{"get":{"summary":"GroupPolicyInfo queries group policy info based on account address of group policy.","operationId":"GroupPolicyInfo","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"info":{"description":"info is the GroupPolicyInfo of the group policy.","type":"object","properties":{"address":{"type":"string","description":"address is the account address of group policy."},"group_id":{"type":"string","format":"uint64","description":"group_id is the unique ID of the group."},"admin":{"type":"string","description":"admin is the account address of the group admin."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the group policy.\\nthe recommended format of the metadata is to be found here:\\nhttps://docs.cosmos.network/v0.47/modules/group#decision-policy-1"},"version":{"type":"string","format":"uint64","description":"version is used to track changes to a group\'s GroupPolicyInfo structure that\\nwould create a different result on a running proposal."},"decision_policy":{"description":"decision_policy specifies the group policy\'s decision policy.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"created_at":{"type":"string","format":"date-time","description":"created_at is a timestamp specifying when a group policy was created."}}}},"description":"QueryGroupPolicyInfoResponse is the Query/GroupPolicyInfo response type."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"address","description":"address is the account address of the group policy.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/group/v1/groups":{"get":{"summary":"Groups queries all groups in state.","operationId":"Groups","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"groups":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id is the unique ID of the group."},"admin":{"type":"string","description":"admin is the account address of the group\'s admin."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata to attached to the group.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1"},"version":{"type":"string","format":"uint64","title":"version is used to track changes to a group\'s membership structure that\\nwould break existing proposals. Whenever any members weight is changed,\\nor any member is added or removed this version is incremented and will\\ncause proposals based on older versions of this group to fail"},"total_weight":{"type":"string","description":"total_weight is the sum of the group members\' weights."},"created_at":{"type":"string","format":"date-time","description":"created_at is a timestamp specifying when a group was created."}},"description":"GroupInfo represents the high-level on-chain information for a group."},"description":"`groups` is all the groups present in state."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGroupsResponse is the Query/Groups response type."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/group/v1/groups_by_admin/{admin}":{"get":{"summary":"GroupsByAdmin queries groups by admin address.","operationId":"GroupsByAdmin","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"groups":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id is the unique ID of the group."},"admin":{"type":"string","description":"admin is the account address of the group\'s admin."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata to attached to the group.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1"},"version":{"type":"string","format":"uint64","title":"version is used to track changes to a group\'s membership structure that\\nwould break existing proposals. Whenever any members weight is changed,\\nor any member is added or removed this version is incremented and will\\ncause proposals based on older versions of this group to fail"},"total_weight":{"type":"string","description":"total_weight is the sum of the group members\' weights."},"created_at":{"type":"string","format":"date-time","description":"created_at is a timestamp specifying when a group was created."}},"description":"GroupInfo represents the high-level on-chain information for a group."},"description":"groups are the groups info with the provided admin."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGroupsByAdminResponse is the Query/GroupsByAdminResponse response type."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"admin","description":"admin is the account address of a group\'s admin.","in":"path","required":true,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/group/v1/groups_by_member/{address}":{"get":{"summary":"GroupsByMember queries groups by member address.","operationId":"GroupsByMember","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"groups":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id is the unique ID of the group."},"admin":{"type":"string","description":"admin is the account address of the group\'s admin."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata to attached to the group.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1"},"version":{"type":"string","format":"uint64","title":"version is used to track changes to a group\'s membership structure that\\nwould break existing proposals. Whenever any members weight is changed,\\nor any member is added or removed this version is incremented and will\\ncause proposals based on older versions of this group to fail"},"total_weight":{"type":"string","description":"total_weight is the sum of the group members\' weights."},"created_at":{"type":"string","format":"date-time","description":"created_at is a timestamp specifying when a group was created."}},"description":"GroupInfo represents the high-level on-chain information for a group."},"description":"groups are the groups info with the provided group member."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGroupsByMemberResponse is the Query/GroupsByMember response type."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"address","description":"address is the group member address.","in":"path","required":true,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/group/v1/proposal/{proposal_id}":{"get":{"summary":"Proposal queries a proposal based on proposal id.","operationId":"GroupProposal","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"proposal":{"description":"proposal is the proposal info.","type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id is the unique id of the proposal."},"group_policy_address":{"type":"string","description":"group_policy_address is the account address of group policy."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the proposal.\\nthe recommended format of the metadata is to be found here:\\nhttps://docs.cosmos.network/v0.47/modules/group#proposal-4"},"proposers":{"type":"array","items":{"type":"string"},"description":"proposers are the account addresses of the proposers."},"submit_time":{"type":"string","format":"date-time","description":"submit_time is a timestamp specifying when a proposal was submitted."},"group_version":{"type":"string","format":"uint64","description":"group_version tracks the version of the group at proposal submission.\\nThis field is here for informational purposes only."},"group_policy_version":{"type":"string","format":"uint64","description":"group_policy_version tracks the version of the group policy at proposal submission.\\nWhen a decision policy is changed, existing proposals from previous policy\\nversions will become invalid with the `ABORTED` status.\\nThis field is here for informational purposes only."},"status":{"description":"status represents the high level position in the life cycle of the proposal. Initial value is Submitted.","type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_SUBMITTED","PROPOSAL_STATUS_ACCEPTED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_ABORTED","PROPOSAL_STATUS_WITHDRAWN"],"default":"PROPOSAL_STATUS_UNSPECIFIED"},"final_tally_result":{"description":"final_tally_result contains the sums of all weighted votes for this\\nproposal for each vote option. It is empty at submission, and only\\npopulated after tallying, at voting period end or at proposal execution,\\nwhichever happens first.","type":"object","properties":{"yes_count":{"type":"string","description":"yes_count is the weighted sum of yes votes."},"abstain_count":{"type":"string","description":"abstain_count is the weighted sum of abstainers."},"no_count":{"type":"string","description":"no_count is the weighted sum of no votes."},"no_with_veto_count":{"type":"string","description":"no_with_veto_count is the weighted sum of veto."}}},"voting_period_end":{"type":"string","format":"date-time","description":"voting_period_end is the timestamp before which voting must be done.\\nUnless a successful MsgExec is called before (to execute a proposal whose\\ntally is successful before the voting period ends), tallying will be done\\nat this point, and the `final_tally_result`and `status` fields will be\\naccordingly updated."},"executor_result":{"description":"executor_result is the final result of the proposal execution. Initial value is NotRun.","type":"string","enum":["PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED","PROPOSAL_EXECUTOR_RESULT_NOT_RUN","PROPOSAL_EXECUTOR_RESULT_SUCCESS","PROPOSAL_EXECUTOR_RESULT_FAILURE"],"default":"PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED"},"messages":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"description":"messages is a list of `sdk.Msg`s that will be executed if the proposal passes."},"title":{"type":"string","title":"title is the title of the proposal"},"summary":{"type":"string","title":"summary is a short summary of the proposal"}}}},"description":"QueryProposalResponse is the Query/Proposal response type."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_id","description":"proposal_id is the unique ID of a proposal.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}}],"tags":["Query"]}},"/cosmos/group/v1/proposals/{proposal_id}/tally":{"get":{"summary":"TallyResult returns the tally result of a proposal. If the proposal is\\nstill in voting period, then this query computes the current tally state,\\nwhich might not be final. On the other hand, if the proposal is final,\\nthen it simply returns the `final_tally_result` state stored in the\\nproposal itself.","operationId":"GroupTallyResult","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"tally":{"description":"tally defines the requested tally.","type":"object","properties":{"yes_count":{"type":"string","description":"yes_count is the weighted sum of yes votes."},"abstain_count":{"type":"string","description":"abstain_count is the weighted sum of abstainers."},"no_count":{"type":"string","description":"no_count is the weighted sum of no votes."},"no_with_veto_count":{"type":"string","description":"no_with_veto_count is the weighted sum of veto."}}}},"description":"QueryTallyResultResponse is the Query/TallyResult response type."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_id","description":"proposal_id is the unique id of a proposal.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}}],"tags":["Query"]}},"/cosmos/group/v1/proposals_by_group_policy/{address}":{"get":{"summary":"ProposalsByGroupPolicy queries proposals based on account address of group policy.","operationId":"ProposalsByGroupPolicy","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"proposals":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id is the unique id of the proposal."},"group_policy_address":{"type":"string","description":"group_policy_address is the account address of group policy."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the proposal.\\nthe recommended format of the metadata is to be found here:\\nhttps://docs.cosmos.network/v0.47/modules/group#proposal-4"},"proposers":{"type":"array","items":{"type":"string"},"description":"proposers are the account addresses of the proposers."},"submit_time":{"type":"string","format":"date-time","description":"submit_time is a timestamp specifying when a proposal was submitted."},"group_version":{"type":"string","format":"uint64","description":"group_version tracks the version of the group at proposal submission.\\nThis field is here for informational purposes only."},"group_policy_version":{"type":"string","format":"uint64","description":"group_policy_version tracks the version of the group policy at proposal submission.\\nWhen a decision policy is changed, existing proposals from previous policy\\nversions will become invalid with the `ABORTED` status.\\nThis field is here for informational purposes only."},"status":{"description":"status represents the high level position in the life cycle of the proposal. Initial value is Submitted.","type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_SUBMITTED","PROPOSAL_STATUS_ACCEPTED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_ABORTED","PROPOSAL_STATUS_WITHDRAWN"],"default":"PROPOSAL_STATUS_UNSPECIFIED"},"final_tally_result":{"description":"final_tally_result contains the sums of all weighted votes for this\\nproposal for each vote option. It is empty at submission, and only\\npopulated after tallying, at voting period end or at proposal execution,\\nwhichever happens first.","type":"object","properties":{"yes_count":{"type":"string","description":"yes_count is the weighted sum of yes votes."},"abstain_count":{"type":"string","description":"abstain_count is the weighted sum of abstainers."},"no_count":{"type":"string","description":"no_count is the weighted sum of no votes."},"no_with_veto_count":{"type":"string","description":"no_with_veto_count is the weighted sum of veto."}}},"voting_period_end":{"type":"string","format":"date-time","description":"voting_period_end is the timestamp before which voting must be done.\\nUnless a successful MsgExec is called before (to execute a proposal whose\\ntally is successful before the voting period ends), tallying will be done\\nat this point, and the `final_tally_result`and `status` fields will be\\naccordingly updated."},"executor_result":{"description":"executor_result is the final result of the proposal execution. Initial value is NotRun.","type":"string","enum":["PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED","PROPOSAL_EXECUTOR_RESULT_NOT_RUN","PROPOSAL_EXECUTOR_RESULT_SUCCESS","PROPOSAL_EXECUTOR_RESULT_FAILURE"],"default":"PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED"},"messages":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"description":"messages is a list of `sdk.Msg`s that will be executed if the proposal passes."},"title":{"type":"string","title":"title is the title of the proposal"},"summary":{"type":"string","title":"summary is a short summary of the proposal"}},"description":"Proposal defines a group proposal. Any member of a group can submit a proposal\\nfor a group policy to decide upon.\\nA proposal consists of a set of `sdk.Msg`s that will be executed if the proposal\\npasses as well as some optional metadata associated with the proposal."},"description":"proposals are the proposals with given group policy."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryProposalsByGroupPolicyResponse is the Query/ProposalByGroupPolicy response type."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"address","description":"address is the account address of the group policy related to proposals.","in":"path","required":true,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/group/v1/vote_by_proposal_voter/{proposal_id}/{voter}":{"get":{"summary":"VoteByProposalVoter queries a vote by proposal id and voter.","operationId":"VoteByProposalVoter","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"vote":{"description":"vote is the vote with given proposal_id and voter.","type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal is the unique ID of the proposal."},"voter":{"type":"string","description":"voter is the account address of the voter."},"option":{"description":"option is the voter\'s choice on the proposal.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the vote.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2"},"submit_time":{"type":"string","format":"date-time","description":"submit_time is the timestamp when the vote was submitted."}},"title":"Vote represents a vote for a proposal.string metadata"}},"description":"QueryVoteByProposalVoterResponse is the Query/VoteByProposalVoter response type."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_id","description":"proposal_id is the unique ID of a proposal.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}},{"name":"voter","description":"voter is a proposal voter account address.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/group/v1/votes_by_proposal/{proposal_id}":{"get":{"summary":"VotesByProposal queries a vote by proposal id.","operationId":"VotesByProposal","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"votes":{"type":"array","items":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal is the unique ID of the proposal."},"voter":{"type":"string","description":"voter is the account address of the voter."},"option":{"description":"option is the voter\'s choice on the proposal.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the vote.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2"},"submit_time":{"type":"string","format":"date-time","description":"submit_time is the timestamp when the vote was submitted."}},"title":"Vote represents a vote for a proposal.string metadata"},"description":"votes are the list of votes for given proposal_id."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryVotesByProposalResponse is the Query/VotesByProposal response type."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"proposal_id","description":"proposal_id is the unique ID of a proposal.","in":"path","required":true,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/group/v1/votes_by_voter/{voter}":{"get":{"summary":"VotesByVoter queries a vote by voter.","operationId":"VotesByVoter","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"votes":{"type":"array","items":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal is the unique ID of the proposal."},"voter":{"type":"string","description":"voter is the account address of the voter."},"option":{"description":"option is the voter\'s choice on the proposal.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the vote.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2"},"submit_time":{"type":"string","format":"date-time","description":"submit_time is the timestamp when the vote was submitted."}},"title":"Vote represents a vote for a proposal.string metadata"},"description":"votes are the list of votes by given voter."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryVotesByVoterResponse is the Query/VotesByVoter response type."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}}}}}},"parameters":[{"name":"voter","description":"voter is a proposal voter account address.","in":"path","required":true,"schema":{"type":"string"}},{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/circuit/v1/accounts":{"get":{"summary":"Accounts returns multiple accounts permissions.","operationId":"CircuitAccounts","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"accounts":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string"},"permissions":{"type":"object","properties":{"level":{"description":"level is the level of permissions granted to this account.","type":"string","enum":["LEVEL_NONE_UNSPECIFIED","LEVEL_SOME_MSGS","LEVEL_ALL_MSGS","LEVEL_SUPER_ADMIN"],"default":"LEVEL_NONE_UNSPECIFIED"},"limit_type_urls":{"type":"array","items":{"type":"string"},"description":"limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg type\\nURLs that the account can trip. It is an error to use limit_type_urls with\\na level other than LEVEL_SOME_MSGS."}},"description":"Permissions are the permissions that an account has to trip\\nor reset the circuit breaker."}},"title":"GenesisAccountPermissions is the account permissions for the circuit breaker in genesis"}},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"AccountsResponse is the response type for the Query/Accounts RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"pagination.key","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set.","in":"query","required":false,"schema":{"type":"string","format":"byte"}},{"name":"pagination.offset","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.limit","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app.","in":"query","required":false,"schema":{"type":"string","format":"uint64"}},{"name":"pagination.count_total","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set.","in":"query","required":false,"schema":{"type":"boolean"}},{"name":"pagination.reverse","description":"reverse is set to true if results are to be returned in the descending order.","in":"query","required":false,"schema":{"type":"boolean"}}],"tags":["Query"]}},"/cosmos/circuit/v1/accounts/{address}":{"get":{"summary":"Account returns account permissions.","operationId":"CircuitAccount","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"permission":{"type":"object","properties":{"level":{"description":"level is the level of permissions granted to this account.","type":"string","enum":["LEVEL_NONE_UNSPECIFIED","LEVEL_SOME_MSGS","LEVEL_ALL_MSGS","LEVEL_SUPER_ADMIN"],"default":"LEVEL_NONE_UNSPECIFIED"},"limit_type_urls":{"type":"array","items":{"type":"string"},"description":"limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg type\\nURLs that the account can trip. It is an error to use limit_type_urls with\\na level other than LEVEL_SOME_MSGS."}},"description":"Permissions are the permissions that an account has to trip\\nor reset the circuit breaker."}},"description":"AccountResponse is the response type for the Query/Account RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"address","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}},"/cosmos/circuit/v1/disable_list":{"get":{"summary":"DisabledList returns a list of disabled message urls","operationId":"DisabledList","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"disabled_list":{"type":"array","items":{"type":"string"}}},"description":"DisabledListResponse is the response type for the Query/DisabledList RPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"tags":["Query"]}},"/cosmos/consensus/v1/params":{"get":{"summary":"Params queries the parameters of x/consensus module.","operationId":"ConsensusParams","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"params":{"description":"params are the tendermint consensus params stored in the consensus module.\\nPlease note that `params.version` is not populated in this response, it is\\ntracked separately in the x/upgrade module.","type":"object","properties":{"block":{"type":"object","properties":{"max_bytes":{"type":"string","format":"int64","description":"Maximum size of a block, in bytes.\\n\\nMust be greater or equal to -1 and cannot be greater than the hard-coded\\nmaximum block size, which is 100MB.\\n\\nIf set to -1, the limit is the hard-coded maximum block size."},"max_gas":{"type":"string","format":"int64","description":"Maximum gas wanted by transactions included in a block.\\n\\nMust be greater or equal to -1. If set to -1, no limit is enforced."}},"description":"BlockParams define limits on the block size and gas."},"evidence":{"type":"object","properties":{"max_age_num_blocks":{"type":"string","format":"int64","description":"Maximum age of evidence, in blocks.\\n\\nThe recommended formula for calculating it is max_age_duration / {average\\nblock time}."},"max_age_duration":{"type":"string","description":"Maximum age of evidence, in time.\\n\\nThe recommended value of is should correspond to the application\'s\\n\\"unbonding period\\" or other similar mechanism for handling\\nNothing-At-Stake attacks.\\nSee: https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed."},"max_bytes":{"type":"string","format":"int64","description":"Maximum size in bytes of evidence allowed to be included in a block.\\n\\nIt should fall comfortably under the maximum size of a block."}},"description":"EvidenceParams determine the validity of evidences of Byzantine behavior."},"validator":{"type":"object","properties":{"pub_key_types":{"type":"array","items":{"type":"string"}}},"description":"ValidatorParams restrict the public key types validators can use.\\n\\nNOTE: uses ABCI public keys naming, not Amino names."},"version":{"type":"object","properties":{"app":{"type":"string","format":"uint64","description":"The ABCI application version.\\n\\nIt was named app_version in CometBFT 0.34."}},"description":"VersionParams contain the version of specific components of CometBFT."},"abci":{"title":"Use FeatureParams.vote_extensions_enable_height instead","type":"object","properties":{"vote_extensions_enable_height":{"type":"string","format":"int64","description":"vote_extensions_enable_height has been deprecated.\\nInstead, use FeatureParams.vote_extensions_enable_height."}}},"synchrony":{"type":"object","properties":{"precision":{"type":"string","description":"Bound for how skewed a proposer\'s clock may be from any validator on the\\nnetwork while still producing valid proposals."},"message_delay":{"type":"string","description":"Bound for how long a proposal message may take to reach all validators on\\na network and still be considered valid."}},"description":"SynchronyParams determine the validity of block timestamps.\\n\\nThese parameters are part of the Proposer-Based Timestamps (PBTS) algorithm.\\nFor more information on the relationship of the synchrony parameters to\\nblock timestamps validity, refer to the PBTS specification:\\nhttps://github.com/tendermint/spec/blob/master/spec/consensus/proposer-based-timestamp/README.md"},"feature":{"type":"object","properties":{"vote_extensions_enable_height":{"type":"string","format":"int64","description":"First height during which vote extensions will be enabled.\\n\\nDuring the specified height, and for all subsequent heights, precommit\\nmessages that do not contain valid extension data will be considered\\ninvalid. Prior to this height, or when this height is set to 0, vote\\nextensions will not be used or accepted by validators on the network.\\n\\nOnce enabled, vote extensions will be created by the application in\\nExtendVote, validated by the application in VerifyVoteExtension, and\\nused by the application in PrepareProposal, when proposing the next block.\\n\\nCannot be set to heights lower or equal to the current blockchain height."},"pbts_enable_height":{"type":"string","format":"int64","description":"Height at which Proposer-Based Timestamps (PBTS) will be enabled.\\n\\nFrom the specified height, and for all subsequent heights, the PBTS\\nalgorithm will be used to produce and validate block timestamps. Prior to\\nthis height, or when this height is set to 0, the legacy BFT Time\\nalgorithm is used to produce and validate timestamps.\\n\\nCannot be set to heights lower or equal to the current blockchain height."}},"description":"FeatureParams configure the height from which features of CometBFT are enabled."}}}},"description":"QueryParamsResponse defines the response type for querying x/consensus parameters."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"tags":["Query"]}},"/cosmos/protocolpool/v1/community_pool":{"get":{"summary":"CommunityPool queries the community pool coins.","operationId":"ProtocolPoolCommunityPool","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"pool":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."},"description":"pool defines community pool\'s coins."}},"description":"QueryCommunityPoolResponse is the response type for the Query/CommunityPool\\nRPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"tags":["Query"]}},"/cosmos/protocolpool/v1/unclaimed_budget/{address}":{"get":{"summary":"UnclaimedBudget queries the remaining budget left to be claimed and it gives overall budget allocation view.","operationId":"UnclaimedBudget","responses":{"200":{"description":"A successful response.","content":{"*/*":{"schema":{"type":"object","properties":{"claimed_amount":{"title":"claimed_amount is the budget amount already claimed by the recipient","type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"unclaimed_amount":{"title":"unclaimed_amount is the remaining budget amount that is unclaimed by the recipient","type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"next_claim_from":{"type":"string","format":"date-time","description":"next_claim_from is the next starting claim time for fund distribution.\\nIt represents the time when we can claim funds after the period time interval has passed."},"period":{"type":"string","title":"period is the time interval for fund distribution"},"tranches_left":{"type":"string","format":"uint64","title":"tranches_left is the number of tranches left for the amount to be distributed"}},"description":"QueryUnclaimedBudgetResponse is the response type for the Query/UnclaimedBudget\\nRPC method."}}}},"default":{"description":"An unexpected error response.","content":{"*/*":{"schema":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string"}},"additionalProperties":{}}}}}}}}},"parameters":[{"name":"address","description":"address is the recipient address to query unclaimed budget amount for.","in":"path","required":true,"schema":{"type":"string"}}],"tags":["Query"]}}},"components":{"schemas":{"cosmos.auth.v1beta1.AddressBytesToStringResponse":{"type":"object","properties":{"address_string":{"type":"string"}},"description":"AddressBytesToStringResponse is the response type for AddressString rpc method."},"cosmos.auth.v1beta1.AddressStringToBytesResponse":{"type":"object","properties":{"address_bytes":{"type":"string","format":"byte"}},"description":"AddressStringToBytesResponse is the response type for AddressBytes rpc method."},"cosmos.auth.v1beta1.BaseAccount":{"type":"object","properties":{"address":{"type":"string"},"pub_key":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"account_number":{"type":"string","format":"uint64"},"sequence":{"type":"string","format":"uint64"}},"description":"BaseAccount defines a base account type. It contains all the necessary fields\\nfor basic account functionality. Any custom account type should extend this\\ntype for additional functionality (e.g. vesting)."},"cosmos.auth.v1beta1.Bech32PrefixResponse":{"type":"object","properties":{"bech32_prefix":{"type":"string"}},"description":"Bech32PrefixResponse is the response type for Bech32Prefix rpc method."},"cosmos.auth.v1beta1.Params":{"type":"object","properties":{"max_memo_characters":{"type":"string","format":"uint64"},"tx_sig_limit":{"type":"string","format":"uint64"},"tx_size_cost_per_byte":{"type":"string","format":"uint64"},"sig_verify_cost_ed25519":{"type":"string","format":"uint64"},"sig_verify_cost_secp256k1":{"type":"string","format":"uint64"}},"description":"Params defines the parameters for the auth module."},"cosmos.auth.v1beta1.QueryAccountAddressByIDResponse":{"type":"object","properties":{"account_address":{"type":"string"}},"title":"QueryAccountAddressByIDResponse is the response type for AccountAddressByID rpc method"},"cosmos.auth.v1beta1.QueryAccountInfoResponse":{"type":"object","properties":{"info":{"description":"info is the account info which is represented by BaseAccount.","type":"object","properties":{"address":{"type":"string"},"pub_key":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"account_number":{"type":"string","format":"uint64"},"sequence":{"type":"string","format":"uint64"}}}},"description":"QueryAccountInfoResponse is the Query/AccountInfo response type."},"cosmos.auth.v1beta1.QueryAccountResponse":{"type":"object","properties":{"account":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}},"description":"QueryAccountResponse is the response type for the Query/Account RPC method."},"cosmos.auth.v1beta1.QueryAccountsResponse":{"type":"object","properties":{"accounts":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"title":"accounts are the existing accounts"},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryAccountsResponse is the response type for the Query/Accounts RPC method."},"cosmos.auth.v1beta1.QueryModuleAccountByNameResponse":{"type":"object","properties":{"account":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}},"description":"QueryModuleAccountByNameResponse is the response type for the Query/ModuleAccountByName RPC method."},"cosmos.auth.v1beta1.QueryModuleAccountsResponse":{"type":"object","properties":{"accounts":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}},"description":"QueryModuleAccountsResponse is the response type for the Query/ModuleAccounts RPC method."},"cosmos.auth.v1beta1.QueryParamsResponse":{"type":"object","properties":{"params":{"description":"params defines the parameters of the module.","type":"object","properties":{"max_memo_characters":{"type":"string","format":"uint64"},"tx_sig_limit":{"type":"string","format":"uint64"},"tx_size_cost_per_byte":{"type":"string","format":"uint64"},"sig_verify_cost_ed25519":{"type":"string","format":"uint64"},"sig_verify_cost_secp256k1":{"type":"string","format":"uint64"}}}},"description":"QueryParamsResponse is the response type for the Query/Params RPC method."},"cosmos.base.query.v1beta1.PageRequest":{"type":"object","properties":{"key":{"type":"string","format":"byte","description":"key is a value returned in PageResponse.next_key to begin\\nquerying the next page most efficiently. Only one of offset or key\\nshould be set."},"offset":{"type":"string","format":"uint64","description":"offset is a numeric offset that can be used when key is unavailable.\\nIt is less efficient than using key. Only one of offset or key should\\nbe set."},"limit":{"type":"string","format":"uint64","description":"limit is the total number of results to be returned in the result page.\\nIf left empty it will default to a value to be set by each app."},"count_total":{"type":"boolean","description":"count_total is set to true  to indicate that the result set should include\\na count of the total number of items available for pagination in UIs.\\ncount_total is only respected when offset is used. It is ignored when key\\nis set."},"reverse":{"type":"boolean","description":"reverse is set to true if results are to be returned in the descending order."}},"description":"message SomeRequest {\\n         Foo some_parameter = 1;\\n         PageRequest pagination = 2;\\n }","title":"PageRequest is to be embedded in gRPC request messages for efficient\\npagination. Ex:"},"cosmos.base.query.v1beta1.PageResponse":{"type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}},"description":"PageResponse is to be embedded in gRPC response messages where the\\ncorresponding request message has used PageRequest.\\n\\n message SomeResponse {\\n         repeated Bar results = 1;\\n         PageResponse page = 2;\\n }"},"google.protobuf.Any":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"google.rpc.Status":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"details":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}},"cosmos.bank.v1beta1.DenomOwner":{"type":"object","properties":{"address":{"type":"string","description":"address defines the address that owns a particular denomination."},"balance":{"description":"balance is the balance of the denominated coin for an account.","type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}}}},"description":"DenomOwner defines structure representing an account that owns or holds a\\nparticular denominated token. It contains the account address and account\\nbalance of the denominated token."},"cosmos.bank.v1beta1.DenomUnit":{"type":"object","properties":{"denom":{"type":"string","description":"denom represents the string name of the given denom unit (e.g uatom)."},"exponent":{"type":"integer","format":"int64","description":"exponent represents power of 10 exponent that one must\\nraise the base_denom to in order to equal the given DenomUnit\'s denom\\n1 denom = 10^exponent base_denom\\n(e.g. with a base_denom of uatom, one can create a DenomUnit of \'atom\' with\\nexponent = 6, thus: 1 atom = 10^6 uatom)."},"aliases":{"type":"array","items":{"type":"string"},"title":"aliases is a list of string aliases for the given denom"}},"description":"DenomUnit represents a struct that describes a given\\ndenomination unit of the basic token."},"cosmos.bank.v1beta1.Metadata":{"type":"object","properties":{"description":{"type":"string"},"denom_units":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string","description":"denom represents the string name of the given denom unit (e.g uatom)."},"exponent":{"type":"integer","format":"int64","description":"exponent represents power of 10 exponent that one must\\nraise the base_denom to in order to equal the given DenomUnit\'s denom\\n1 denom = 10^exponent base_denom\\n(e.g. with a base_denom of uatom, one can create a DenomUnit of \'atom\' with\\nexponent = 6, thus: 1 atom = 10^6 uatom)."},"aliases":{"type":"array","items":{"type":"string"},"title":"aliases is a list of string aliases for the given denom"}},"description":"DenomUnit represents a struct that describes a given\\ndenomination unit of the basic token."},"title":"denom_units represents the list of DenomUnit\'s for a given coin"},"base":{"type":"string","description":"base represents the base denom (should be the DenomUnit with exponent = 0)."},"display":{"type":"string","description":"display indicates the suggested denom that should be\\ndisplayed in clients."},"name":{"type":"string","title":"name defines the name of the token (eg: Cosmos Atom)"},"symbol":{"type":"string","description":"symbol is the token symbol usually shown on exchanges (eg: ATOM). This can\\nbe the same as the display."},"uri":{"type":"string","description":"URI to a document (on or off-chain) that contains additional information. Optional."},"uri_hash":{"type":"string","description":"URIHash is a sha256 hash of a document pointed by URI. It\'s used to verify that\\nthe document didn\'t change. Optional."}},"description":"Metadata represents a struct that describes\\na basic token."},"cosmos.bank.v1beta1.Params":{"type":"object","properties":{"send_enabled":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"enabled":{"type":"boolean"}},"description":"SendEnabled maps coin denom to a send_enabled status (whether a denom is\\nsendable)."},"description":"Deprecated: Use of SendEnabled in params is deprecated.\\nFor genesis, use the newly added send_enabled field in the genesis object.\\nStorage, lookup, and manipulation of this information is now in the keeper.\\n\\nAs of cosmos-sdk 0.47, this only exists for backwards compatibility of genesis files."},"default_send_enabled":{"type":"boolean"}},"description":"Params defines the parameters for the bank module."},"cosmos.bank.v1beta1.QueryAllBalancesResponse":{"type":"object","properties":{"balances":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"balances is the balances of all the coins."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryAllBalancesResponse is the response type for the Query/AllBalances RPC\\nmethod."},"cosmos.bank.v1beta1.QueryBalanceResponse":{"type":"object","properties":{"balance":{"description":"balance is the balance of the coin.","type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}}}},"description":"QueryBalanceResponse is the response type for the Query/Balance RPC method."},"cosmos.bank.v1beta1.QueryDenomMetadataByQueryStringResponse":{"type":"object","properties":{"metadata":{"description":"metadata describes and provides all the client information for the requested token.","type":"object","properties":{"description":{"type":"string"},"denom_units":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string","description":"denom represents the string name of the given denom unit (e.g uatom)."},"exponent":{"type":"integer","format":"int64","description":"exponent represents power of 10 exponent that one must\\nraise the base_denom to in order to equal the given DenomUnit\'s denom\\n1 denom = 10^exponent base_denom\\n(e.g. with a base_denom of uatom, one can create a DenomUnit of \'atom\' with\\nexponent = 6, thus: 1 atom = 10^6 uatom)."},"aliases":{"type":"array","items":{"type":"string"},"title":"aliases is a list of string aliases for the given denom"}},"description":"DenomUnit represents a struct that describes a given\\ndenomination unit of the basic token."},"title":"denom_units represents the list of DenomUnit\'s for a given coin"},"base":{"type":"string","description":"base represents the base denom (should be the DenomUnit with exponent = 0)."},"display":{"type":"string","description":"display indicates the suggested denom that should be\\ndisplayed in clients."},"name":{"type":"string","title":"name defines the name of the token (eg: Cosmos Atom)"},"symbol":{"type":"string","description":"symbol is the token symbol usually shown on exchanges (eg: ATOM). This can\\nbe the same as the display."},"uri":{"type":"string","description":"URI to a document (on or off-chain) that contains additional information. Optional."},"uri_hash":{"type":"string","description":"URIHash is a sha256 hash of a document pointed by URI. It\'s used to verify that\\nthe document didn\'t change. Optional."}}}},"description":"QueryDenomMetadataByQueryStringResponse is the response type for the Query/DenomMetadata RPC\\nmethod. Identical with QueryDenomMetadataResponse but receives denom as query string in request."},"cosmos.bank.v1beta1.QueryDenomMetadataResponse":{"type":"object","properties":{"metadata":{"description":"metadata describes and provides all the client information for the requested token.","type":"object","properties":{"description":{"type":"string"},"denom_units":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string","description":"denom represents the string name of the given denom unit (e.g uatom)."},"exponent":{"type":"integer","format":"int64","description":"exponent represents power of 10 exponent that one must\\nraise the base_denom to in order to equal the given DenomUnit\'s denom\\n1 denom = 10^exponent base_denom\\n(e.g. with a base_denom of uatom, one can create a DenomUnit of \'atom\' with\\nexponent = 6, thus: 1 atom = 10^6 uatom)."},"aliases":{"type":"array","items":{"type":"string"},"title":"aliases is a list of string aliases for the given denom"}},"description":"DenomUnit represents a struct that describes a given\\ndenomination unit of the basic token."},"title":"denom_units represents the list of DenomUnit\'s for a given coin"},"base":{"type":"string","description":"base represents the base denom (should be the DenomUnit with exponent = 0)."},"display":{"type":"string","description":"display indicates the suggested denom that should be\\ndisplayed in clients."},"name":{"type":"string","title":"name defines the name of the token (eg: Cosmos Atom)"},"symbol":{"type":"string","description":"symbol is the token symbol usually shown on exchanges (eg: ATOM). This can\\nbe the same as the display."},"uri":{"type":"string","description":"URI to a document (on or off-chain) that contains additional information. Optional."},"uri_hash":{"type":"string","description":"URIHash is a sha256 hash of a document pointed by URI. It\'s used to verify that\\nthe document didn\'t change. Optional."}}}},"description":"QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC\\nmethod."},"cosmos.bank.v1beta1.QueryDenomOwnersByQueryResponse":{"type":"object","properties":{"denom_owners":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","description":"address defines the address that owns a particular denomination."},"balance":{"description":"balance is the balance of the denominated coin for an account.","type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}}}},"description":"DenomOwner defines structure representing an account that owns or holds a\\nparticular denominated token. It contains the account address and account\\nbalance of the denominated token."}},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryDenomOwnersByQueryResponse defines the RPC response of a DenomOwnersByQuery RPC query."},"cosmos.bank.v1beta1.QueryDenomOwnersResponse":{"type":"object","properties":{"denom_owners":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","description":"address defines the address that owns a particular denomination."},"balance":{"description":"balance is the balance of the denominated coin for an account.","type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}}}},"description":"DenomOwner defines structure representing an account that owns or holds a\\nparticular denominated token. It contains the account address and account\\nbalance of the denominated token."}},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryDenomOwnersResponse defines the RPC response of a DenomOwners RPC query."},"cosmos.bank.v1beta1.QueryDenomsMetadataResponse":{"type":"object","properties":{"metadatas":{"type":"array","items":{"type":"object","properties":{"description":{"type":"string"},"denom_units":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string","description":"denom represents the string name of the given denom unit (e.g uatom)."},"exponent":{"type":"integer","format":"int64","description":"exponent represents power of 10 exponent that one must\\nraise the base_denom to in order to equal the given DenomUnit\'s denom\\n1 denom = 10^exponent base_denom\\n(e.g. with a base_denom of uatom, one can create a DenomUnit of \'atom\' with\\nexponent = 6, thus: 1 atom = 10^6 uatom)."},"aliases":{"type":"array","items":{"type":"string"},"title":"aliases is a list of string aliases for the given denom"}},"description":"DenomUnit represents a struct that describes a given\\ndenomination unit of the basic token."},"title":"denom_units represents the list of DenomUnit\'s for a given coin"},"base":{"type":"string","description":"base represents the base denom (should be the DenomUnit with exponent = 0)."},"display":{"type":"string","description":"display indicates the suggested denom that should be\\ndisplayed in clients."},"name":{"type":"string","title":"name defines the name of the token (eg: Cosmos Atom)"},"symbol":{"type":"string","description":"symbol is the token symbol usually shown on exchanges (eg: ATOM). This can\\nbe the same as the display."},"uri":{"type":"string","description":"URI to a document (on or off-chain) that contains additional information. Optional."},"uri_hash":{"type":"string","description":"URIHash is a sha256 hash of a document pointed by URI. It\'s used to verify that\\nthe document didn\'t change. Optional."}},"description":"Metadata represents a struct that describes\\na basic token."},"description":"metadata provides the client information for all the registered tokens."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC\\nmethod."},"cosmos.bank.v1beta1.QueryParamsResponse":{"type":"object","properties":{"params":{"description":"params provides the parameters of the bank module.","type":"object","properties":{"send_enabled":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"enabled":{"type":"boolean"}},"description":"SendEnabled maps coin denom to a send_enabled status (whether a denom is\\nsendable)."},"description":"Deprecated: Use of SendEnabled in params is deprecated.\\nFor genesis, use the newly added send_enabled field in the genesis object.\\nStorage, lookup, and manipulation of this information is now in the keeper.\\n\\nAs of cosmos-sdk 0.47, this only exists for backwards compatibility of genesis files."},"default_send_enabled":{"type":"boolean"}}}},"description":"QueryParamsResponse defines the response type for querying x/bank parameters."},"cosmos.bank.v1beta1.QuerySendEnabledResponse":{"type":"object","properties":{"send_enabled":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"enabled":{"type":"boolean"}},"description":"SendEnabled maps coin denom to a send_enabled status (whether a denom is\\nsendable)."}},"pagination":{"description":"pagination defines the pagination in the response. This field is only\\npopulated if the denoms field in the request is empty.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QuerySendEnabledResponse defines the RPC response of a SendEnable query."},"cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse":{"type":"object","properties":{"balance":{"description":"balance is the balance of the coin.","type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}}}},"description":"QuerySpendableBalanceByDenomResponse defines the gRPC response structure for\\nquerying an account\'s spendable balance for a specific denom."},"cosmos.bank.v1beta1.QuerySpendableBalancesResponse":{"type":"object","properties":{"balances":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"balances is the spendable balances of all the coins."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QuerySpendableBalancesResponse defines the gRPC response structure for querying\\nan account\'s spendable balances."},"cosmos.bank.v1beta1.QuerySupplyOfResponse":{"type":"object","properties":{"amount":{"description":"amount is the supply of the coin.","type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}}}},"description":"QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method."},"cosmos.bank.v1beta1.QueryTotalSupplyResponse":{"type":"object","properties":{"supply":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"title":"supply is the supply of the coins"},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"title":"QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC\\nmethod"},"cosmos.bank.v1beta1.SendEnabled":{"type":"object","properties":{"denom":{"type":"string"},"enabled":{"type":"boolean"}},"description":"SendEnabled maps coin denom to a send_enabled status (whether a denom is\\nsendable)."},"cosmos.base.v1beta1.Coin":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"cometbft.crypto.v1.ProofOp":{"type":"object","properties":{"type":{"type":"string"},"key":{"type":"string","format":"byte"},"data":{"type":"string","format":"byte"}},"title":"ProofOp defines an operation used for calculating Merkle root\\nThe data could be arbitrary format, providing necessary data\\nfor example neighbouring node hash"},"cometbft.crypto.v1.ProofOps":{"type":"object","properties":{"ops":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"key":{"type":"string","format":"byte"},"data":{"type":"string","format":"byte"}},"title":"ProofOp defines an operation used for calculating Merkle root\\nThe data could be arbitrary format, providing necessary data\\nfor example neighbouring node hash"}}},"title":"ProofOps is Merkle proof defined by the list of ProofOps"},"cometbft.crypto.v1.PublicKey":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"cometbft.p2p.v1.DefaultNodeInfo":{"type":"object","properties":{"protocol_version":{"type":"object","properties":{"p2p":{"type":"string","format":"uint64"},"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"ProtocolVersion represents the current p2p protocol version."},"default_node_id":{"type":"string"},"listen_addr":{"type":"string"},"network":{"type":"string"},"version":{"type":"string"},"channels":{"type":"string","format":"byte"},"moniker":{"type":"string"},"other":{"type":"object","properties":{"tx_index":{"type":"string"},"rpc_address":{"type":"string"}},"description":"DefaultNodeInfoOther is the misc. application specific data."}},"description":"DefaultNodeInfo is a basic node\'s information sent to other peers during the\\np2p handshake."},"cometbft.p2p.v1.DefaultNodeInfoOther":{"type":"object","properties":{"tx_index":{"type":"string"},"rpc_address":{"type":"string"}},"description":"DefaultNodeInfoOther is the misc. application specific data."},"cometbft.p2p.v1.ProtocolVersion":{"type":"object","properties":{"p2p":{"type":"string","format":"uint64"},"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"ProtocolVersion represents the current p2p protocol version."},"cometbft.types.v1.Block":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"data":{"type":"object","properties":{"txs":{"type":"array","items":{"type":"string","format":"byte"},"description":"Txs that will be applied by state @ block.Height+1.\\nNOTE: not all txs here are valid.  We\'re just agreeing on the order first.\\nThis means that block.AppHash does not include these txs."}},"title":"Data contains the set of transactions included in the block"},"evidence":{"type":"object","properties":{"evidence":{"type":"array","items":{"type":"object","properties":{"duplicate_vote_evidence":{"type":"object","properties":{"vote_a":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"vote_b":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"total_voting_power":{"type":"string","format":"int64"},"validator_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},"light_client_attack_evidence":{"type":"object","properties":{"conflicting_block":{"type":"object","properties":{"signed_header":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it."},"validator_set":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"proposer":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."},"total_voting_power":{"type":"string","format":"int64"}},"description":"ValidatorSet defines a set of validators."}},"description":"LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients."},"common_height":{"type":"string","format":"int64"},"byzantine_validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"total_voting_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."}},"description":"Evidence is a generic type for wrapping evidence of misbehavior by a validator."}}},"description":"EvidenceList is a list of evidence."},"last_commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"Block defines the structure of a block in the CometBFT blockchain."},"cometbft.types.v1.BlockID":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"cometbft.types.v1.BlockIDFlag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"cometbft.types.v1.Commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."},"cometbft.types.v1.CommitSig":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."},"cometbft.types.v1.Data":{"type":"object","properties":{"txs":{"type":"array","items":{"type":"string","format":"byte"},"description":"Txs that will be applied by state @ block.Height+1.\\nNOTE: not all txs here are valid.  We\'re just agreeing on the order first.\\nThis means that block.AppHash does not include these txs."}},"title":"Data contains the set of transactions included in the block"},"cometbft.types.v1.DuplicateVoteEvidence":{"type":"object","properties":{"vote_a":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"vote_b":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"total_voting_power":{"type":"string","format":"int64"},"validator_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},"cometbft.types.v1.Evidence":{"type":"object","properties":{"duplicate_vote_evidence":{"type":"object","properties":{"vote_a":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"vote_b":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"total_voting_power":{"type":"string","format":"int64"},"validator_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},"light_client_attack_evidence":{"type":"object","properties":{"conflicting_block":{"type":"object","properties":{"signed_header":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it."},"validator_set":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"proposer":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."},"total_voting_power":{"type":"string","format":"int64"}},"description":"ValidatorSet defines a set of validators."}},"description":"LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients."},"common_height":{"type":"string","format":"int64"},"byzantine_validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"total_voting_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."}},"description":"Evidence is a generic type for wrapping evidence of misbehavior by a validator."},"cometbft.types.v1.EvidenceList":{"type":"object","properties":{"evidence":{"type":"array","items":{"type":"object","properties":{"duplicate_vote_evidence":{"type":"object","properties":{"vote_a":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"vote_b":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"total_voting_power":{"type":"string","format":"int64"},"validator_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},"light_client_attack_evidence":{"type":"object","properties":{"conflicting_block":{"type":"object","properties":{"signed_header":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it."},"validator_set":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"proposer":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."},"total_voting_power":{"type":"string","format":"int64"}},"description":"ValidatorSet defines a set of validators."}},"description":"LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients."},"common_height":{"type":"string","format":"int64"},"byzantine_validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"total_voting_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."}},"description":"Evidence is a generic type for wrapping evidence of misbehavior by a validator."}}},"description":"EvidenceList is a list of evidence."},"cometbft.types.v1.Header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"cometbft.types.v1.LightBlock":{"type":"object","properties":{"signed_header":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it."},"validator_set":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"proposer":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."},"total_voting_power":{"type":"string","format":"int64"}},"description":"ValidatorSet defines a set of validators."}},"description":"LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients."},"cometbft.types.v1.LightClientAttackEvidence":{"type":"object","properties":{"conflicting_block":{"type":"object","properties":{"signed_header":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it."},"validator_set":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"proposer":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."},"total_voting_power":{"type":"string","format":"int64"}},"description":"ValidatorSet defines a set of validators."}},"description":"LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients."},"common_height":{"type":"string","format":"int64"},"byzantine_validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"total_voting_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."},"cometbft.types.v1.PartSetHeader":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."},"cometbft.types.v1.SignedHeader":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it."},"cometbft.types.v1.SignedMsgType":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"cometbft.types.v1.Validator":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."},"cometbft.types.v1.ValidatorSet":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"proposer":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."},"total_voting_power":{"type":"string","format":"int64"}},"description":"ValidatorSet defines a set of validators."},"cometbft.types.v1.Vote":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"cometbft.version.v1.Consensus":{"type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"cosmos.base.tendermint.v1beta1.ABCIQueryResponse":{"type":"object","properties":{"code":{"type":"integer","format":"int64"},"log":{"type":"string","title":"nondeterministic"},"info":{"type":"string","title":"nondeterministic"},"index":{"type":"string","format":"int64"},"key":{"type":"string","format":"byte"},"value":{"type":"string","format":"byte"},"height":{"type":"string","format":"int64"},"codespace":{"type":"string"},"proof_ops":{"type":"object","properties":{"ops":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"key":{"type":"string","format":"byte"},"data":{"type":"string","format":"byte"}},"title":"ProofOp defines an operation used for calculating Merkle root\\nThe data could be arbitrary format, providing necessary data\\nfor example neighbouring node hash"}}},"title":"ProofOps is Merkle proof defined by the list of ProofOps"}},"description":"ABCIQueryResponse defines the response structure for the ABCIQuery gRPC query.\\n\\nNote: This type is a duplicate of the ResponseQuery proto type defined in\\nTendermint."},"cosmos.base.tendermint.v1beta1.Block":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","description":"proposer_address is the original block proposer address, formatted as a Bech32 string.\\nIn Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string\\nfor better UX.\\n\\noriginal proposer of the block"}},"description":"Header defines the structure of a Tendermint block header."},"data":{"type":"object","properties":{"txs":{"type":"array","items":{"type":"string","format":"byte"},"description":"Txs that will be applied by state @ block.Height+1.\\nNOTE: not all txs here are valid.  We\'re just agreeing on the order first.\\nThis means that block.AppHash does not include these txs."}},"title":"Data contains the set of transactions included in the block"},"evidence":{"type":"object","properties":{"evidence":{"type":"array","items":{"type":"object","properties":{"duplicate_vote_evidence":{"type":"object","properties":{"vote_a":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"vote_b":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"total_voting_power":{"type":"string","format":"int64"},"validator_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},"light_client_attack_evidence":{"type":"object","properties":{"conflicting_block":{"type":"object","properties":{"signed_header":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it."},"validator_set":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"proposer":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."},"total_voting_power":{"type":"string","format":"int64"}},"description":"ValidatorSet defines a set of validators."}},"description":"LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients."},"common_height":{"type":"string","format":"int64"},"byzantine_validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"total_voting_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."}},"description":"Evidence is a generic type for wrapping evidence of misbehavior by a validator."}}},"description":"EvidenceList is a list of evidence."},"last_commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"Block is tendermint type Block, with the Header proposer address\\nfield converted to bech32 string."},"cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse":{"type":"object","properties":{"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"block":{"title":"Deprecated: please use `sdk_block` instead","type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"data":{"type":"object","properties":{"txs":{"type":"array","items":{"type":"string","format":"byte"},"description":"Txs that will be applied by state @ block.Height+1.\\nNOTE: not all txs here are valid.  We\'re just agreeing on the order first.\\nThis means that block.AppHash does not include these txs."}},"title":"Data contains the set of transactions included in the block"},"evidence":{"type":"object","properties":{"evidence":{"type":"array","items":{"type":"object","properties":{"duplicate_vote_evidence":{"type":"object","properties":{"vote_a":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"vote_b":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"total_voting_power":{"type":"string","format":"int64"},"validator_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},"light_client_attack_evidence":{"type":"object","properties":{"conflicting_block":{"type":"object","properties":{"signed_header":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it."},"validator_set":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"proposer":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."},"total_voting_power":{"type":"string","format":"int64"}},"description":"ValidatorSet defines a set of validators."}},"description":"LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients."},"common_height":{"type":"string","format":"int64"},"byzantine_validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"total_voting_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."}},"description":"Evidence is a generic type for wrapping evidence of misbehavior by a validator."}}},"description":"EvidenceList is a list of evidence."},"last_commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"Block defines the structure of a block in the CometBFT blockchain."},"sdk_block":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","description":"proposer_address is the original block proposer address, formatted as a Bech32 string.\\nIn Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string\\nfor better UX.\\n\\noriginal proposer of the block"}},"description":"Header defines the structure of a Tendermint block header."},"data":{"type":"object","properties":{"txs":{"type":"array","items":{"type":"string","format":"byte"},"description":"Txs that will be applied by state @ block.Height+1.\\nNOTE: not all txs here are valid.  We\'re just agreeing on the order first.\\nThis means that block.AppHash does not include these txs."}},"title":"Data contains the set of transactions included in the block"},"evidence":{"type":"object","properties":{"evidence":{"type":"array","items":{"type":"object","properties":{"duplicate_vote_evidence":{"type":"object","properties":{"vote_a":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"vote_b":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"total_voting_power":{"type":"string","format":"int64"},"validator_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},"light_client_attack_evidence":{"type":"object","properties":{"conflicting_block":{"type":"object","properties":{"signed_header":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it."},"validator_set":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"proposer":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."},"total_voting_power":{"type":"string","format":"int64"}},"description":"ValidatorSet defines a set of validators."}},"description":"LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients."},"common_height":{"type":"string","format":"int64"},"byzantine_validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"total_voting_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."}},"description":"Evidence is a generic type for wrapping evidence of misbehavior by a validator."}}},"description":"EvidenceList is a list of evidence."},"last_commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"Block is tendermint type Block, with the Header proposer address\\nfield converted to bech32 string."}},"description":"GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight RPC method."},"cosmos.base.tendermint.v1beta1.GetLatestBlockResponse":{"type":"object","properties":{"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"block":{"title":"Deprecated: please use `sdk_block` instead","type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"data":{"type":"object","properties":{"txs":{"type":"array","items":{"type":"string","format":"byte"},"description":"Txs that will be applied by state @ block.Height+1.\\nNOTE: not all txs here are valid.  We\'re just agreeing on the order first.\\nThis means that block.AppHash does not include these txs."}},"title":"Data contains the set of transactions included in the block"},"evidence":{"type":"object","properties":{"evidence":{"type":"array","items":{"type":"object","properties":{"duplicate_vote_evidence":{"type":"object","properties":{"vote_a":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"vote_b":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"total_voting_power":{"type":"string","format":"int64"},"validator_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},"light_client_attack_evidence":{"type":"object","properties":{"conflicting_block":{"type":"object","properties":{"signed_header":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it."},"validator_set":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"proposer":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."},"total_voting_power":{"type":"string","format":"int64"}},"description":"ValidatorSet defines a set of validators."}},"description":"LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients."},"common_height":{"type":"string","format":"int64"},"byzantine_validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"total_voting_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."}},"description":"Evidence is a generic type for wrapping evidence of misbehavior by a validator."}}},"description":"EvidenceList is a list of evidence."},"last_commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"Block defines the structure of a block in the CometBFT blockchain."},"sdk_block":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","description":"proposer_address is the original block proposer address, formatted as a Bech32 string.\\nIn Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string\\nfor better UX.\\n\\noriginal proposer of the block"}},"description":"Header defines the structure of a Tendermint block header."},"data":{"type":"object","properties":{"txs":{"type":"array","items":{"type":"string","format":"byte"},"description":"Txs that will be applied by state @ block.Height+1.\\nNOTE: not all txs here are valid.  We\'re just agreeing on the order first.\\nThis means that block.AppHash does not include these txs."}},"title":"Data contains the set of transactions included in the block"},"evidence":{"type":"object","properties":{"evidence":{"type":"array","items":{"type":"object","properties":{"duplicate_vote_evidence":{"type":"object","properties":{"vote_a":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"vote_b":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"total_voting_power":{"type":"string","format":"int64"},"validator_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},"light_client_attack_evidence":{"type":"object","properties":{"conflicting_block":{"type":"object","properties":{"signed_header":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it."},"validator_set":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"proposer":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."},"total_voting_power":{"type":"string","format":"int64"}},"description":"ValidatorSet defines a set of validators."}},"description":"LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients."},"common_height":{"type":"string","format":"int64"},"byzantine_validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"total_voting_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."}},"description":"Evidence is a generic type for wrapping evidence of misbehavior by a validator."}}},"description":"EvidenceList is a list of evidence."},"last_commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"Block is tendermint type Block, with the Header proposer address\\nfield converted to bech32 string."}},"description":"GetLatestBlockResponse is the response type for the Query/GetLatestBlock RPC method."},"cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse":{"type":"object","properties":{"block_height":{"type":"string","format":"int64"},"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string"},"pub_key":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator is the type for the validator-set."}},"pagination":{"description":"pagination defines an pagination for the response. offset and limit are used for pagination, next_key is not\\nsupported for this query.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"GetLatestValidatorSetResponse is the response type for the Query/GetValidatorSetByHeight RPC method."},"cosmos.base.tendermint.v1beta1.GetNodeInfoResponse":{"type":"object","properties":{"default_node_info":{"type":"object","properties":{"protocol_version":{"type":"object","properties":{"p2p":{"type":"string","format":"uint64"},"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"ProtocolVersion represents the current p2p protocol version."},"default_node_id":{"type":"string"},"listen_addr":{"type":"string"},"network":{"type":"string"},"version":{"type":"string"},"channels":{"type":"string","format":"byte"},"moniker":{"type":"string"},"other":{"type":"object","properties":{"tx_index":{"type":"string"},"rpc_address":{"type":"string"}},"description":"DefaultNodeInfoOther is the misc. application specific data."}},"description":"DefaultNodeInfo is a basic node\'s information sent to other peers during the\\np2p handshake."},"application_version":{"type":"object","properties":{"name":{"type":"string"},"app_name":{"type":"string"},"version":{"type":"string"},"git_commit":{"type":"string"},"build_tags":{"type":"string"},"go_version":{"type":"string"},"build_deps":{"type":"array","items":{"type":"object","properties":{"path":{"type":"string","title":"module path"},"version":{"type":"string","title":"module version"},"sum":{"type":"string","title":"checksum"}},"title":"Module is the type for VersionInfo"}},"cosmos_sdk_version":{"type":"string"},"comet_server_version":{"type":"string"},"runtime_version":{"type":"string"},"stf_version":{"type":"string"}},"description":"VersionInfo is the type for the GetNodeInfoResponse message."}},"description":"GetNodeInfoResponse is the response type for the Query/GetNodeInfo RPC method."},"cosmos.base.tendermint.v1beta1.GetSyncingResponse":{"type":"object","properties":{"syncing":{"type":"boolean"}},"description":"GetSyncingResponse is the response type for the Query/GetSyncing RPC method."},"cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse":{"type":"object","properties":{"block_height":{"type":"string","format":"int64"},"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string"},"pub_key":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator is the type for the validator-set."}},"pagination":{"description":"pagination defines an pagination for the response. offset and limit are used for pagination, next_key is not\\nsupported for this query.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"GetValidatorSetByHeightResponse is the response type for the Query/GetValidatorSetByHeight RPC method."},"cosmos.base.tendermint.v1beta1.Header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","description":"proposer_address is the original block proposer address, formatted as a Bech32 string.\\nIn Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string\\nfor better UX.\\n\\noriginal proposer of the block"}},"description":"Header defines the structure of a Tendermint block header."},"cosmos.base.tendermint.v1beta1.Module":{"type":"object","properties":{"path":{"type":"string","title":"module path"},"version":{"type":"string","title":"module version"},"sum":{"type":"string","title":"checksum"}},"title":"Module is the type for VersionInfo"},"cosmos.base.tendermint.v1beta1.Validator":{"type":"object","properties":{"address":{"type":"string"},"pub_key":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator is the type for the validator-set."},"cosmos.base.tendermint.v1beta1.VersionInfo":{"type":"object","properties":{"name":{"type":"string"},"app_name":{"type":"string"},"version":{"type":"string"},"git_commit":{"type":"string"},"build_tags":{"type":"string"},"go_version":{"type":"string"},"build_deps":{"type":"array","items":{"type":"object","properties":{"path":{"type":"string","title":"module path"},"version":{"type":"string","title":"module version"},"sum":{"type":"string","title":"checksum"}},"title":"Module is the type for VersionInfo"}},"cosmos_sdk_version":{"type":"string"},"comet_server_version":{"type":"string"},"runtime_version":{"type":"string"},"stf_version":{"type":"string"}},"description":"VersionInfo is the type for the GetNodeInfoResponse message."},"cosmos.base.node.v1beta1.ConfigResponse":{"type":"object","properties":{"minimum_gas_price":{"type":"string"},"pruning_keep_recent":{"type":"string"},"pruning_interval":{"type":"string"},"halt_height":{"type":"string","format":"uint64"}},"description":"ConfigResponse defines the response structure for the Config gRPC query."},"cosmos.base.node.v1beta1.StatusResponse":{"type":"object","properties":{"earliest_store_height":{"type":"string","format":"uint64","title":"earliest block height available in the store"},"height":{"type":"string","format":"uint64","title":"current block height"},"timestamp":{"type":"string","format":"date-time","title":"block height timestamp"},"app_hash":{"type":"string","format":"byte","title":"app hash of the current block"},"validator_hash":{"type":"string","format":"byte","title":"validator hash provided by the consensus header"}},"description":"StatusResponse defines the response structure for the status of a node."},"cosmos.base.v1beta1.DecCoin":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."},"cosmos.distribution.v1beta1.DelegationDelegatorReward":{"type":"object","properties":{"validator_address":{"type":"string"},"reward":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."}}},"description":"DelegationDelegatorReward represents the properties\\nof a delegator\'s delegation reward."},"cosmos.distribution.v1beta1.Params":{"type":"object","properties":{"community_tax":{"type":"string"},"base_proposer_reward":{"type":"string","description":"Deprecated: The base_proposer_reward field is deprecated and is no longer used\\nin the x/distribution module\'s reward mechanism."},"bonus_proposer_reward":{"type":"string","description":"Deprecated: The bonus_proposer_reward field is deprecated and is no longer used\\nin the x/distribution module\'s reward mechanism."},"withdraw_addr_enabled":{"type":"boolean"}},"description":"Params defines the set of params for the distribution module."},"cosmos.distribution.v1beta1.QueryCommunityPoolResponse":{"type":"object","properties":{"pool":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."},"description":"pool defines community pool\'s coins."}},"description":"QueryCommunityPoolResponse is the response type for the Query/CommunityPool\\nRPC method.\\n\\nDeprecated"},"cosmos.distribution.v1beta1.QueryDelegationRewardsResponse":{"type":"object","properties":{"rewards":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."},"description":"rewards defines the rewards accrued by a delegation."}},"description":"QueryDelegationRewardsResponse is the response type for the\\nQuery/DelegationRewards RPC method."},"cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse":{"type":"object","properties":{"rewards":{"type":"array","items":{"type":"object","properties":{"validator_address":{"type":"string"},"reward":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."}}},"description":"DelegationDelegatorReward represents the properties\\nof a delegator\'s delegation reward."},"description":"rewards defines all the rewards accrued by a delegator."},"total":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."},"description":"total defines the sum of all the rewards."}},"description":"QueryDelegationTotalRewardsResponse is the response type for the\\nQuery/DelegationTotalRewards RPC method."},"cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"string"},"description":"validators defines the validators a delegator is delegating for."}},"description":"QueryDelegatorValidatorsResponse is the response type for the\\nQuery/DelegatorValidators RPC method."},"cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse":{"type":"object","properties":{"withdraw_address":{"type":"string","description":"withdraw_address defines the delegator address to query for."}},"description":"QueryDelegatorWithdrawAddressResponse is the response type for the\\nQuery/DelegatorWithdrawAddress RPC method."},"cosmos.distribution.v1beta1.QueryParamsResponse":{"type":"object","properties":{"params":{"description":"params defines the parameters of the module.","type":"object","properties":{"community_tax":{"type":"string"},"base_proposer_reward":{"type":"string","description":"Deprecated: The base_proposer_reward field is deprecated and is no longer used\\nin the x/distribution module\'s reward mechanism."},"bonus_proposer_reward":{"type":"string","description":"Deprecated: The bonus_proposer_reward field is deprecated and is no longer used\\nin the x/distribution module\'s reward mechanism."},"withdraw_addr_enabled":{"type":"boolean"}}}},"description":"QueryParamsResponse is the response type for the Query/Params RPC method."},"cosmos.distribution.v1beta1.QueryValidatorCommissionResponse":{"type":"object","properties":{"commission":{"description":"commission defines the commission the validator received.","type":"object","properties":{"commission":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."}}}}},"title":"QueryValidatorCommissionResponse is the response type for the\\nQuery/ValidatorCommission RPC method"},"cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse":{"type":"object","properties":{"operator_address":{"type":"string","description":"operator_address defines the validator operator address."},"self_bond_rewards":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."},"description":"self_bond_rewards defines the self delegations rewards."},"commission":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."},"description":"commission defines the commission the validator received."}},"description":"QueryValidatorDistributionInfoResponse is the response type for the Query/ValidatorDistributionInfo RPC method."},"cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse":{"type":"object","properties":{"rewards":{"type":"object","properties":{"rewards":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."}}},"description":"ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards\\nfor a validator inexpensive to track, allows simple sanity checks."}},"description":"QueryValidatorOutstandingRewardsResponse is the response type for the\\nQuery/ValidatorOutstandingRewards RPC method."},"cosmos.distribution.v1beta1.QueryValidatorSlashesResponse":{"type":"object","properties":{"slashes":{"type":"array","items":{"type":"object","properties":{"validator_period":{"type":"string","format":"uint64"},"fraction":{"type":"string"}},"description":"ValidatorSlashEvent represents a validator slash event.\\nHeight is implicit within the store key.\\nThis is needed to calculate appropriate amount of staking tokens\\nfor delegations which are withdrawn after a slash has occurred."},"description":"slashes defines the slashes the validator received."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryValidatorSlashesResponse is the response type for the\\nQuery/ValidatorSlashes RPC method."},"cosmos.distribution.v1beta1.ValidatorAccumulatedCommission":{"type":"object","properties":{"commission":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."}}},"description":"ValidatorAccumulatedCommission represents accumulated commission\\nfor a validator kept as a running counter, can be withdrawn at any time."},"cosmos.distribution.v1beta1.ValidatorOutstandingRewards":{"type":"object","properties":{"rewards":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."}}},"description":"ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards\\nfor a validator inexpensive to track, allows simple sanity checks."},"cosmos.distribution.v1beta1.ValidatorSlashEvent":{"type":"object","properties":{"validator_period":{"type":"string","format":"uint64"},"fraction":{"type":"string"}},"description":"ValidatorSlashEvent represents a validator slash event.\\nHeight is implicit within the store key.\\nThis is needed to calculate appropriate amount of staking tokens\\nfor delegations which are withdrawn after a slash has occurred."},"cosmos.evidence.v1beta1.QueryAllEvidenceResponse":{"type":"object","properties":{"evidence":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"description":"evidence returns all evidences."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC\\nmethod."},"cosmos.evidence.v1beta1.QueryEvidenceResponse":{"type":"object","properties":{"evidence":{"description":"evidence returns the requested evidence.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}}},"description":"QueryEvidenceResponse is the response type for the Query/Evidence RPC method."},"cosmos.gov.v1beta1.Deposit":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"depositor":{"type":"string","description":"depositor defines the deposit addresses from the proposals."},"amount":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"amount to be deposited by depositor."}},"description":"Deposit defines an amount deposited by an account address to an active\\nproposal."},"cosmos.gov.v1beta1.DepositParams":{"type":"object","properties":{"min_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"Minimum deposit for a proposal to enter voting period."},"max_deposit_period":{"type":"string","description":"Maximum period for Atom holders to deposit on a proposal. Initial value: 2\\nmonths."}},"description":"DepositParams defines the params for deposits on governance proposals."},"cosmos.gov.v1beta1.Proposal":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"content":{"description":"content is the proposal\'s content.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"status":{"description":"status defines the proposal status.","type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_DEPOSIT_PERIOD","PROPOSAL_STATUS_VOTING_PERIOD","PROPOSAL_STATUS_PASSED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_FAILED"],"default":"PROPOSAL_STATUS_UNSPECIFIED"},"final_tally_result":{"description":"final_tally_result is the final tally result of the proposal. When\\nquerying a proposal via gRPC, this field is not populated until the\\nproposal\'s voting period has ended.","type":"object","properties":{"yes":{"type":"string","description":"yes is the number of yes votes on a proposal."},"abstain":{"type":"string","description":"abstain is the number of abstain votes on a proposal."},"no":{"type":"string","description":"no is the number of no votes on a proposal."},"no_with_veto":{"type":"string","description":"no_with_veto is the number of no with veto votes on a proposal."}}},"submit_time":{"type":"string","format":"date-time","description":"submit_time is the time of proposal submission."},"deposit_end_time":{"type":"string","format":"date-time","description":"deposit_end_time is the end time for deposition."},"total_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"total_deposit is the total deposit on the proposal."},"voting_start_time":{"type":"string","format":"date-time","description":"voting_start_time is the starting time to vote on a proposal."},"voting_end_time":{"type":"string","format":"date-time","description":"voting_end_time is the end time of voting on a proposal."}},"description":"Proposal defines the core field members of a governance proposal."},"cosmos.gov.v1beta1.ProposalStatus":{"type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_DEPOSIT_PERIOD","PROPOSAL_STATUS_VOTING_PERIOD","PROPOSAL_STATUS_PASSED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_FAILED"],"default":"PROPOSAL_STATUS_UNSPECIFIED","description":"ProposalStatus enumerates the valid statuses of a proposal.\\n\\n - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.\\n - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit\\nperiod.\\n - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting\\nperiod.\\n - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has\\npassed.\\n - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has\\nbeen rejected.\\n - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has\\nfailed."},"cosmos.gov.v1beta1.QueryDepositResponse":{"type":"object","properties":{"deposit":{"description":"deposit defines the requested deposit.","type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"depositor":{"type":"string","description":"depositor defines the deposit addresses from the proposals."},"amount":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"amount to be deposited by depositor."}}}},"description":"QueryDepositResponse is the response type for the Query/Deposit RPC method."},"cosmos.gov.v1beta1.QueryDepositsResponse":{"type":"object","properties":{"deposits":{"type":"array","items":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"depositor":{"type":"string","description":"depositor defines the deposit addresses from the proposals."},"amount":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"amount to be deposited by depositor."}},"description":"Deposit defines an amount deposited by an account address to an active\\nproposal."},"description":"deposits defines the requested deposits."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryDepositsResponse is the response type for the Query/Deposits RPC method."},"cosmos.gov.v1beta1.QueryParamsResponse":{"type":"object","properties":{"voting_params":{"description":"voting_params defines the parameters related to voting.","type":"object","properties":{"voting_period":{"type":"string","description":"Duration of the voting period."}}},"deposit_params":{"description":"deposit_params defines the parameters related to deposit.","type":"object","properties":{"min_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"Minimum deposit for a proposal to enter voting period."},"max_deposit_period":{"type":"string","description":"Maximum period for Atom holders to deposit on a proposal. Initial value: 2\\nmonths."}}},"tally_params":{"description":"tally_params defines the parameters related to tally.","type":"object","properties":{"quorum":{"type":"string","format":"byte","description":"Minimum percentage of total stake needed to vote for a result to be\\nconsidered valid."},"threshold":{"type":"string","format":"byte","description":"Minimum proportion of Yes votes for proposal to pass. Default value: 0.5."},"veto_threshold":{"type":"string","format":"byte","description":"Minimum value of Veto votes to Total votes ratio for proposal to be\\nvetoed. Default value: 1/3."}}}},"description":"QueryParamsResponse is the response type for the Query/Params RPC method."},"cosmos.gov.v1beta1.QueryProposalResponse":{"type":"object","properties":{"proposal":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"content":{"description":"content is the proposal\'s content.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"status":{"description":"status defines the proposal status.","type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_DEPOSIT_PERIOD","PROPOSAL_STATUS_VOTING_PERIOD","PROPOSAL_STATUS_PASSED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_FAILED"],"default":"PROPOSAL_STATUS_UNSPECIFIED"},"final_tally_result":{"description":"final_tally_result is the final tally result of the proposal. When\\nquerying a proposal via gRPC, this field is not populated until the\\nproposal\'s voting period has ended.","type":"object","properties":{"yes":{"type":"string","description":"yes is the number of yes votes on a proposal."},"abstain":{"type":"string","description":"abstain is the number of abstain votes on a proposal."},"no":{"type":"string","description":"no is the number of no votes on a proposal."},"no_with_veto":{"type":"string","description":"no_with_veto is the number of no with veto votes on a proposal."}}},"submit_time":{"type":"string","format":"date-time","description":"submit_time is the time of proposal submission."},"deposit_end_time":{"type":"string","format":"date-time","description":"deposit_end_time is the end time for deposition."},"total_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"total_deposit is the total deposit on the proposal."},"voting_start_time":{"type":"string","format":"date-time","description":"voting_start_time is the starting time to vote on a proposal."},"voting_end_time":{"type":"string","format":"date-time","description":"voting_end_time is the end time of voting on a proposal."}},"description":"Proposal defines the core field members of a governance proposal."}},"description":"QueryProposalResponse is the response type for the Query/Proposal RPC method."},"cosmos.gov.v1beta1.QueryProposalsResponse":{"type":"object","properties":{"proposals":{"type":"array","items":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"content":{"description":"content is the proposal\'s content.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"status":{"description":"status defines the proposal status.","type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_DEPOSIT_PERIOD","PROPOSAL_STATUS_VOTING_PERIOD","PROPOSAL_STATUS_PASSED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_FAILED"],"default":"PROPOSAL_STATUS_UNSPECIFIED"},"final_tally_result":{"description":"final_tally_result is the final tally result of the proposal. When\\nquerying a proposal via gRPC, this field is not populated until the\\nproposal\'s voting period has ended.","type":"object","properties":{"yes":{"type":"string","description":"yes is the number of yes votes on a proposal."},"abstain":{"type":"string","description":"abstain is the number of abstain votes on a proposal."},"no":{"type":"string","description":"no is the number of no votes on a proposal."},"no_with_veto":{"type":"string","description":"no_with_veto is the number of no with veto votes on a proposal."}}},"submit_time":{"type":"string","format":"date-time","description":"submit_time is the time of proposal submission."},"deposit_end_time":{"type":"string","format":"date-time","description":"deposit_end_time is the end time for deposition."},"total_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"total_deposit is the total deposit on the proposal."},"voting_start_time":{"type":"string","format":"date-time","description":"voting_start_time is the starting time to vote on a proposal."},"voting_end_time":{"type":"string","format":"date-time","description":"voting_end_time is the end time of voting on a proposal."}},"description":"Proposal defines the core field members of a governance proposal."},"description":"proposals defines all the requested governance proposals."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryProposalsResponse is the response type for the Query/Proposals RPC\\nmethod."},"cosmos.gov.v1beta1.QueryTallyResultResponse":{"type":"object","properties":{"tally":{"description":"tally defines the requested tally.","type":"object","properties":{"yes":{"type":"string","description":"yes is the number of yes votes on a proposal."},"abstain":{"type":"string","description":"abstain is the number of abstain votes on a proposal."},"no":{"type":"string","description":"no is the number of no votes on a proposal."},"no_with_veto":{"type":"string","description":"no_with_veto is the number of no with veto votes on a proposal."}}}},"description":"QueryTallyResultResponse is the response type for the Query/Tally RPC method."},"cosmos.gov.v1beta1.QueryVoteResponse":{"type":"object","properties":{"vote":{"description":"vote defines the queried vote.","type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"voter":{"type":"string","description":"voter is the voter address of the proposal."},"option":{"description":"Deprecated: Prefer to use `options` instead. This field is set in queries\\nif and only if `len(options) == 1` and that option has weight 1. In all\\nother cases, this field will default to VOTE_OPTION_UNSPECIFIED.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"options":{"type":"array","items":{"type":"object","properties":{"option":{"description":"option defines the valid vote options, it must not contain duplicate vote options.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"weight":{"type":"string","description":"weight is the vote weight associated with the vote option."}},"description":"WeightedVoteOption defines a unit of vote for vote split."},"description":"options is the weighted vote options.\\n\\nSince: cosmos-sdk 0.43"}}}},"description":"QueryVoteResponse is the response type for the Query/Vote RPC method."},"cosmos.gov.v1beta1.QueryVotesResponse":{"type":"object","properties":{"votes":{"type":"array","items":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"voter":{"type":"string","description":"voter is the voter address of the proposal."},"option":{"description":"Deprecated: Prefer to use `options` instead. This field is set in queries\\nif and only if `len(options) == 1` and that option has weight 1. In all\\nother cases, this field will default to VOTE_OPTION_UNSPECIFIED.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"options":{"type":"array","items":{"type":"object","properties":{"option":{"description":"option defines the valid vote options, it must not contain duplicate vote options.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"weight":{"type":"string","description":"weight is the vote weight associated with the vote option."}},"description":"WeightedVoteOption defines a unit of vote for vote split."},"description":"options is the weighted vote options.\\n\\nSince: cosmos-sdk 0.43"}},"description":"Vote defines a vote on a governance proposal.\\nA Vote consists of a proposal ID, the voter, and the vote option."},"description":"votes defines the queried votes."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryVotesResponse is the response type for the Query/Votes RPC method."},"cosmos.gov.v1beta1.TallyParams":{"type":"object","properties":{"quorum":{"type":"string","format":"byte","description":"Minimum percentage of total stake needed to vote for a result to be\\nconsidered valid."},"threshold":{"type":"string","format":"byte","description":"Minimum proportion of Yes votes for proposal to pass. Default value: 0.5."},"veto_threshold":{"type":"string","format":"byte","description":"Minimum value of Veto votes to Total votes ratio for proposal to be\\nvetoed. Default value: 1/3."}},"description":"TallyParams defines the params for tallying votes on governance proposals."},"cosmos.gov.v1beta1.TallyResult":{"type":"object","properties":{"yes":{"type":"string","description":"yes is the number of yes votes on a proposal."},"abstain":{"type":"string","description":"abstain is the number of abstain votes on a proposal."},"no":{"type":"string","description":"no is the number of no votes on a proposal."},"no_with_veto":{"type":"string","description":"no_with_veto is the number of no with veto votes on a proposal."}},"description":"TallyResult defines a standard tally for a governance proposal."},"cosmos.gov.v1beta1.Vote":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"voter":{"type":"string","description":"voter is the voter address of the proposal."},"option":{"description":"Deprecated: Prefer to use `options` instead. This field is set in queries\\nif and only if `len(options) == 1` and that option has weight 1. In all\\nother cases, this field will default to VOTE_OPTION_UNSPECIFIED.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"options":{"type":"array","items":{"type":"object","properties":{"option":{"description":"option defines the valid vote options, it must not contain duplicate vote options.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"weight":{"type":"string","description":"weight is the vote weight associated with the vote option."}},"description":"WeightedVoteOption defines a unit of vote for vote split."},"description":"options is the weighted vote options.\\n\\nSince: cosmos-sdk 0.43"}},"description":"Vote defines a vote on a governance proposal.\\nA Vote consists of a proposal ID, the voter, and the vote option."},"cosmos.gov.v1beta1.VoteOption":{"type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED","description":"VoteOption enumerates the valid vote options for a given governance proposal.\\n\\n - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.\\n - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.\\n - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.\\n - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.\\n - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option."},"cosmos.gov.v1beta1.VotingParams":{"type":"object","properties":{"voting_period":{"type":"string","description":"Duration of the voting period."}},"description":"VotingParams defines the params for voting on governance proposals."},"cosmos.gov.v1beta1.WeightedVoteOption":{"type":"object","properties":{"option":{"description":"option defines the valid vote options, it must not contain duplicate vote options.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"weight":{"type":"string","description":"weight is the vote weight associated with the vote option."}},"description":"WeightedVoteOption defines a unit of vote for vote split."},"cosmos.gov.v1.Deposit":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"depositor":{"type":"string","description":"depositor defines the deposit addresses from the proposals."},"amount":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"amount to be deposited by depositor."}},"description":"Deposit defines an amount deposited by an account address to an active\\nproposal."},"cosmos.gov.v1.DepositParams":{"type":"object","properties":{"min_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"Minimum deposit for a proposal to enter voting period."},"max_deposit_period":{"type":"string","description":"Maximum period for Atom holders to deposit on a proposal. Initial value: 2\\nmonths."}},"description":"DepositParams defines the params for deposits on governance proposals."},"cosmos.gov.v1.MessageBasedParams":{"type":"object","properties":{"voting_period":{"type":"string","description":"Duration of the voting period."},"quorum":{"type":"string","description":"Minimum percentage of total stake needed to vote for a result to be considered valid."},"yes_quorum":{"type":"string","description":"yes_quorum defines the minimum percentage of Yes votes in quorum for proposal to pass.\\nIf zero then the yes_quorum is disabled."},"threshold":{"type":"string","description":"Minimum proportion of Yes votes for proposal to pass."},"veto_threshold":{"type":"string","description":"Minimum value of Veto votes to Total votes ratio for proposal to be vetoed."}},"description":"MessageBasedParams defines the parameters of specific messages in a proposal.\\nIt is used to define the parameters of a proposal that is based on a specific message.\\nOnce a message has message based params, it only supports a standard proposal type."},"cosmos.gov.v1.Params":{"type":"object","properties":{"min_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"Minimum deposit for a proposal to enter voting period."},"max_deposit_period":{"type":"string","description":"Maximum period for stake holders to deposit on a proposal. Initial value: 2\\nmonths."},"voting_period":{"type":"string","description":"Duration of the voting period."},"quorum":{"type":"string","description":"Minimum percentage of total stake needed to vote for a result to be\\n considered valid."},"threshold":{"type":"string","description":"Minimum proportion of Yes votes for proposal to pass. Default value: 0.5."},"veto_threshold":{"type":"string","description":"Minimum value of Veto votes to Total votes ratio for proposal to be\\n vetoed. Default value: 1/3."},"min_initial_deposit_ratio":{"type":"string","description":"The ratio representing the proportion of the deposit value that must be paid at proposal submission."},"proposal_cancel_ratio":{"type":"string","description":"The cancel ratio which will not be returned back to the depositors when a proposal is cancelled."},"proposal_cancel_dest":{"type":"string","description":"The address which will receive (proposal_cancel_ratio * deposit) proposal deposits.\\nIf empty, the (proposal_cancel_ratio * deposit) proposal deposits will be burned."},"expedited_voting_period":{"type":"string","description":"Duration of the voting period of an expedited proposal."},"expedited_threshold":{"type":"string","description":"Minimum proportion of Yes votes for proposal to pass. Default value: 0.67."},"expedited_min_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"Minimum expedited deposit for a proposal to enter voting period."},"burn_vote_quorum":{"type":"boolean","title":"burn deposits if a proposal does not meet quorum"},"burn_proposal_deposit_prevote":{"type":"boolean","title":"burn deposits if the proposal does not enter voting period"},"burn_vote_veto":{"type":"boolean","title":"burn deposits if quorum with vote type no_veto is met"},"min_deposit_ratio":{"type":"string","description":"The ratio representing the proportion of the deposit value minimum that must be met when making a deposit.\\nDefault value: 0.01. Meaning that for a chain with a min_deposit of 100stake, a deposit of 1stake would be\\nrequired."},"proposal_cancel_max_period":{"type":"string","description":"proposal_cancel_max_period defines how far in the voting period a proposer can cancel a proposal.\\nIf the proposal is cancelled before the max cancel period, the deposit will be returned/burn to the\\ndepositors, according to the proposal_cancel_ratio and proposal_cancel_dest parameters.\\nAfter the max cancel period, the proposal cannot be cancelled anymore."},"optimistic_authorized_addresses":{"type":"array","items":{"type":"string"},"title":"optimistic_authorized_addresses is an optional governance parameter that limits the authorized accounts than can\\nsubmit optimistic proposals"},"optimistic_rejected_threshold":{"type":"string","description":"optimistic rejected threshold defines at which percentage of NO votes, the optimistic proposal should fail and be\\nconverted to a standard proposal. The threshold is expressed as a percentage of the total bonded tokens."},"yes_quorum":{"type":"string","description":"yes_quorum defines the minimum percentage of Yes votes in quorum for proposal to pass.\\nDefault value: 0 (disabled)."},"expedited_quorum":{"type":"string","description":"Minimum percentage of total stake needed to vote for a result to be\\nconsidered valid for an expedited proposal."},"proposal_execution_gas":{"type":"string","format":"uint64"}},"description":"Params defines the parameters for the x/gov module."},"cosmos.gov.v1.Proposal":{"type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id defines the unique id of the proposal."},"messages":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"description":"messages are the arbitrary messages to be executed if the proposal passes."},"status":{"description":"status defines the proposal status.","type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_DEPOSIT_PERIOD","PROPOSAL_STATUS_VOTING_PERIOD","PROPOSAL_STATUS_PASSED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_FAILED"],"default":"PROPOSAL_STATUS_UNSPECIFIED"},"final_tally_result":{"description":"final_tally_result is the final tally result of the proposal. When\\nquerying a proposal via gRPC, this field is not populated until the\\nproposal\'s voting period has ended.","type":"object","properties":{"yes_count":{"type":"string","description":"yes_count is the number of yes votes on a proposal.\\n\\noption 1"},"abstain_count":{"type":"string","description":"abstain_count is the number of abstain votes on a proposal.\\n\\noption 2"},"no_count":{"type":"string","description":"no_count is the number of no votes on a proposal.\\n\\noption 3"},"no_with_veto_count":{"type":"string","description":"no_with_veto_count is the number of no with veto votes on a proposal.\\n\\noption 4"},"option_one_count":{"type":"string","description":"option_one_count corresponds to the number of votes for option one (= yes_count for non multiple choice proposals)."},"option_two_count":{"type":"string","description":"option_two_count corresponds to the number of votes for option two (= abstain_count for non multiple choice\\nproposals)."},"option_three_count":{"type":"string","description":"option_three_count corresponds to the number of votes for option three (= no_count for non multiple choice\\nproposals)."},"option_four_count":{"type":"string","description":"option_four_count corresponds to the number of votes for option four (= no_with_veto_count for non multiple choice\\nproposals)."},"spam_count":{"type":"string","description":"spam_count is the number of spam votes on a proposal."}}},"submit_time":{"type":"string","format":"date-time","description":"submit_time is the time of proposal submission."},"deposit_end_time":{"type":"string","format":"date-time","description":"deposit_end_time is the end time for deposition."},"total_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"total_deposit is the total deposit on the proposal."},"voting_start_time":{"type":"string","format":"date-time","description":"voting_start_time is the starting time to vote on a proposal."},"voting_end_time":{"type":"string","format":"date-time","description":"voting_end_time is the end time of voting on a proposal."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the proposal.\\nthe recommended format of the metadata is to be found here:\\nhttps://docs.cosmos.network/v0.47/modules/gov#proposal-3"},"title":{"type":"string","title":"title is the title of the proposal"},"summary":{"type":"string","title":"summary is a short summary of the proposal"},"proposer":{"type":"string","title":"proposer is the address of the proposal sumbitter"},"expedited":{"type":"boolean","description":"Deprecated: Use ProposalType instead.","title":"expedited defines if the proposal is expedited"},"failed_reason":{"type":"string","title":"failed_reason defines the reason why the proposal failed"},"proposal_type":{"title":"proposal_type defines the type of the proposal","type":"string","enum":["PROPOSAL_TYPE_UNSPECIFIED","PROPOSAL_TYPE_STANDARD","PROPOSAL_TYPE_MULTIPLE_CHOICE","PROPOSAL_TYPE_OPTIMISTIC","PROPOSAL_TYPE_EXPEDITED"],"default":"PROPOSAL_TYPE_UNSPECIFIED","description":"ProposalType enumerates the valid proposal types.\\nAll proposal types are v1.Proposal which have different voting periods or tallying logic.\\n\\n - PROPOSAL_TYPE_UNSPECIFIED: PROPOSAL_TYPE_UNSPECIFIED defines no proposal type, which fallback to PROPOSAL_TYPE_STANDARD.\\n - PROPOSAL_TYPE_STANDARD: PROPOSAL_TYPE_STANDARD defines the type for a standard proposal.\\n - PROPOSAL_TYPE_MULTIPLE_CHOICE: PROPOSAL_TYPE_MULTIPLE_CHOICE defines the type for a multiple choice proposal.\\n - PROPOSAL_TYPE_OPTIMISTIC: PROPOSAL_TYPE_OPTIMISTIC defines the type for an optimistic proposal.\\n - PROPOSAL_TYPE_EXPEDITED: PROPOSAL_TYPE_EXPEDITED defines the type for an expedited proposal."}},"description":"Proposal defines the core field members of a governance proposal."},"cosmos.gov.v1.ProposalStatus":{"type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_DEPOSIT_PERIOD","PROPOSAL_STATUS_VOTING_PERIOD","PROPOSAL_STATUS_PASSED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_FAILED"],"default":"PROPOSAL_STATUS_UNSPECIFIED","description":"ProposalStatus enumerates the valid statuses of a proposal.\\n\\n - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.\\n - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit\\nperiod.\\n - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting\\nperiod.\\n - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has\\npassed.\\n - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has\\nbeen rejected.\\n - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has\\nfailed."},"cosmos.gov.v1.ProposalType":{"type":"string","enum":["PROPOSAL_TYPE_UNSPECIFIED","PROPOSAL_TYPE_STANDARD","PROPOSAL_TYPE_MULTIPLE_CHOICE","PROPOSAL_TYPE_OPTIMISTIC","PROPOSAL_TYPE_EXPEDITED"],"default":"PROPOSAL_TYPE_UNSPECIFIED","description":"ProposalType enumerates the valid proposal types.\\nAll proposal types are v1.Proposal which have different voting periods or tallying logic.\\n\\n - PROPOSAL_TYPE_UNSPECIFIED: PROPOSAL_TYPE_UNSPECIFIED defines no proposal type, which fallback to PROPOSAL_TYPE_STANDARD.\\n - PROPOSAL_TYPE_STANDARD: PROPOSAL_TYPE_STANDARD defines the type for a standard proposal.\\n - PROPOSAL_TYPE_MULTIPLE_CHOICE: PROPOSAL_TYPE_MULTIPLE_CHOICE defines the type for a multiple choice proposal.\\n - PROPOSAL_TYPE_OPTIMISTIC: PROPOSAL_TYPE_OPTIMISTIC defines the type for an optimistic proposal.\\n - PROPOSAL_TYPE_EXPEDITED: PROPOSAL_TYPE_EXPEDITED defines the type for an expedited proposal."},"cosmos.gov.v1.ProposalVoteOptions":{"type":"object","properties":{"option_one":{"type":"string","title":"option_one is the first option of the proposal"},"option_two":{"type":"string","title":"option_two is the second option of the proposal"},"option_three":{"type":"string","title":"option_three is the third option of the proposal"},"option_four":{"type":"string","title":"option_four is the fourth option of the proposal"},"option_spam":{"type":"string","description":"option_spam is always present for all proposals."}},"description":"ProposalVoteOptions defines the stringified vote options for proposals.\\nThis allows to support multiple choice options for a given proposal."},"cosmos.gov.v1.QueryConstitutionResponse":{"type":"object","properties":{"constitution":{"type":"string"}},"title":"QueryConstitutionResponse is the response type for the Query/Constitution RPC method"},"cosmos.gov.v1.QueryDepositResponse":{"type":"object","properties":{"deposit":{"description":"deposit defines the requested deposit.","type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"depositor":{"type":"string","description":"depositor defines the deposit addresses from the proposals."},"amount":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"amount to be deposited by depositor."}}}},"description":"QueryDepositResponse is the response type for the Query/Deposit RPC method."},"cosmos.gov.v1.QueryDepositsResponse":{"type":"object","properties":{"deposits":{"type":"array","items":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"depositor":{"type":"string","description":"depositor defines the deposit addresses from the proposals."},"amount":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"amount to be deposited by depositor."}},"description":"Deposit defines an amount deposited by an account address to an active\\nproposal."},"description":"deposits defines the requested deposits."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryDepositsResponse is the response type for the Query/Deposits RPC method."},"cosmos.gov.v1.QueryMessageBasedParamsResponse":{"type":"object","properties":{"params":{"type":"object","properties":{"voting_period":{"type":"string","description":"Duration of the voting period."},"quorum":{"type":"string","description":"Minimum percentage of total stake needed to vote for a result to be considered valid."},"yes_quorum":{"type":"string","description":"yes_quorum defines the minimum percentage of Yes votes in quorum for proposal to pass.\\nIf zero then the yes_quorum is disabled."},"threshold":{"type":"string","description":"Minimum proportion of Yes votes for proposal to pass."},"veto_threshold":{"type":"string","description":"Minimum value of Veto votes to Total votes ratio for proposal to be vetoed."}},"description":"MessageBasedParams defines the parameters of specific messages in a proposal.\\nIt is used to define the parameters of a proposal that is based on a specific message.\\nOnce a message has message based params, it only supports a standard proposal type."}},"description":"QueryMessageBasedParamsResponse is the response for the Query/MessageBasedParams RPC method."},"cosmos.gov.v1.QueryParamsResponse":{"type":"object","properties":{"voting_params":{"description":"Deprecated: Prefer to use `params` instead.\\nvoting_params defines the parameters related to voting.","type":"object","properties":{"voting_period":{"type":"string","description":"Duration of the voting period."}}},"deposit_params":{"description":"Deprecated: Prefer to use `params` instead.\\ndeposit_params defines the parameters related to deposit.","type":"object","properties":{"min_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"Minimum deposit for a proposal to enter voting period."},"max_deposit_period":{"type":"string","description":"Maximum period for Atom holders to deposit on a proposal. Initial value: 2\\nmonths."}}},"tally_params":{"description":"Deprecated: Prefer to use `params` instead.\\ntally_params defines the parameters related to tally.","type":"object","properties":{"quorum":{"type":"string","description":"Minimum percentage of total stake needed to vote for a result to be\\nconsidered valid."},"threshold":{"type":"string","description":"Minimum proportion of Yes votes for proposal to pass. Default value: 0.5."},"veto_threshold":{"type":"string","description":"Minimum value of Veto votes to Total votes ratio for proposal to be\\nvetoed. Default value: 1/3."}}},"params":{"description":"params defines all the parameters of x/gov module.","type":"object","properties":{"min_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"Minimum deposit for a proposal to enter voting period."},"max_deposit_period":{"type":"string","description":"Maximum period for stake holders to deposit on a proposal. Initial value: 2\\nmonths."},"voting_period":{"type":"string","description":"Duration of the voting period."},"quorum":{"type":"string","description":"Minimum percentage of total stake needed to vote for a result to be\\n considered valid."},"threshold":{"type":"string","description":"Minimum proportion of Yes votes for proposal to pass. Default value: 0.5."},"veto_threshold":{"type":"string","description":"Minimum value of Veto votes to Total votes ratio for proposal to be\\n vetoed. Default value: 1/3."},"min_initial_deposit_ratio":{"type":"string","description":"The ratio representing the proportion of the deposit value that must be paid at proposal submission."},"proposal_cancel_ratio":{"type":"string","description":"The cancel ratio which will not be returned back to the depositors when a proposal is cancelled."},"proposal_cancel_dest":{"type":"string","description":"The address which will receive (proposal_cancel_ratio * deposit) proposal deposits.\\nIf empty, the (proposal_cancel_ratio * deposit) proposal deposits will be burned."},"expedited_voting_period":{"type":"string","description":"Duration of the voting period of an expedited proposal."},"expedited_threshold":{"type":"string","description":"Minimum proportion of Yes votes for proposal to pass. Default value: 0.67."},"expedited_min_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"Minimum expedited deposit for a proposal to enter voting period."},"burn_vote_quorum":{"type":"boolean","title":"burn deposits if a proposal does not meet quorum"},"burn_proposal_deposit_prevote":{"type":"boolean","title":"burn deposits if the proposal does not enter voting period"},"burn_vote_veto":{"type":"boolean","title":"burn deposits if quorum with vote type no_veto is met"},"min_deposit_ratio":{"type":"string","description":"The ratio representing the proportion of the deposit value minimum that must be met when making a deposit.\\nDefault value: 0.01. Meaning that for a chain with a min_deposit of 100stake, a deposit of 1stake would be\\nrequired."},"proposal_cancel_max_period":{"type":"string","description":"proposal_cancel_max_period defines how far in the voting period a proposer can cancel a proposal.\\nIf the proposal is cancelled before the max cancel period, the deposit will be returned/burn to the\\ndepositors, according to the proposal_cancel_ratio and proposal_cancel_dest parameters.\\nAfter the max cancel period, the proposal cannot be cancelled anymore."},"optimistic_authorized_addresses":{"type":"array","items":{"type":"string"},"title":"optimistic_authorized_addresses is an optional governance parameter that limits the authorized accounts than can\\nsubmit optimistic proposals"},"optimistic_rejected_threshold":{"type":"string","description":"optimistic rejected threshold defines at which percentage of NO votes, the optimistic proposal should fail and be\\nconverted to a standard proposal. The threshold is expressed as a percentage of the total bonded tokens."},"yes_quorum":{"type":"string","description":"yes_quorum defines the minimum percentage of Yes votes in quorum for proposal to pass.\\nDefault value: 0 (disabled)."},"expedited_quorum":{"type":"string","description":"Minimum percentage of total stake needed to vote for a result to be\\nconsidered valid for an expedited proposal."},"proposal_execution_gas":{"type":"string","format":"uint64"}}}},"description":"QueryParamsResponse is the response type for the Query/Params RPC method."},"cosmos.gov.v1.QueryProposalResponse":{"type":"object","properties":{"proposal":{"description":"proposal is the requested governance proposal.","type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id defines the unique id of the proposal."},"messages":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"description":"messages are the arbitrary messages to be executed if the proposal passes."},"status":{"description":"status defines the proposal status.","type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_DEPOSIT_PERIOD","PROPOSAL_STATUS_VOTING_PERIOD","PROPOSAL_STATUS_PASSED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_FAILED"],"default":"PROPOSAL_STATUS_UNSPECIFIED"},"final_tally_result":{"description":"final_tally_result is the final tally result of the proposal. When\\nquerying a proposal via gRPC, this field is not populated until the\\nproposal\'s voting period has ended.","type":"object","properties":{"yes_count":{"type":"string","description":"yes_count is the number of yes votes on a proposal.\\n\\noption 1"},"abstain_count":{"type":"string","description":"abstain_count is the number of abstain votes on a proposal.\\n\\noption 2"},"no_count":{"type":"string","description":"no_count is the number of no votes on a proposal.\\n\\noption 3"},"no_with_veto_count":{"type":"string","description":"no_with_veto_count is the number of no with veto votes on a proposal.\\n\\noption 4"},"option_one_count":{"type":"string","description":"option_one_count corresponds to the number of votes for option one (= yes_count for non multiple choice proposals)."},"option_two_count":{"type":"string","description":"option_two_count corresponds to the number of votes for option two (= abstain_count for non multiple choice\\nproposals)."},"option_three_count":{"type":"string","description":"option_three_count corresponds to the number of votes for option three (= no_count for non multiple choice\\nproposals)."},"option_four_count":{"type":"string","description":"option_four_count corresponds to the number of votes for option four (= no_with_veto_count for non multiple choice\\nproposals)."},"spam_count":{"type":"string","description":"spam_count is the number of spam votes on a proposal."}}},"submit_time":{"type":"string","format":"date-time","description":"submit_time is the time of proposal submission."},"deposit_end_time":{"type":"string","format":"date-time","description":"deposit_end_time is the end time for deposition."},"total_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"total_deposit is the total deposit on the proposal."},"voting_start_time":{"type":"string","format":"date-time","description":"voting_start_time is the starting time to vote on a proposal."},"voting_end_time":{"type":"string","format":"date-time","description":"voting_end_time is the end time of voting on a proposal."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the proposal.\\nthe recommended format of the metadata is to be found here:\\nhttps://docs.cosmos.network/v0.47/modules/gov#proposal-3"},"title":{"type":"string","title":"title is the title of the proposal"},"summary":{"type":"string","title":"summary is a short summary of the proposal"},"proposer":{"type":"string","title":"proposer is the address of the proposal sumbitter"},"expedited":{"type":"boolean","description":"Deprecated: Use ProposalType instead.","title":"expedited defines if the proposal is expedited"},"failed_reason":{"type":"string","title":"failed_reason defines the reason why the proposal failed"},"proposal_type":{"title":"proposal_type defines the type of the proposal","type":"string","enum":["PROPOSAL_TYPE_UNSPECIFIED","PROPOSAL_TYPE_STANDARD","PROPOSAL_TYPE_MULTIPLE_CHOICE","PROPOSAL_TYPE_OPTIMISTIC","PROPOSAL_TYPE_EXPEDITED"],"default":"PROPOSAL_TYPE_UNSPECIFIED","description":"ProposalType enumerates the valid proposal types.\\nAll proposal types are v1.Proposal which have different voting periods or tallying logic.\\n\\n - PROPOSAL_TYPE_UNSPECIFIED: PROPOSAL_TYPE_UNSPECIFIED defines no proposal type, which fallback to PROPOSAL_TYPE_STANDARD.\\n - PROPOSAL_TYPE_STANDARD: PROPOSAL_TYPE_STANDARD defines the type for a standard proposal.\\n - PROPOSAL_TYPE_MULTIPLE_CHOICE: PROPOSAL_TYPE_MULTIPLE_CHOICE defines the type for a multiple choice proposal.\\n - PROPOSAL_TYPE_OPTIMISTIC: PROPOSAL_TYPE_OPTIMISTIC defines the type for an optimistic proposal.\\n - PROPOSAL_TYPE_EXPEDITED: PROPOSAL_TYPE_EXPEDITED defines the type for an expedited proposal."}}}},"description":"QueryProposalResponse is the response type for the Query/Proposal RPC method."},"cosmos.gov.v1.QueryProposalVoteOptionsResponse":{"type":"object","properties":{"vote_options":{"description":"vote_options defines the valid voting options for a proposal.","type":"object","properties":{"option_one":{"type":"string","title":"option_one is the first option of the proposal"},"option_two":{"type":"string","title":"option_two is the second option of the proposal"},"option_three":{"type":"string","title":"option_three is the third option of the proposal"},"option_four":{"type":"string","title":"option_four is the fourth option of the proposal"},"option_spam":{"type":"string","description":"option_spam is always present for all proposals."}}}},"description":"QueryProposalVoteOptionsResponse is the response type for the Query/ProposalVoteOptions RPC method."},"cosmos.gov.v1.QueryProposalsResponse":{"type":"object","properties":{"proposals":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id defines the unique id of the proposal."},"messages":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"description":"messages are the arbitrary messages to be executed if the proposal passes."},"status":{"description":"status defines the proposal status.","type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_DEPOSIT_PERIOD","PROPOSAL_STATUS_VOTING_PERIOD","PROPOSAL_STATUS_PASSED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_FAILED"],"default":"PROPOSAL_STATUS_UNSPECIFIED"},"final_tally_result":{"description":"final_tally_result is the final tally result of the proposal. When\\nquerying a proposal via gRPC, this field is not populated until the\\nproposal\'s voting period has ended.","type":"object","properties":{"yes_count":{"type":"string","description":"yes_count is the number of yes votes on a proposal.\\n\\noption 1"},"abstain_count":{"type":"string","description":"abstain_count is the number of abstain votes on a proposal.\\n\\noption 2"},"no_count":{"type":"string","description":"no_count is the number of no votes on a proposal.\\n\\noption 3"},"no_with_veto_count":{"type":"string","description":"no_with_veto_count is the number of no with veto votes on a proposal.\\n\\noption 4"},"option_one_count":{"type":"string","description":"option_one_count corresponds to the number of votes for option one (= yes_count for non multiple choice proposals)."},"option_two_count":{"type":"string","description":"option_two_count corresponds to the number of votes for option two (= abstain_count for non multiple choice\\nproposals)."},"option_three_count":{"type":"string","description":"option_three_count corresponds to the number of votes for option three (= no_count for non multiple choice\\nproposals)."},"option_four_count":{"type":"string","description":"option_four_count corresponds to the number of votes for option four (= no_with_veto_count for non multiple choice\\nproposals)."},"spam_count":{"type":"string","description":"spam_count is the number of spam votes on a proposal."}}},"submit_time":{"type":"string","format":"date-time","description":"submit_time is the time of proposal submission."},"deposit_end_time":{"type":"string","format":"date-time","description":"deposit_end_time is the end time for deposition."},"total_deposit":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"description":"total_deposit is the total deposit on the proposal."},"voting_start_time":{"type":"string","format":"date-time","description":"voting_start_time is the starting time to vote on a proposal."},"voting_end_time":{"type":"string","format":"date-time","description":"voting_end_time is the end time of voting on a proposal."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the proposal.\\nthe recommended format of the metadata is to be found here:\\nhttps://docs.cosmos.network/v0.47/modules/gov#proposal-3"},"title":{"type":"string","title":"title is the title of the proposal"},"summary":{"type":"string","title":"summary is a short summary of the proposal"},"proposer":{"type":"string","title":"proposer is the address of the proposal sumbitter"},"expedited":{"type":"boolean","description":"Deprecated: Use ProposalType instead.","title":"expedited defines if the proposal is expedited"},"failed_reason":{"type":"string","title":"failed_reason defines the reason why the proposal failed"},"proposal_type":{"title":"proposal_type defines the type of the proposal","type":"string","enum":["PROPOSAL_TYPE_UNSPECIFIED","PROPOSAL_TYPE_STANDARD","PROPOSAL_TYPE_MULTIPLE_CHOICE","PROPOSAL_TYPE_OPTIMISTIC","PROPOSAL_TYPE_EXPEDITED"],"default":"PROPOSAL_TYPE_UNSPECIFIED","description":"ProposalType enumerates the valid proposal types.\\nAll proposal types are v1.Proposal which have different voting periods or tallying logic.\\n\\n - PROPOSAL_TYPE_UNSPECIFIED: PROPOSAL_TYPE_UNSPECIFIED defines no proposal type, which fallback to PROPOSAL_TYPE_STANDARD.\\n - PROPOSAL_TYPE_STANDARD: PROPOSAL_TYPE_STANDARD defines the type for a standard proposal.\\n - PROPOSAL_TYPE_MULTIPLE_CHOICE: PROPOSAL_TYPE_MULTIPLE_CHOICE defines the type for a multiple choice proposal.\\n - PROPOSAL_TYPE_OPTIMISTIC: PROPOSAL_TYPE_OPTIMISTIC defines the type for an optimistic proposal.\\n - PROPOSAL_TYPE_EXPEDITED: PROPOSAL_TYPE_EXPEDITED defines the type for an expedited proposal."}},"description":"Proposal defines the core field members of a governance proposal."},"description":"proposals defines all the requested governance proposals."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryProposalsResponse is the response type for the Query/Proposals RPC\\nmethod."},"cosmos.gov.v1.QueryTallyResultResponse":{"type":"object","properties":{"tally":{"description":"tally defines the requested tally.","type":"object","properties":{"yes_count":{"type":"string","description":"yes_count is the number of yes votes on a proposal.\\n\\noption 1"},"abstain_count":{"type":"string","description":"abstain_count is the number of abstain votes on a proposal.\\n\\noption 2"},"no_count":{"type":"string","description":"no_count is the number of no votes on a proposal.\\n\\noption 3"},"no_with_veto_count":{"type":"string","description":"no_with_veto_count is the number of no with veto votes on a proposal.\\n\\noption 4"},"option_one_count":{"type":"string","description":"option_one_count corresponds to the number of votes for option one (= yes_count for non multiple choice proposals)."},"option_two_count":{"type":"string","description":"option_two_count corresponds to the number of votes for option two (= abstain_count for non multiple choice\\nproposals)."},"option_three_count":{"type":"string","description":"option_three_count corresponds to the number of votes for option three (= no_count for non multiple choice\\nproposals)."},"option_four_count":{"type":"string","description":"option_four_count corresponds to the number of votes for option four (= no_with_veto_count for non multiple choice\\nproposals)."},"spam_count":{"type":"string","description":"spam_count is the number of spam votes on a proposal."}}}},"description":"QueryTallyResultResponse is the response type for the Query/Tally RPC method."},"cosmos.gov.v1.QueryVoteResponse":{"type":"object","properties":{"vote":{"description":"vote defines the queried vote.","type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"voter":{"type":"string","description":"voter is the voter address of the proposal."},"options":{"type":"array","items":{"type":"object","properties":{"option":{"description":"option defines the valid vote options, it must not contain duplicate vote options.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ONE","VOTE_OPTION_ABSTAIN","VOTE_OPTION_TWO","VOTE_OPTION_NO","VOTE_OPTION_THREE","VOTE_OPTION_NO_WITH_VETO","VOTE_OPTION_FOUR","VOTE_OPTION_SPAM"],"default":"VOTE_OPTION_UNSPECIFIED"},"weight":{"type":"string","description":"weight is the vote weight associated with the vote option."}},"description":"WeightedVoteOption defines a unit of vote for vote split."},"description":"options is the weighted vote options."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the vote.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#vote-5"}}}},"description":"QueryVoteResponse is the response type for the Query/Vote RPC method."},"cosmos.gov.v1.QueryVotesResponse":{"type":"object","properties":{"votes":{"type":"array","items":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"voter":{"type":"string","description":"voter is the voter address of the proposal."},"options":{"type":"array","items":{"type":"object","properties":{"option":{"description":"option defines the valid vote options, it must not contain duplicate vote options.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ONE","VOTE_OPTION_ABSTAIN","VOTE_OPTION_TWO","VOTE_OPTION_NO","VOTE_OPTION_THREE","VOTE_OPTION_NO_WITH_VETO","VOTE_OPTION_FOUR","VOTE_OPTION_SPAM"],"default":"VOTE_OPTION_UNSPECIFIED"},"weight":{"type":"string","description":"weight is the vote weight associated with the vote option."}},"description":"WeightedVoteOption defines a unit of vote for vote split."},"description":"options is the weighted vote options."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the vote.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#vote-5"}},"description":"Vote defines a vote on a governance proposal.\\nA Vote consists of a proposal ID, the voter, and the vote option."},"description":"votes defines the queried votes."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryVotesResponse is the response type for the Query/Votes RPC method."},"cosmos.gov.v1.TallyParams":{"type":"object","properties":{"quorum":{"type":"string","description":"Minimum percentage of total stake needed to vote for a result to be\\nconsidered valid."},"threshold":{"type":"string","description":"Minimum proportion of Yes votes for proposal to pass. Default value: 0.5."},"veto_threshold":{"type":"string","description":"Minimum value of Veto votes to Total votes ratio for proposal to be\\nvetoed. Default value: 1/3."}},"description":"TallyParams defines the params for tallying votes on governance proposals."},"cosmos.gov.v1.TallyResult":{"type":"object","properties":{"yes_count":{"type":"string","description":"yes_count is the number of yes votes on a proposal.\\n\\noption 1"},"abstain_count":{"type":"string","description":"abstain_count is the number of abstain votes on a proposal.\\n\\noption 2"},"no_count":{"type":"string","description":"no_count is the number of no votes on a proposal.\\n\\noption 3"},"no_with_veto_count":{"type":"string","description":"no_with_veto_count is the number of no with veto votes on a proposal.\\n\\noption 4"},"option_one_count":{"type":"string","description":"option_one_count corresponds to the number of votes for option one (= yes_count for non multiple choice proposals)."},"option_two_count":{"type":"string","description":"option_two_count corresponds to the number of votes for option two (= abstain_count for non multiple choice\\nproposals)."},"option_three_count":{"type":"string","description":"option_three_count corresponds to the number of votes for option three (= no_count for non multiple choice\\nproposals)."},"option_four_count":{"type":"string","description":"option_four_count corresponds to the number of votes for option four (= no_with_veto_count for non multiple choice\\nproposals)."},"spam_count":{"type":"string","description":"spam_count is the number of spam votes on a proposal."}},"description":"TallyResult defines a standard tally for a governance proposal."},"cosmos.gov.v1.Vote":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal_id defines the unique id of the proposal."},"voter":{"type":"string","description":"voter is the voter address of the proposal."},"options":{"type":"array","items":{"type":"object","properties":{"option":{"description":"option defines the valid vote options, it must not contain duplicate vote options.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ONE","VOTE_OPTION_ABSTAIN","VOTE_OPTION_TWO","VOTE_OPTION_NO","VOTE_OPTION_THREE","VOTE_OPTION_NO_WITH_VETO","VOTE_OPTION_FOUR","VOTE_OPTION_SPAM"],"default":"VOTE_OPTION_UNSPECIFIED"},"weight":{"type":"string","description":"weight is the vote weight associated with the vote option."}},"description":"WeightedVoteOption defines a unit of vote for vote split."},"description":"options is the weighted vote options."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the vote.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#vote-5"}},"description":"Vote defines a vote on a governance proposal.\\nA Vote consists of a proposal ID, the voter, and the vote option."},"cosmos.gov.v1.VoteOption":{"type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ONE","VOTE_OPTION_ABSTAIN","VOTE_OPTION_TWO","VOTE_OPTION_NO","VOTE_OPTION_THREE","VOTE_OPTION_NO_WITH_VETO","VOTE_OPTION_FOUR","VOTE_OPTION_SPAM"],"default":"VOTE_OPTION_UNSPECIFIED","description":"VoteOption enumerates the valid vote options for a given governance proposal.\\n\\n - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.\\n - VOTE_OPTION_YES: VOTE_OPTION_YES defines the yes proposal vote option.\\n - VOTE_OPTION_ONE: VOTE_OPTION_ONE defines the first proposal vote option.\\n - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines the abstain proposal vote option.\\n - VOTE_OPTION_TWO: VOTE_OPTION_TWO defines the second proposal vote option.\\n - VOTE_OPTION_NO: VOTE_OPTION_NO defines the no proposal vote option.\\n - VOTE_OPTION_THREE: VOTE_OPTION_THREE defines the third proposal vote option.\\n - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines the no with veto proposal vote option.\\n - VOTE_OPTION_FOUR: VOTE_OPTION_FOUR defines the fourth proposal vote option.\\n - VOTE_OPTION_SPAM: VOTE_OPTION_SPAM defines the spam proposal vote option."},"cosmos.gov.v1.VotingParams":{"type":"object","properties":{"voting_period":{"type":"string","description":"Duration of the voting period."}},"description":"VotingParams defines the params for voting on governance proposals."},"cosmos.gov.v1.WeightedVoteOption":{"type":"object","properties":{"option":{"description":"option defines the valid vote options, it must not contain duplicate vote options.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ONE","VOTE_OPTION_ABSTAIN","VOTE_OPTION_TWO","VOTE_OPTION_NO","VOTE_OPTION_THREE","VOTE_OPTION_NO_WITH_VETO","VOTE_OPTION_FOUR","VOTE_OPTION_SPAM"],"default":"VOTE_OPTION_UNSPECIFIED"},"weight":{"type":"string","description":"weight is the vote weight associated with the vote option."}},"description":"WeightedVoteOption defines a unit of vote for vote split."},"cosmos.mint.v1beta1.Params":{"type":"object","properties":{"mint_denom":{"type":"string","title":"type of coin to mint"},"inflation_rate_change":{"type":"string","title":"maximum annual change in inflation rate"},"inflation_max":{"type":"string","title":"maximum inflation rate"},"inflation_min":{"type":"string","title":"minimum inflation rate"},"goal_bonded":{"type":"string","title":"goal of percent bonded atoms"},"blocks_per_year":{"type":"string","format":"uint64","title":"expected blocks per year"},"max_supply":{"type":"string","title":"maximum supply for the token"}},"description":"Params defines the parameters for the x/mint module."},"cosmos.mint.v1beta1.QueryAnnualProvisionsResponse":{"type":"object","properties":{"annual_provisions":{"type":"string","format":"byte","description":"annual_provisions is the current minting annual provisions value."}},"description":"QueryAnnualProvisionsResponse is the response type for the\\nQuery/AnnualProvisions RPC method."},"cosmos.mint.v1beta1.QueryInflationResponse":{"type":"object","properties":{"inflation":{"type":"string","format":"byte","description":"inflation is the current minting inflation value."}},"description":"QueryInflationResponse is the response type for the Query/Inflation RPC\\nmethod."},"cosmos.mint.v1beta1.QueryParamsResponse":{"type":"object","properties":{"params":{"description":"params defines the parameters of the module.","type":"object","properties":{"mint_denom":{"type":"string","title":"type of coin to mint"},"inflation_rate_change":{"type":"string","title":"maximum annual change in inflation rate"},"inflation_max":{"type":"string","title":"maximum inflation rate"},"inflation_min":{"type":"string","title":"minimum inflation rate"},"goal_bonded":{"type":"string","title":"goal of percent bonded atoms"},"blocks_per_year":{"type":"string","format":"uint64","title":"expected blocks per year"},"max_supply":{"type":"string","title":"maximum supply for the token"}}}},"description":"QueryParamsResponse is the response type for the Query/Params RPC method."},"cosmos.slashing.v1beta1.Params":{"type":"object","properties":{"signed_blocks_window":{"type":"string","format":"int64"},"min_signed_per_window":{"type":"string","format":"byte"},"downtime_jail_duration":{"type":"string"},"slash_fraction_double_sign":{"type":"string","format":"byte"},"slash_fraction_downtime":{"type":"string","format":"byte"}},"description":"Params represents the parameters used for by the slashing module."},"cosmos.slashing.v1beta1.QueryParamsResponse":{"type":"object","properties":{"params":{"type":"object","properties":{"signed_blocks_window":{"type":"string","format":"int64"},"min_signed_per_window":{"type":"string","format":"byte"},"downtime_jail_duration":{"type":"string"},"slash_fraction_double_sign":{"type":"string","format":"byte"},"slash_fraction_downtime":{"type":"string","format":"byte"}},"description":"Params represents the parameters used for by the slashing module."}},"title":"QueryParamsResponse is the response type for the Query/Params RPC method"},"cosmos.slashing.v1beta1.QuerySigningInfoResponse":{"type":"object","properties":{"val_signing_info":{"title":"val_signing_info is the signing info of requested val cons address","type":"object","properties":{"address":{"type":"string"},"start_height":{"type":"string","format":"int64","title":"Height at which validator was first a candidate OR was un-jailed"},"index_offset":{"type":"string","format":"int64","description":"DEPRECATED: Index which is incremented every time a validator is bonded in a block and\\n_may_ have signed a pre-commit or not. This in conjunction with the\\nsigned_blocks_window param determines the index in the missed block bitmap."},"jailed_until":{"type":"string","format":"date-time","description":"Timestamp until which the validator is jailed due to liveness downtime."},"tombstoned":{"type":"boolean","description":"Whether or not a validator has been tombstoned (killed out of validator\\nset). It is set once the validator commits an equivocation or for any other\\nconfigured misbehavior."},"missed_blocks_counter":{"type":"string","format":"int64","description":"A counter of missed (unsigned) blocks. It is used to avoid unnecessary\\nreads in the missed block bitmap."}},"description":"ValidatorSigningInfo defines a validator\'s signing info for monitoring their\\nliveness activity."}},"title":"QuerySigningInfoResponse is the response type for the Query/SigningInfo RPC\\nmethod"},"cosmos.slashing.v1beta1.QuerySigningInfosResponse":{"type":"object","properties":{"info":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string"},"start_height":{"type":"string","format":"int64","title":"Height at which validator was first a candidate OR was un-jailed"},"index_offset":{"type":"string","format":"int64","description":"DEPRECATED: Index which is incremented every time a validator is bonded in a block and\\n_may_ have signed a pre-commit or not. This in conjunction with the\\nsigned_blocks_window param determines the index in the missed block bitmap."},"jailed_until":{"type":"string","format":"date-time","description":"Timestamp until which the validator is jailed due to liveness downtime."},"tombstoned":{"type":"boolean","description":"Whether or not a validator has been tombstoned (killed out of validator\\nset). It is set once the validator commits an equivocation or for any other\\nconfigured misbehavior."},"missed_blocks_counter":{"type":"string","format":"int64","description":"A counter of missed (unsigned) blocks. It is used to avoid unnecessary\\nreads in the missed block bitmap."}},"description":"ValidatorSigningInfo defines a validator\'s signing info for monitoring their\\nliveness activity."},"title":"info is the signing info of all validators"},"pagination":{"type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}},"description":"PageResponse is to be embedded in gRPC response messages where the\\ncorresponding request message has used PageRequest.\\n\\n message SomeResponse {\\n         repeated Bar results = 1;\\n         PageResponse page = 2;\\n }"}},"title":"QuerySigningInfosResponse is the response type for the Query/SigningInfos RPC\\nmethod"},"cosmos.slashing.v1beta1.ValidatorSigningInfo":{"type":"object","properties":{"address":{"type":"string"},"start_height":{"type":"string","format":"int64","title":"Height at which validator was first a candidate OR was un-jailed"},"index_offset":{"type":"string","format":"int64","description":"DEPRECATED: Index which is incremented every time a validator is bonded in a block and\\n_may_ have signed a pre-commit or not. This in conjunction with the\\nsigned_blocks_window param determines the index in the missed block bitmap."},"jailed_until":{"type":"string","format":"date-time","description":"Timestamp until which the validator is jailed due to liveness downtime."},"tombstoned":{"type":"boolean","description":"Whether or not a validator has been tombstoned (killed out of validator\\nset). It is set once the validator commits an equivocation or for any other\\nconfigured misbehavior."},"missed_blocks_counter":{"type":"string","format":"int64","description":"A counter of missed (unsigned) blocks. It is used to avoid unnecessary\\nreads in the missed block bitmap."}},"description":"ValidatorSigningInfo defines a validator\'s signing info for monitoring their\\nliveness activity."},"cosmos.staking.v1beta1.BondStatus":{"type":"string","enum":["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"],"default":"BOND_STATUS_UNSPECIFIED","description":"BondStatus is the status of a validator.\\n\\n - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.\\n - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.\\n - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.\\n - BOND_STATUS_BONDED: BONDED defines a validator that is bonded."},"cosmos.staking.v1beta1.Commission":{"type":"object","properties":{"commission_rates":{"description":"commission_rates defines the initial commission rates to be used for creating a validator.","type":"object","properties":{"rate":{"type":"string","description":"rate is the commission rate charged to delegators, as a fraction."},"max_rate":{"type":"string","description":"max_rate defines the maximum commission rate which validator can ever charge, as a fraction."},"max_change_rate":{"type":"string","description":"max_change_rate defines the maximum daily increase of the validator commission, as a fraction."}}},"update_time":{"type":"string","format":"date-time","description":"update_time is the last time the commission rate was changed."}},"description":"Commission defines commission parameters for a given validator."},"cosmos.staking.v1beta1.CommissionRates":{"type":"object","properties":{"rate":{"type":"string","description":"rate is the commission rate charged to delegators, as a fraction."},"max_rate":{"type":"string","description":"max_rate defines the maximum commission rate which validator can ever charge, as a fraction."},"max_change_rate":{"type":"string","description":"max_change_rate defines the maximum daily increase of the validator commission, as a fraction."}},"description":"CommissionRates defines the initial commission rates to be used for creating\\na validator."},"cosmos.staking.v1beta1.Delegation":{"type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the encoded address of the delegator."},"validator_address":{"type":"string","description":"validator_address is the encoded address of the validator."},"shares":{"type":"string","description":"shares define the delegation shares received."}},"description":"Delegation represents the bond with tokens held by an account. It is\\nowned by one delegator, and is associated with the voting power of one\\nvalidator."},"cosmos.staking.v1beta1.DelegationResponse":{"type":"object","properties":{"delegation":{"type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the encoded address of the delegator."},"validator_address":{"type":"string","description":"validator_address is the encoded address of the validator."},"shares":{"type":"string","description":"shares define the delegation shares received."}},"description":"Delegation represents the bond with tokens held by an account. It is\\nowned by one delegator, and is associated with the voting power of one\\nvalidator."},"balance":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."}},"description":"DelegationResponse is equivalent to Delegation except that it contains a\\nbalance in addition to shares which is more suitable for client responses."},"cosmos.staking.v1beta1.Description":{"type":"object","properties":{"moniker":{"type":"string","description":"moniker defines a human-readable name for the validator."},"identity":{"type":"string","description":"identity defines an optional identity signature (ex. UPort or Keybase)."},"website":{"type":"string","description":"website defines an optional website link."},"security_contact":{"type":"string","description":"security_contact defines an optional email for security contact."},"details":{"type":"string","description":"details define other optional details."},"metadata":{"description":"metadata defines extra information about the validator.","type":"object","properties":{"profile_pic_uri":{"type":"string","description":"profile_pic_uri defines a link to the validator profile picture."},"social_handle_uris":{"type":"array","items":{"type":"string"},"description":"social_handle_uris defines a string array of uris to the validator\'s social handles."}}}},"description":"Description defines a validator description."},"cosmos.staking.v1beta1.HistoricalInfo":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"title":"prev block info","type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"valset":{"type":"array","items":{"type":"object","properties":{"operator_address":{"type":"string","description":"operator_address defines the address of the validator\'s operator; bech encoded in JSON."},"consensus_pubkey":{"description":"consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"jailed":{"type":"boolean","description":"jailed defined whether the validator has been jailed from bonded status or not."},"status":{"description":"status is the validator status (bonded/unbonding/unbonded).","type":"string","enum":["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"],"default":"BOND_STATUS_UNSPECIFIED"},"tokens":{"type":"string","description":"tokens define the delegated tokens (incl. self-delegation)."},"delegator_shares":{"type":"string","description":"delegator_shares defines total shares issued to a validator\'s delegators."},"description":{"description":"description defines the description terms for the validator.","type":"object","properties":{"moniker":{"type":"string","description":"moniker defines a human-readable name for the validator."},"identity":{"type":"string","description":"identity defines an optional identity signature (ex. UPort or Keybase)."},"website":{"type":"string","description":"website defines an optional website link."},"security_contact":{"type":"string","description":"security_contact defines an optional email for security contact."},"details":{"type":"string","description":"details define other optional details."},"metadata":{"description":"metadata defines extra information about the validator.","type":"object","properties":{"profile_pic_uri":{"type":"string","description":"profile_pic_uri defines a link to the validator profile picture."},"social_handle_uris":{"type":"array","items":{"type":"string"},"description":"social_handle_uris defines a string array of uris to the validator\'s social handles."}}}}},"unbonding_height":{"type":"string","format":"int64","description":"unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."},"unbonding_time":{"type":"string","format":"date-time","description":"unbonding_time defines, if unbonding, the min time for the validator to complete unbonding."},"commission":{"description":"commission defines the commission parameters.","type":"object","properties":{"commission_rates":{"description":"commission_rates defines the initial commission rates to be used for creating a validator.","type":"object","properties":{"rate":{"type":"string","description":"rate is the commission rate charged to delegators, as a fraction."},"max_rate":{"type":"string","description":"max_rate defines the maximum commission rate which validator can ever charge, as a fraction."},"max_change_rate":{"type":"string","description":"max_change_rate defines the maximum daily increase of the validator commission, as a fraction."}}},"update_time":{"type":"string","format":"date-time","description":"update_time is the last time the commission rate was changed."}}},"min_self_delegation":{"type":"string","description":"min_self_delegation is the validator\'s self declared minimum self delegation."},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"strictly positive if this validator\'s unbonding has been stopped by external modules"},"unbonding_ids":{"type":"array","items":{"type":"string","format":"uint64"},"title":"list of unbonding ids, each uniquely identifying an unbonding of this validator"}},"description":"Validator defines a validator, together with the total amount of the\\nValidator\'s bond shares and their exchange rate to coins. Slashing results in\\na decrease in the exchange rate, allowing correct calculation of future\\nundelegations without iterating over delegators. When coins are delegated to\\nthis validator, the validator is credited with a delegation whose number of\\nbond shares is based on the amount of coins delegated divided by the current\\nexchange rate. Voting power can be calculated as total bonded shares\\nmultiplied by exchange rate."}}},"description":"HistoricalInfo contains header and validator information for a given block.\\nIt is stored as part of staking module\'s state, which persists the `n` most\\nrecent HistoricalInfo\\n(`n` is set by the staking module\'s `historical_entries` parameter)."},"cosmos.staking.v1beta1.Metadata":{"type":"object","properties":{"profile_pic_uri":{"type":"string","description":"profile_pic_uri defines a link to the validator profile picture."},"social_handle_uris":{"type":"array","items":{"type":"string"},"description":"social_handle_uris defines a string array of uris to the validator\'s social handles."}},"description":"Metadata defines extra information about the validator."},"cosmos.staking.v1beta1.Params":{"type":"object","properties":{"unbonding_time":{"type":"string","description":"unbonding_time is the time duration of unbonding."},"max_validators":{"type":"integer","format":"int64","description":"max_validators is the maximum number of validators."},"max_entries":{"type":"integer","format":"int64","description":"max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio)."},"historical_entries":{"type":"integer","format":"int64","description":"historical_entries is the number of historical entries to persist."},"bond_denom":{"type":"string","description":"bond_denom defines the bondable coin denomination."},"min_commission_rate":{"type":"string","title":"min_commission_rate is the chain-wide minimum commission rate that a validator can charge their delegators"},"key_rotation_fee":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto.","title":"key_rotation_fee is fee to be spent when rotating validator\'s key\\n(either consensus pubkey or operator key)"}},"description":"Params defines the parameters for the x/staking module."},"cosmos.staking.v1beta1.Pool":{"type":"object","properties":{"not_bonded_tokens":{"type":"string"},"bonded_tokens":{"type":"string"}},"description":"Pool is used for tracking bonded and not-bonded token supply of the bond\\ndenomination."},"cosmos.staking.v1beta1.QueryDelegationResponse":{"type":"object","properties":{"delegation_response":{"description":"delegation_responses defines the delegation info of a delegation.","type":"object","properties":{"delegation":{"type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the encoded address of the delegator."},"validator_address":{"type":"string","description":"validator_address is the encoded address of the validator."},"shares":{"type":"string","description":"shares define the delegation shares received."}},"description":"Delegation represents the bond with tokens held by an account. It is\\nowned by one delegator, and is associated with the voting power of one\\nvalidator."},"balance":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."}}}},"description":"QueryDelegationResponse is response type for the Query/Delegation RPC method."},"cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse":{"type":"object","properties":{"delegation_responses":{"type":"array","items":{"type":"object","properties":{"delegation":{"type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the encoded address of the delegator."},"validator_address":{"type":"string","description":"validator_address is the encoded address of the validator."},"shares":{"type":"string","description":"shares define the delegation shares received."}},"description":"Delegation represents the bond with tokens held by an account. It is\\nowned by one delegator, and is associated with the voting power of one\\nvalidator."},"balance":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."}},"description":"DelegationResponse is equivalent to Delegation except that it contains a\\nbalance in addition to shares which is more suitable for client responses."},"description":"delegation_responses defines all the delegations\' info of a delegator."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryDelegatorDelegationsResponse is response type for the\\nQuery/DelegatorDelegations RPC method."},"cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse":{"type":"object","properties":{"unbonding_responses":{"type":"array","items":{"type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the encoded address of the delegator."},"validator_address":{"type":"string","description":"validator_address is the encoded address of the validator."},"entries":{"type":"array","items":{"type":"object","properties":{"creation_height":{"type":"string","format":"int64","description":"creation_height is the height which the unbonding took place."},"completion_time":{"type":"string","format":"date-time","description":"completion_time is the unix time for unbonding completion."},"initial_balance":{"type":"string","description":"initial_balance defines the tokens initially scheduled to receive at completion."},"balance":{"type":"string","description":"balance defines the tokens to receive at completion."},"unbonding_id":{"type":"string","format":"uint64","title":"Incrementing id that uniquely identifies this entry"},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"Strictly positive if this entry\'s unbonding has been stopped by external modules"}},"description":"UnbondingDelegationEntry defines an unbonding object with relevant metadata."},"description":"entries are the unbonding delegation entries.\\n\\nunbonding delegation entries"}},"description":"UnbondingDelegation stores all of a single delegator\'s unbonding bonds\\nfor a single validator in an time-ordered list."}},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryUnbondingDelegatorDelegationsResponse is response type for the\\nQuery/UnbondingDelegatorDelegations RPC method."},"cosmos.staking.v1beta1.QueryDelegatorValidatorResponse":{"type":"object","properties":{"validator":{"description":"validator defines the validator info.","type":"object","properties":{"operator_address":{"type":"string","description":"operator_address defines the address of the validator\'s operator; bech encoded in JSON."},"consensus_pubkey":{"description":"consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"jailed":{"type":"boolean","description":"jailed defined whether the validator has been jailed from bonded status or not."},"status":{"description":"status is the validator status (bonded/unbonding/unbonded).","type":"string","enum":["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"],"default":"BOND_STATUS_UNSPECIFIED"},"tokens":{"type":"string","description":"tokens define the delegated tokens (incl. self-delegation)."},"delegator_shares":{"type":"string","description":"delegator_shares defines total shares issued to a validator\'s delegators."},"description":{"description":"description defines the description terms for the validator.","type":"object","properties":{"moniker":{"type":"string","description":"moniker defines a human-readable name for the validator."},"identity":{"type":"string","description":"identity defines an optional identity signature (ex. UPort or Keybase)."},"website":{"type":"string","description":"website defines an optional website link."},"security_contact":{"type":"string","description":"security_contact defines an optional email for security contact."},"details":{"type":"string","description":"details define other optional details."},"metadata":{"description":"metadata defines extra information about the validator.","type":"object","properties":{"profile_pic_uri":{"type":"string","description":"profile_pic_uri defines a link to the validator profile picture."},"social_handle_uris":{"type":"array","items":{"type":"string"},"description":"social_handle_uris defines a string array of uris to the validator\'s social handles."}}}}},"unbonding_height":{"type":"string","format":"int64","description":"unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."},"unbonding_time":{"type":"string","format":"date-time","description":"unbonding_time defines, if unbonding, the min time for the validator to complete unbonding."},"commission":{"description":"commission defines the commission parameters.","type":"object","properties":{"commission_rates":{"description":"commission_rates defines the initial commission rates to be used for creating a validator.","type":"object","properties":{"rate":{"type":"string","description":"rate is the commission rate charged to delegators, as a fraction."},"max_rate":{"type":"string","description":"max_rate defines the maximum commission rate which validator can ever charge, as a fraction."},"max_change_rate":{"type":"string","description":"max_change_rate defines the maximum daily increase of the validator commission, as a fraction."}}},"update_time":{"type":"string","format":"date-time","description":"update_time is the last time the commission rate was changed."}}},"min_self_delegation":{"type":"string","description":"min_self_delegation is the validator\'s self declared minimum self delegation."},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"strictly positive if this validator\'s unbonding has been stopped by external modules"},"unbonding_ids":{"type":"array","items":{"type":"string","format":"uint64"},"title":"list of unbonding ids, each uniquely identifying an unbonding of this validator"}}}},"description":"QueryDelegatorValidatorResponse response type for the\\nQuery/DelegatorValidator RPC method."},"cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"operator_address":{"type":"string","description":"operator_address defines the address of the validator\'s operator; bech encoded in JSON."},"consensus_pubkey":{"description":"consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"jailed":{"type":"boolean","description":"jailed defined whether the validator has been jailed from bonded status or not."},"status":{"description":"status is the validator status (bonded/unbonding/unbonded).","type":"string","enum":["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"],"default":"BOND_STATUS_UNSPECIFIED"},"tokens":{"type":"string","description":"tokens define the delegated tokens (incl. self-delegation)."},"delegator_shares":{"type":"string","description":"delegator_shares defines total shares issued to a validator\'s delegators."},"description":{"description":"description defines the description terms for the validator.","type":"object","properties":{"moniker":{"type":"string","description":"moniker defines a human-readable name for the validator."},"identity":{"type":"string","description":"identity defines an optional identity signature (ex. UPort or Keybase)."},"website":{"type":"string","description":"website defines an optional website link."},"security_contact":{"type":"string","description":"security_contact defines an optional email for security contact."},"details":{"type":"string","description":"details define other optional details."},"metadata":{"description":"metadata defines extra information about the validator.","type":"object","properties":{"profile_pic_uri":{"type":"string","description":"profile_pic_uri defines a link to the validator profile picture."},"social_handle_uris":{"type":"array","items":{"type":"string"},"description":"social_handle_uris defines a string array of uris to the validator\'s social handles."}}}}},"unbonding_height":{"type":"string","format":"int64","description":"unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."},"unbonding_time":{"type":"string","format":"date-time","description":"unbonding_time defines, if unbonding, the min time for the validator to complete unbonding."},"commission":{"description":"commission defines the commission parameters.","type":"object","properties":{"commission_rates":{"description":"commission_rates defines the initial commission rates to be used for creating a validator.","type":"object","properties":{"rate":{"type":"string","description":"rate is the commission rate charged to delegators, as a fraction."},"max_rate":{"type":"string","description":"max_rate defines the maximum commission rate which validator can ever charge, as a fraction."},"max_change_rate":{"type":"string","description":"max_change_rate defines the maximum daily increase of the validator commission, as a fraction."}}},"update_time":{"type":"string","format":"date-time","description":"update_time is the last time the commission rate was changed."}}},"min_self_delegation":{"type":"string","description":"min_self_delegation is the validator\'s self declared minimum self delegation."},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"strictly positive if this validator\'s unbonding has been stopped by external modules"},"unbonding_ids":{"type":"array","items":{"type":"string","format":"uint64"},"title":"list of unbonding ids, each uniquely identifying an unbonding of this validator"}},"description":"Validator defines a validator, together with the total amount of the\\nValidator\'s bond shares and their exchange rate to coins. Slashing results in\\na decrease in the exchange rate, allowing correct calculation of future\\nundelegations without iterating over delegators. When coins are delegated to\\nthis validator, the validator is credited with a delegation whose number of\\nbond shares is based on the amount of coins delegated divided by the current\\nexchange rate. Voting power can be calculated as total bonded shares\\nmultiplied by exchange rate."},"description":"validators defines the validators\' info of a delegator."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryDelegatorValidatorsResponse is response type for the\\nQuery/DelegatorValidators RPC method."},"cosmos.staking.v1beta1.QueryHistoricalInfoResponse":{"type":"object","properties":{"hist":{"description":"hist defines the historical info at the given height.","type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"title":"prev block info","type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"valset":{"type":"array","items":{"type":"object","properties":{"operator_address":{"type":"string","description":"operator_address defines the address of the validator\'s operator; bech encoded in JSON."},"consensus_pubkey":{"description":"consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"jailed":{"type":"boolean","description":"jailed defined whether the validator has been jailed from bonded status or not."},"status":{"description":"status is the validator status (bonded/unbonding/unbonded).","type":"string","enum":["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"],"default":"BOND_STATUS_UNSPECIFIED"},"tokens":{"type":"string","description":"tokens define the delegated tokens (incl. self-delegation)."},"delegator_shares":{"type":"string","description":"delegator_shares defines total shares issued to a validator\'s delegators."},"description":{"description":"description defines the description terms for the validator.","type":"object","properties":{"moniker":{"type":"string","description":"moniker defines a human-readable name for the validator."},"identity":{"type":"string","description":"identity defines an optional identity signature (ex. UPort or Keybase)."},"website":{"type":"string","description":"website defines an optional website link."},"security_contact":{"type":"string","description":"security_contact defines an optional email for security contact."},"details":{"type":"string","description":"details define other optional details."},"metadata":{"description":"metadata defines extra information about the validator.","type":"object","properties":{"profile_pic_uri":{"type":"string","description":"profile_pic_uri defines a link to the validator profile picture."},"social_handle_uris":{"type":"array","items":{"type":"string"},"description":"social_handle_uris defines a string array of uris to the validator\'s social handles."}}}}},"unbonding_height":{"type":"string","format":"int64","description":"unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."},"unbonding_time":{"type":"string","format":"date-time","description":"unbonding_time defines, if unbonding, the min time for the validator to complete unbonding."},"commission":{"description":"commission defines the commission parameters.","type":"object","properties":{"commission_rates":{"description":"commission_rates defines the initial commission rates to be used for creating a validator.","type":"object","properties":{"rate":{"type":"string","description":"rate is the commission rate charged to delegators, as a fraction."},"max_rate":{"type":"string","description":"max_rate defines the maximum commission rate which validator can ever charge, as a fraction."},"max_change_rate":{"type":"string","description":"max_change_rate defines the maximum daily increase of the validator commission, as a fraction."}}},"update_time":{"type":"string","format":"date-time","description":"update_time is the last time the commission rate was changed."}}},"min_self_delegation":{"type":"string","description":"min_self_delegation is the validator\'s self declared minimum self delegation."},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"strictly positive if this validator\'s unbonding has been stopped by external modules"},"unbonding_ids":{"type":"array","items":{"type":"string","format":"uint64"},"title":"list of unbonding ids, each uniquely identifying an unbonding of this validator"}},"description":"Validator defines a validator, together with the total amount of the\\nValidator\'s bond shares and their exchange rate to coins. Slashing results in\\na decrease in the exchange rate, allowing correct calculation of future\\nundelegations without iterating over delegators. When coins are delegated to\\nthis validator, the validator is credited with a delegation whose number of\\nbond shares is based on the amount of coins delegated divided by the current\\nexchange rate. Voting power can be calculated as total bonded shares\\nmultiplied by exchange rate."}}}}},"description":"QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC\\nmethod."},"cosmos.staking.v1beta1.QueryParamsResponse":{"type":"object","properties":{"params":{"description":"params holds all the parameters of this module.","type":"object","properties":{"unbonding_time":{"type":"string","description":"unbonding_time is the time duration of unbonding."},"max_validators":{"type":"integer","format":"int64","description":"max_validators is the maximum number of validators."},"max_entries":{"type":"integer","format":"int64","description":"max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio)."},"historical_entries":{"type":"integer","format":"int64","description":"historical_entries is the number of historical entries to persist."},"bond_denom":{"type":"string","description":"bond_denom defines the bondable coin denomination."},"min_commission_rate":{"type":"string","title":"min_commission_rate is the chain-wide minimum commission rate that a validator can charge their delegators"},"key_rotation_fee":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto.","title":"key_rotation_fee is fee to be spent when rotating validator\'s key\\n(either consensus pubkey or operator key)"}}}},"description":"QueryParamsResponse is response type for the Query/Params RPC method."},"cosmos.staking.v1beta1.QueryPoolResponse":{"type":"object","properties":{"pool":{"description":"pool defines the pool info.","type":"object","properties":{"not_bonded_tokens":{"type":"string"},"bonded_tokens":{"type":"string"}}}},"description":"QueryPoolResponse is response type for the Query/Pool RPC method."},"cosmos.staking.v1beta1.QueryRedelegationsResponse":{"type":"object","properties":{"redelegation_responses":{"type":"array","items":{"type":"object","properties":{"redelegation":{"type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the bech32-encoded address of the delegator."},"validator_src_address":{"type":"string","description":"validator_src_address is the validator redelegation source operator address."},"validator_dst_address":{"type":"string","description":"validator_dst_address is the validator redelegation destination operator address."},"entries":{"type":"array","items":{"type":"object","properties":{"creation_height":{"type":"string","format":"int64","description":"creation_height  defines the height which the redelegation took place."},"completion_time":{"type":"string","format":"date-time","description":"completion_time defines the unix time for redelegation completion."},"initial_balance":{"type":"string","description":"initial_balance defines the initial balance when redelegation started."},"shares_dst":{"type":"string","description":"shares_dst is the amount of destination-validator shares created by redelegation."},"unbonding_id":{"type":"string","format":"uint64","title":"Incrementing id that uniquely identifies this entry"},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"Strictly positive if this entry\'s unbonding has been stopped by external modules"}},"description":"RedelegationEntry defines a redelegation object with relevant metadata."},"description":"entries are the redelegation entries.\\n\\nredelegation entries"}},"description":"Redelegation contains the list of a particular delegator\'s redelegating bonds\\nfrom a particular source validator to a particular destination validator."},"entries":{"type":"array","items":{"type":"object","properties":{"redelegation_entry":{"type":"object","properties":{"creation_height":{"type":"string","format":"int64","description":"creation_height  defines the height which the redelegation took place."},"completion_time":{"type":"string","format":"date-time","description":"completion_time defines the unix time for redelegation completion."},"initial_balance":{"type":"string","description":"initial_balance defines the initial balance when redelegation started."},"shares_dst":{"type":"string","description":"shares_dst is the amount of destination-validator shares created by redelegation."},"unbonding_id":{"type":"string","format":"uint64","title":"Incrementing id that uniquely identifies this entry"},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"Strictly positive if this entry\'s unbonding has been stopped by external modules"}},"description":"RedelegationEntry defines a redelegation object with relevant metadata."},"balance":{"type":"string"}},"description":"RedelegationEntryResponse is equivalent to a RedelegationEntry except that it\\ncontains a balance in addition to shares which is more suitable for client\\nresponses."}}},"description":"RedelegationResponse is equivalent to a Redelegation except that its entries\\ncontain a balance in addition to shares which is more suitable for client\\nresponses."}},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryRedelegationsResponse is response type for the Query/Redelegations RPC\\nmethod."},"cosmos.staking.v1beta1.QueryUnbondingDelegationResponse":{"type":"object","properties":{"unbond":{"description":"unbond defines the unbonding information of a delegation.","type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the encoded address of the delegator."},"validator_address":{"type":"string","description":"validator_address is the encoded address of the validator."},"entries":{"type":"array","items":{"type":"object","properties":{"creation_height":{"type":"string","format":"int64","description":"creation_height is the height which the unbonding took place."},"completion_time":{"type":"string","format":"date-time","description":"completion_time is the unix time for unbonding completion."},"initial_balance":{"type":"string","description":"initial_balance defines the tokens initially scheduled to receive at completion."},"balance":{"type":"string","description":"balance defines the tokens to receive at completion."},"unbonding_id":{"type":"string","format":"uint64","title":"Incrementing id that uniquely identifies this entry"},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"Strictly positive if this entry\'s unbonding has been stopped by external modules"}},"description":"UnbondingDelegationEntry defines an unbonding object with relevant metadata."},"description":"entries are the unbonding delegation entries.\\n\\nunbonding delegation entries"}}}},"description":"QueryDelegationResponse is response type for the Query/UnbondingDelegation\\nRPC method."},"cosmos.staking.v1beta1.QueryValidatorDelegationsResponse":{"type":"object","properties":{"delegation_responses":{"type":"array","items":{"type":"object","properties":{"delegation":{"type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the encoded address of the delegator."},"validator_address":{"type":"string","description":"validator_address is the encoded address of the validator."},"shares":{"type":"string","description":"shares define the delegation shares received."}},"description":"Delegation represents the bond with tokens held by an account. It is\\nowned by one delegator, and is associated with the voting power of one\\nvalidator."},"balance":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."}},"description":"DelegationResponse is equivalent to Delegation except that it contains a\\nbalance in addition to shares which is more suitable for client responses."}},"pagination":{"type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}},"description":"PageResponse is to be embedded in gRPC response messages where the\\ncorresponding request message has used PageRequest.\\n\\n message SomeResponse {\\n         repeated Bar results = 1;\\n         PageResponse page = 2;\\n }"}},"title":"QueryValidatorDelegationsResponse is response type for the\\nQuery/ValidatorDelegations RPC method"},"cosmos.staking.v1beta1.QueryValidatorResponse":{"type":"object","properties":{"validator":{"description":"validator defines the validator info.","type":"object","properties":{"operator_address":{"type":"string","description":"operator_address defines the address of the validator\'s operator; bech encoded in JSON."},"consensus_pubkey":{"description":"consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"jailed":{"type":"boolean","description":"jailed defined whether the validator has been jailed from bonded status or not."},"status":{"description":"status is the validator status (bonded/unbonding/unbonded).","type":"string","enum":["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"],"default":"BOND_STATUS_UNSPECIFIED"},"tokens":{"type":"string","description":"tokens define the delegated tokens (incl. self-delegation)."},"delegator_shares":{"type":"string","description":"delegator_shares defines total shares issued to a validator\'s delegators."},"description":{"description":"description defines the description terms for the validator.","type":"object","properties":{"moniker":{"type":"string","description":"moniker defines a human-readable name for the validator."},"identity":{"type":"string","description":"identity defines an optional identity signature (ex. UPort or Keybase)."},"website":{"type":"string","description":"website defines an optional website link."},"security_contact":{"type":"string","description":"security_contact defines an optional email for security contact."},"details":{"type":"string","description":"details define other optional details."},"metadata":{"description":"metadata defines extra information about the validator.","type":"object","properties":{"profile_pic_uri":{"type":"string","description":"profile_pic_uri defines a link to the validator profile picture."},"social_handle_uris":{"type":"array","items":{"type":"string"},"description":"social_handle_uris defines a string array of uris to the validator\'s social handles."}}}}},"unbonding_height":{"type":"string","format":"int64","description":"unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."},"unbonding_time":{"type":"string","format":"date-time","description":"unbonding_time defines, if unbonding, the min time for the validator to complete unbonding."},"commission":{"description":"commission defines the commission parameters.","type":"object","properties":{"commission_rates":{"description":"commission_rates defines the initial commission rates to be used for creating a validator.","type":"object","properties":{"rate":{"type":"string","description":"rate is the commission rate charged to delegators, as a fraction."},"max_rate":{"type":"string","description":"max_rate defines the maximum commission rate which validator can ever charge, as a fraction."},"max_change_rate":{"type":"string","description":"max_change_rate defines the maximum daily increase of the validator commission, as a fraction."}}},"update_time":{"type":"string","format":"date-time","description":"update_time is the last time the commission rate was changed."}}},"min_self_delegation":{"type":"string","description":"min_self_delegation is the validator\'s self declared minimum self delegation."},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"strictly positive if this validator\'s unbonding has been stopped by external modules"},"unbonding_ids":{"type":"array","items":{"type":"string","format":"uint64"},"title":"list of unbonding ids, each uniquely identifying an unbonding of this validator"}}}},"title":"QueryValidatorResponse is response type for the Query/Validator RPC method"},"cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse":{"type":"object","properties":{"unbonding_responses":{"type":"array","items":{"type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the encoded address of the delegator."},"validator_address":{"type":"string","description":"validator_address is the encoded address of the validator."},"entries":{"type":"array","items":{"type":"object","properties":{"creation_height":{"type":"string","format":"int64","description":"creation_height is the height which the unbonding took place."},"completion_time":{"type":"string","format":"date-time","description":"completion_time is the unix time for unbonding completion."},"initial_balance":{"type":"string","description":"initial_balance defines the tokens initially scheduled to receive at completion."},"balance":{"type":"string","description":"balance defines the tokens to receive at completion."},"unbonding_id":{"type":"string","format":"uint64","title":"Incrementing id that uniquely identifies this entry"},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"Strictly positive if this entry\'s unbonding has been stopped by external modules"}},"description":"UnbondingDelegationEntry defines an unbonding object with relevant metadata."},"description":"entries are the unbonding delegation entries.\\n\\nunbonding delegation entries"}},"description":"UnbondingDelegation stores all of a single delegator\'s unbonding bonds\\nfor a single validator in an time-ordered list."}},"pagination":{"type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}},"description":"PageResponse is to be embedded in gRPC response messages where the\\ncorresponding request message has used PageRequest.\\n\\n message SomeResponse {\\n         repeated Bar results = 1;\\n         PageResponse page = 2;\\n }"}},"description":"QueryValidatorUnbondingDelegationsResponse is response type for the\\nQuery/ValidatorUnbondingDelegations RPC method."},"cosmos.staking.v1beta1.QueryValidatorsResponse":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"operator_address":{"type":"string","description":"operator_address defines the address of the validator\'s operator; bech encoded in JSON."},"consensus_pubkey":{"description":"consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"jailed":{"type":"boolean","description":"jailed defined whether the validator has been jailed from bonded status or not."},"status":{"description":"status is the validator status (bonded/unbonding/unbonded).","type":"string","enum":["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"],"default":"BOND_STATUS_UNSPECIFIED"},"tokens":{"type":"string","description":"tokens define the delegated tokens (incl. self-delegation)."},"delegator_shares":{"type":"string","description":"delegator_shares defines total shares issued to a validator\'s delegators."},"description":{"description":"description defines the description terms for the validator.","type":"object","properties":{"moniker":{"type":"string","description":"moniker defines a human-readable name for the validator."},"identity":{"type":"string","description":"identity defines an optional identity signature (ex. UPort or Keybase)."},"website":{"type":"string","description":"website defines an optional website link."},"security_contact":{"type":"string","description":"security_contact defines an optional email for security contact."},"details":{"type":"string","description":"details define other optional details."},"metadata":{"description":"metadata defines extra information about the validator.","type":"object","properties":{"profile_pic_uri":{"type":"string","description":"profile_pic_uri defines a link to the validator profile picture."},"social_handle_uris":{"type":"array","items":{"type":"string"},"description":"social_handle_uris defines a string array of uris to the validator\'s social handles."}}}}},"unbonding_height":{"type":"string","format":"int64","description":"unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."},"unbonding_time":{"type":"string","format":"date-time","description":"unbonding_time defines, if unbonding, the min time for the validator to complete unbonding."},"commission":{"description":"commission defines the commission parameters.","type":"object","properties":{"commission_rates":{"description":"commission_rates defines the initial commission rates to be used for creating a validator.","type":"object","properties":{"rate":{"type":"string","description":"rate is the commission rate charged to delegators, as a fraction."},"max_rate":{"type":"string","description":"max_rate defines the maximum commission rate which validator can ever charge, as a fraction."},"max_change_rate":{"type":"string","description":"max_change_rate defines the maximum daily increase of the validator commission, as a fraction."}}},"update_time":{"type":"string","format":"date-time","description":"update_time is the last time the commission rate was changed."}}},"min_self_delegation":{"type":"string","description":"min_self_delegation is the validator\'s self declared minimum self delegation."},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"strictly positive if this validator\'s unbonding has been stopped by external modules"},"unbonding_ids":{"type":"array","items":{"type":"string","format":"uint64"},"title":"list of unbonding ids, each uniquely identifying an unbonding of this validator"}},"description":"Validator defines a validator, together with the total amount of the\\nValidator\'s bond shares and their exchange rate to coins. Slashing results in\\na decrease in the exchange rate, allowing correct calculation of future\\nundelegations without iterating over delegators. When coins are delegated to\\nthis validator, the validator is credited with a delegation whose number of\\nbond shares is based on the amount of coins delegated divided by the current\\nexchange rate. Voting power can be calculated as total bonded shares\\nmultiplied by exchange rate."}},"validator_info":{"type":"array","items":{"type":"object","properties":{"consensus_address":{"type":"string","description":"consensus_address is the consensus address of the validator."}},"description":"ValidatorInfo contains the validator\'s address and public key."},"description":"validator_info contains additional information for each validator.\\nThe order of the elements in this list corresponds to the order of the elements in the validators list.\\nFor example, if you want the ValidatorInfo for the third validator in the validators list,\\nyou should look at the third element in the validator_info list."},"pagination":{"type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}},"description":"PageResponse is to be embedded in gRPC response messages where the\\ncorresponding request message has used PageRequest.\\n\\n message SomeResponse {\\n         repeated Bar results = 1;\\n         PageResponse page = 2;\\n }"}},"title":"QueryValidatorsResponse is response type for the Query/Validators RPC method"},"cosmos.staking.v1beta1.Redelegation":{"type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the bech32-encoded address of the delegator."},"validator_src_address":{"type":"string","description":"validator_src_address is the validator redelegation source operator address."},"validator_dst_address":{"type":"string","description":"validator_dst_address is the validator redelegation destination operator address."},"entries":{"type":"array","items":{"type":"object","properties":{"creation_height":{"type":"string","format":"int64","description":"creation_height  defines the height which the redelegation took place."},"completion_time":{"type":"string","format":"date-time","description":"completion_time defines the unix time for redelegation completion."},"initial_balance":{"type":"string","description":"initial_balance defines the initial balance when redelegation started."},"shares_dst":{"type":"string","description":"shares_dst is the amount of destination-validator shares created by redelegation."},"unbonding_id":{"type":"string","format":"uint64","title":"Incrementing id that uniquely identifies this entry"},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"Strictly positive if this entry\'s unbonding has been stopped by external modules"}},"description":"RedelegationEntry defines a redelegation object with relevant metadata."},"description":"entries are the redelegation entries.\\n\\nredelegation entries"}},"description":"Redelegation contains the list of a particular delegator\'s redelegating bonds\\nfrom a particular source validator to a particular destination validator."},"cosmos.staking.v1beta1.RedelegationEntry":{"type":"object","properties":{"creation_height":{"type":"string","format":"int64","description":"creation_height  defines the height which the redelegation took place."},"completion_time":{"type":"string","format":"date-time","description":"completion_time defines the unix time for redelegation completion."},"initial_balance":{"type":"string","description":"initial_balance defines the initial balance when redelegation started."},"shares_dst":{"type":"string","description":"shares_dst is the amount of destination-validator shares created by redelegation."},"unbonding_id":{"type":"string","format":"uint64","title":"Incrementing id that uniquely identifies this entry"},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"Strictly positive if this entry\'s unbonding has been stopped by external modules"}},"description":"RedelegationEntry defines a redelegation object with relevant metadata."},"cosmos.staking.v1beta1.RedelegationEntryResponse":{"type":"object","properties":{"redelegation_entry":{"type":"object","properties":{"creation_height":{"type":"string","format":"int64","description":"creation_height  defines the height which the redelegation took place."},"completion_time":{"type":"string","format":"date-time","description":"completion_time defines the unix time for redelegation completion."},"initial_balance":{"type":"string","description":"initial_balance defines the initial balance when redelegation started."},"shares_dst":{"type":"string","description":"shares_dst is the amount of destination-validator shares created by redelegation."},"unbonding_id":{"type":"string","format":"uint64","title":"Incrementing id that uniquely identifies this entry"},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"Strictly positive if this entry\'s unbonding has been stopped by external modules"}},"description":"RedelegationEntry defines a redelegation object with relevant metadata."},"balance":{"type":"string"}},"description":"RedelegationEntryResponse is equivalent to a RedelegationEntry except that it\\ncontains a balance in addition to shares which is more suitable for client\\nresponses."},"cosmos.staking.v1beta1.RedelegationResponse":{"type":"object","properties":{"redelegation":{"type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the bech32-encoded address of the delegator."},"validator_src_address":{"type":"string","description":"validator_src_address is the validator redelegation source operator address."},"validator_dst_address":{"type":"string","description":"validator_dst_address is the validator redelegation destination operator address."},"entries":{"type":"array","items":{"type":"object","properties":{"creation_height":{"type":"string","format":"int64","description":"creation_height  defines the height which the redelegation took place."},"completion_time":{"type":"string","format":"date-time","description":"completion_time defines the unix time for redelegation completion."},"initial_balance":{"type":"string","description":"initial_balance defines the initial balance when redelegation started."},"shares_dst":{"type":"string","description":"shares_dst is the amount of destination-validator shares created by redelegation."},"unbonding_id":{"type":"string","format":"uint64","title":"Incrementing id that uniquely identifies this entry"},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"Strictly positive if this entry\'s unbonding has been stopped by external modules"}},"description":"RedelegationEntry defines a redelegation object with relevant metadata."},"description":"entries are the redelegation entries.\\n\\nredelegation entries"}},"description":"Redelegation contains the list of a particular delegator\'s redelegating bonds\\nfrom a particular source validator to a particular destination validator."},"entries":{"type":"array","items":{"type":"object","properties":{"redelegation_entry":{"type":"object","properties":{"creation_height":{"type":"string","format":"int64","description":"creation_height  defines the height which the redelegation took place."},"completion_time":{"type":"string","format":"date-time","description":"completion_time defines the unix time for redelegation completion."},"initial_balance":{"type":"string","description":"initial_balance defines the initial balance when redelegation started."},"shares_dst":{"type":"string","description":"shares_dst is the amount of destination-validator shares created by redelegation."},"unbonding_id":{"type":"string","format":"uint64","title":"Incrementing id that uniquely identifies this entry"},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"Strictly positive if this entry\'s unbonding has been stopped by external modules"}},"description":"RedelegationEntry defines a redelegation object with relevant metadata."},"balance":{"type":"string"}},"description":"RedelegationEntryResponse is equivalent to a RedelegationEntry except that it\\ncontains a balance in addition to shares which is more suitable for client\\nresponses."}}},"description":"RedelegationResponse is equivalent to a Redelegation except that its entries\\ncontain a balance in addition to shares which is more suitable for client\\nresponses."},"cosmos.staking.v1beta1.UnbondingDelegation":{"type":"object","properties":{"delegator_address":{"type":"string","description":"delegator_address is the encoded address of the delegator."},"validator_address":{"type":"string","description":"validator_address is the encoded address of the validator."},"entries":{"type":"array","items":{"type":"object","properties":{"creation_height":{"type":"string","format":"int64","description":"creation_height is the height which the unbonding took place."},"completion_time":{"type":"string","format":"date-time","description":"completion_time is the unix time for unbonding completion."},"initial_balance":{"type":"string","description":"initial_balance defines the tokens initially scheduled to receive at completion."},"balance":{"type":"string","description":"balance defines the tokens to receive at completion."},"unbonding_id":{"type":"string","format":"uint64","title":"Incrementing id that uniquely identifies this entry"},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"Strictly positive if this entry\'s unbonding has been stopped by external modules"}},"description":"UnbondingDelegationEntry defines an unbonding object with relevant metadata."},"description":"entries are the unbonding delegation entries.\\n\\nunbonding delegation entries"}},"description":"UnbondingDelegation stores all of a single delegator\'s unbonding bonds\\nfor a single validator in an time-ordered list."},"cosmos.staking.v1beta1.UnbondingDelegationEntry":{"type":"object","properties":{"creation_height":{"type":"string","format":"int64","description":"creation_height is the height which the unbonding took place."},"completion_time":{"type":"string","format":"date-time","description":"completion_time is the unix time for unbonding completion."},"initial_balance":{"type":"string","description":"initial_balance defines the tokens initially scheduled to receive at completion."},"balance":{"type":"string","description":"balance defines the tokens to receive at completion."},"unbonding_id":{"type":"string","format":"uint64","title":"Incrementing id that uniquely identifies this entry"},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"Strictly positive if this entry\'s unbonding has been stopped by external modules"}},"description":"UnbondingDelegationEntry defines an unbonding object with relevant metadata."},"cosmos.staking.v1beta1.Validator":{"type":"object","properties":{"operator_address":{"type":"string","description":"operator_address defines the address of the validator\'s operator; bech encoded in JSON."},"consensus_pubkey":{"description":"consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"jailed":{"type":"boolean","description":"jailed defined whether the validator has been jailed from bonded status or not."},"status":{"description":"status is the validator status (bonded/unbonding/unbonded).","type":"string","enum":["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"],"default":"BOND_STATUS_UNSPECIFIED"},"tokens":{"type":"string","description":"tokens define the delegated tokens (incl. self-delegation)."},"delegator_shares":{"type":"string","description":"delegator_shares defines total shares issued to a validator\'s delegators."},"description":{"description":"description defines the description terms for the validator.","type":"object","properties":{"moniker":{"type":"string","description":"moniker defines a human-readable name for the validator."},"identity":{"type":"string","description":"identity defines an optional identity signature (ex. UPort or Keybase)."},"website":{"type":"string","description":"website defines an optional website link."},"security_contact":{"type":"string","description":"security_contact defines an optional email for security contact."},"details":{"type":"string","description":"details define other optional details."},"metadata":{"description":"metadata defines extra information about the validator.","type":"object","properties":{"profile_pic_uri":{"type":"string","description":"profile_pic_uri defines a link to the validator profile picture."},"social_handle_uris":{"type":"array","items":{"type":"string"},"description":"social_handle_uris defines a string array of uris to the validator\'s social handles."}}}}},"unbonding_height":{"type":"string","format":"int64","description":"unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."},"unbonding_time":{"type":"string","format":"date-time","description":"unbonding_time defines, if unbonding, the min time for the validator to complete unbonding."},"commission":{"description":"commission defines the commission parameters.","type":"object","properties":{"commission_rates":{"description":"commission_rates defines the initial commission rates to be used for creating a validator.","type":"object","properties":{"rate":{"type":"string","description":"rate is the commission rate charged to delegators, as a fraction."},"max_rate":{"type":"string","description":"max_rate defines the maximum commission rate which validator can ever charge, as a fraction."},"max_change_rate":{"type":"string","description":"max_change_rate defines the maximum daily increase of the validator commission, as a fraction."}}},"update_time":{"type":"string","format":"date-time","description":"update_time is the last time the commission rate was changed."}}},"min_self_delegation":{"type":"string","description":"min_self_delegation is the validator\'s self declared minimum self delegation."},"unbonding_on_hold_ref_count":{"type":"string","format":"int64","title":"strictly positive if this validator\'s unbonding has been stopped by external modules"},"unbonding_ids":{"type":"array","items":{"type":"string","format":"uint64"},"title":"list of unbonding ids, each uniquely identifying an unbonding of this validator"}},"description":"Validator defines a validator, together with the total amount of the\\nValidator\'s bond shares and their exchange rate to coins. Slashing results in\\na decrease in the exchange rate, allowing correct calculation of future\\nundelegations without iterating over delegators. When coins are delegated to\\nthis validator, the validator is credited with a delegation whose number of\\nbond shares is based on the amount of coins delegated divided by the current\\nexchange rate. Voting power can be calculated as total bonded shares\\nmultiplied by exchange rate."},"cosmos.staking.v1beta1.ValidatorInfo":{"type":"object","properties":{"consensus_address":{"type":"string","description":"consensus_address is the consensus address of the validator."}},"description":"ValidatorInfo contains the validator\'s address and public key."},"cometbft.abci.v1.Event":{"type":"object","properties":{"type":{"type":"string"},"attributes":{"type":"array","items":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"},"index":{"type":"boolean","title":"nondeterministic"}},"description":"EventAttribute is a single key-value pair, associated with an event."}}},"description":"Event allows application developers to attach additional information to\\nResponseFinalizeBlock and ResponseCheckTx.\\nUp to 0.37, this could also be used in ResponseBeginBlock, ResponseEndBlock,\\nand ResponseDeliverTx.\\nLater, transactions may be queried using these events."},"cometbft.abci.v1.EventAttribute":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"},"index":{"type":"boolean","title":"nondeterministic"}},"description":"EventAttribute is a single key-value pair, associated with an event."},"cosmos.base.abci.v1beta1.ABCIMessageLog":{"type":"object","properties":{"msg_index":{"type":"integer","format":"int64"},"log":{"type":"string"},"events":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"attributes":{"type":"array","items":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"}},"description":"Attribute defines an attribute wrapper where the key and value are\\nstrings instead of raw bytes."}}},"description":"StringEvent defines en Event object wrapper where all the attributes\\ncontain key/value pairs that are strings instead of raw bytes."},"description":"Events contains a slice of Event objects that were emitted during some\\nexecution."}},"description":"ABCIMessageLog defines a structure containing an indexed tx ABCI message log."},"cosmos.base.abci.v1beta1.Attribute":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"}},"description":"Attribute defines an attribute wrapper where the key and value are\\nstrings instead of raw bytes."},"cosmos.base.abci.v1beta1.GasInfo":{"type":"object","properties":{"gas_wanted":{"type":"string","format":"uint64","description":"GasWanted is the maximum units of work we allow this tx to perform."},"gas_used":{"type":"string","format":"uint64","description":"GasUsed is the amount of gas actually consumed."}},"description":"GasInfo defines tx execution gas context."},"cosmos.base.abci.v1beta1.Result":{"type":"object","properties":{"data":{"type":"string","format":"byte","description":"Data is any data returned from message or handler execution. It MUST be\\nlength prefixed in order to separate data from multiple message executions.\\nDeprecated. This field is still populated, but prefer msg_response instead\\nbecause it also contains the Msg response typeURL."},"log":{"type":"string","description":"Log contains the log information from message or handler execution."},"events":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"attributes":{"type":"array","items":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"},"index":{"type":"boolean","title":"nondeterministic"}},"description":"EventAttribute is a single key-value pair, associated with an event."}}},"description":"Event allows application developers to attach additional information to\\nResponseFinalizeBlock and ResponseCheckTx.\\nUp to 0.37, this could also be used in ResponseBeginBlock, ResponseEndBlock,\\nand ResponseDeliverTx.\\nLater, transactions may be queried using these events."},"description":"Events contains a slice of Event objects that were emitted during message\\nor handler execution."},"msg_responses":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"description":"msg_responses contains the Msg handler responses type packed in Anys."}},"description":"Result is the union of ResponseFormat and ResponseCheckTx."},"cosmos.base.abci.v1beta1.StringEvent":{"type":"object","properties":{"type":{"type":"string"},"attributes":{"type":"array","items":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"}},"description":"Attribute defines an attribute wrapper where the key and value are\\nstrings instead of raw bytes."}}},"description":"StringEvent defines en Event object wrapper where all the attributes\\ncontain key/value pairs that are strings instead of raw bytes."},"cosmos.base.abci.v1beta1.TxResponse":{"type":"object","properties":{"height":{"type":"string","format":"int64","title":"The block height"},"txhash":{"type":"string","description":"The transaction hash."},"codespace":{"type":"string","title":"Namespace for the Code"},"code":{"type":"integer","format":"int64","description":"Response code."},"data":{"type":"string","description":"Result bytes, if any."},"raw_log":{"type":"string","description":"The output of the application\'s logger (raw string). May be\\nnon-deterministic."},"logs":{"type":"array","items":{"type":"object","properties":{"msg_index":{"type":"integer","format":"int64"},"log":{"type":"string"},"events":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"attributes":{"type":"array","items":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"}},"description":"Attribute defines an attribute wrapper where the key and value are\\nstrings instead of raw bytes."}}},"description":"StringEvent defines en Event object wrapper where all the attributes\\ncontain key/value pairs that are strings instead of raw bytes."},"description":"Events contains a slice of Event objects that were emitted during some\\nexecution."}},"description":"ABCIMessageLog defines a structure containing an indexed tx ABCI message log."},"description":"The output of the application\'s logger (typed). May be non-deterministic."},"info":{"type":"string","description":"Additional information. May be non-deterministic."},"gas_wanted":{"type":"string","format":"int64","description":"Amount of gas requested for transaction."},"gas_used":{"type":"string","format":"int64","description":"Amount of gas consumed by transaction."},"tx":{"description":"The request transaction bytes.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"timestamp":{"type":"string","description":"Time of the previous block. For heights > 1, it\'s the weighted median of\\nthe timestamps of the valid votes in the block.LastCommit. For height == 1,\\nit\'s genesis time."},"events":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"attributes":{"type":"array","items":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"},"index":{"type":"boolean","title":"nondeterministic"}},"description":"EventAttribute is a single key-value pair, associated with an event."}}},"description":"Event allows application developers to attach additional information to\\nResponseFinalizeBlock and ResponseCheckTx.\\nUp to 0.37, this could also be used in ResponseBeginBlock, ResponseEndBlock,\\nand ResponseDeliverTx.\\nLater, transactions may be queried using these events."},"description":"Events defines all the events emitted by processing a transaction. Note,\\nthese events include those emitted by processing all the messages and those\\nemitted from the ante. Whereas Logs contains the events, with\\nadditional metadata, emitted only by processing the messages."}},"description":"TxResponse defines a structure containing relevant tx data and metadata. The\\ntags are stringified and the log is JSON decoded."},"cosmos.crypto.multisig.v1beta1.CompactBitArray":{"type":"object","properties":{"extra_bits_stored":{"type":"integer","format":"int64"},"elems":{"type":"string","format":"byte"}},"description":"CompactBitArray is an implementation of a space efficient bit array.\\nThis is used to ensure that the encoded data takes up a minimal amount of\\nspace after proto encoding.\\nThis is not thread safe, and is not intended for concurrent usage."},"cosmos.tx.signing.v1beta1.SignMode":{"type":"string","enum":["SIGN_MODE_UNSPECIFIED","SIGN_MODE_DIRECT","SIGN_MODE_TEXTUAL","SIGN_MODE_DIRECT_AUX","SIGN_MODE_LEGACY_AMINO_JSON","SIGN_MODE_EIP_191"],"default":"SIGN_MODE_UNSPECIFIED","description":"SignMode represents a signing mode with its own security guarantees.\\n\\nThis enum should be considered a registry of all known sign modes\\nin the Cosmos ecosystem. Apps are not expected to support all known\\nsign modes. Apps that would like to support custom  sign modes are\\nencouraged to open a small PR against this file to add a new case\\nto this SignMode enum describing their sign mode so that different\\napps have a consistent version of this enum.\\n\\n - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be\\nrejected.\\n - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is\\nverified with raw bytes from Tx.\\n - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some\\nhuman-readable textual representation on top of the binary representation\\nfrom SIGN_MODE_DIRECT.\\n\\nSince: cosmos-sdk 0.50\\n - SIGN_MODE_DIRECT_AUX: SIGN_MODE_DIRECT_AUX specifies a signing mode which uses\\nSignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not\\nrequire signers signing over other signers\' `signer_info`.\\n\\nSince: cosmos-sdk 0.46\\n - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses\\nAmino JSON and will be removed in the future.\\n - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos\\nSDK. Ref: https://eips.ethereum.org/EIPS/eip-191\\n\\nCurrently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,\\nbut is not implemented on the SDK by default. To enable EIP-191, you need\\nto pass a custom `TxConfig` that has an implementation of\\n`SignModeHandler` for EIP-191. The SDK may decide to fully support\\nEIP-191 in the future.\\n\\nSince: cosmos-sdk 0.45.2\\nDeprecated: post 0.47.x Sign mode refers to a method of encoding string data for\\nsigning, but in the SDK, it also refers to how to encode a transaction into a string.\\nThis opens the possibility for additional EIP191 sign modes, like SIGN_MODE_EIP_191_TEXTUAL,\\nSIGN_MODE_EIP_191_LEGACY_JSON, and more.\\nEach new EIP191 sign mode should be accompanied by an associated ADR."},"cosmos.tx.v1beta1.AuthInfo":{"type":"object","properties":{"signer_infos":{"type":"array","items":{"$ref":"#/components/schemas/cosmos.tx.v1beta1.SignerInfo"},"description":"signer_infos defines the signing modes for the required signers. The number\\nand order of elements must match the required signers from TxBody\'s\\nmessages. The first element is the primary signer and the one which pays\\nthe fee."},"fee":{"description":"Fee is the fee and gas limit for the transaction. The first signer is the\\nprimary signer and the one which pays the fee. The fee can be calculated\\nbased on the cost of evaluating the body and doing signature verification\\nof the signers. This can be estimated via simulation.","type":"object","properties":{"amount":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"title":"amount is the amount of coins to be paid as a fee"},"gas_limit":{"type":"string","format":"uint64","title":"gas_limit is the maximum gas that can be used in transaction processing\\nbefore an out of gas error occurs"},"payer":{"type":"string","description":"if unset, the first signer is responsible for paying the fees. If set, the\\nspecified account must pay the fees. the payer must be a tx signer (and\\nthus have signed this field in AuthInfo). setting this field does *not*\\nchange the ordering of required signers for the transaction."},"granter":{"type":"string","title":"if set, the fee payer (either the first signer or the value of the payer\\nfield) requests that a fee grant be used to pay fees instead of the fee\\npayer\'s own balance. If an appropriate fee grant does not exist or the\\nchain does not support fee grants, this will fail"}}},"tip":{"description":"Tip is the optional tip used for transactions fees paid in another denom.\\n\\nThis field is ignored if the chain didn\'t enable tips, i.e. didn\'t add the\\n`TipDecorator` in its posthandler.","type":"object","properties":{"amount":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"title":"amount is the amount of the tip"},"tipper":{"type":"string","title":"tipper is the address of the account paying for the tip"}}}},"description":"AuthInfo describes the fee and signer modes that are used to sign a\\ntransaction."},"cosmos.tx.v1beta1.BroadcastMode":{"type":"string","enum":["BROADCAST_MODE_UNSPECIFIED","BROADCAST_MODE_BLOCK","BROADCAST_MODE_SYNC","BROADCAST_MODE_ASYNC"],"default":"BROADCAST_MODE_UNSPECIFIED","description":"BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC\\nmethod.\\n\\n - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering\\n - BROADCAST_MODE_BLOCK: Deprecated: use BROADCAST_MODE_SYNC instead,\\nBROADCAST_MODE_BLOCK is not supported by the SDK from v0.47.x onwards.\\n - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits\\nfor a CheckTx execution response only.\\n - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client\\nreturns immediately."},"cosmos.tx.v1beta1.BroadcastTxRequest":{"type":"object","properties":{"tx_bytes":{"type":"string","format":"byte","description":"tx_bytes is the raw transaction."},"mode":{"type":"string","enum":["BROADCAST_MODE_UNSPECIFIED","BROADCAST_MODE_BLOCK","BROADCAST_MODE_SYNC","BROADCAST_MODE_ASYNC"],"default":"BROADCAST_MODE_UNSPECIFIED","description":"BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC\\nmethod.\\n\\n - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering\\n - BROADCAST_MODE_BLOCK: Deprecated: use BROADCAST_MODE_SYNC instead,\\nBROADCAST_MODE_BLOCK is not supported by the SDK from v0.47.x onwards.\\n - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits\\nfor a CheckTx execution response only.\\n - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client\\nreturns immediately."}},"description":"BroadcastTxRequest is the request type for the Service.BroadcastTxRequest\\nRPC method."},"cosmos.tx.v1beta1.BroadcastTxResponse":{"type":"object","properties":{"tx_response":{"description":"tx_response is the queried TxResponses.","type":"object","properties":{"height":{"type":"string","format":"int64","title":"The block height"},"txhash":{"type":"string","description":"The transaction hash."},"codespace":{"type":"string","title":"Namespace for the Code"},"code":{"type":"integer","format":"int64","description":"Response code."},"data":{"type":"string","description":"Result bytes, if any."},"raw_log":{"type":"string","description":"The output of the application\'s logger (raw string). May be\\nnon-deterministic."},"logs":{"type":"array","items":{"type":"object","properties":{"msg_index":{"type":"integer","format":"int64"},"log":{"type":"string"},"events":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"attributes":{"type":"array","items":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"}},"description":"Attribute defines an attribute wrapper where the key and value are\\nstrings instead of raw bytes."}}},"description":"StringEvent defines en Event object wrapper where all the attributes\\ncontain key/value pairs that are strings instead of raw bytes."},"description":"Events contains a slice of Event objects that were emitted during some\\nexecution."}},"description":"ABCIMessageLog defines a structure containing an indexed tx ABCI message log."},"description":"The output of the application\'s logger (typed). May be non-deterministic."},"info":{"type":"string","description":"Additional information. May be non-deterministic."},"gas_wanted":{"type":"string","format":"int64","description":"Amount of gas requested for transaction."},"gas_used":{"type":"string","format":"int64","description":"Amount of gas consumed by transaction."},"tx":{"description":"The request transaction bytes.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"timestamp":{"type":"string","description":"Time of the previous block. For heights > 1, it\'s the weighted median of\\nthe timestamps of the valid votes in the block.LastCommit. For height == 1,\\nit\'s genesis time."},"events":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"attributes":{"type":"array","items":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"},"index":{"type":"boolean","title":"nondeterministic"}},"description":"EventAttribute is a single key-value pair, associated with an event."}}},"description":"Event allows application developers to attach additional information to\\nResponseFinalizeBlock and ResponseCheckTx.\\nUp to 0.37, this could also be used in ResponseBeginBlock, ResponseEndBlock,\\nand ResponseDeliverTx.\\nLater, transactions may be queried using these events."},"description":"Events defines all the events emitted by processing a transaction. Note,\\nthese events include those emitted by processing all the messages and those\\nemitted from the ante. Whereas Logs contains the events, with\\nadditional metadata, emitted only by processing the messages."}}}},"description":"BroadcastTxResponse is the response type for the\\nService.BroadcastTx method."},"cosmos.tx.v1beta1.Fee":{"type":"object","properties":{"amount":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"title":"amount is the amount of coins to be paid as a fee"},"gas_limit":{"type":"string","format":"uint64","title":"gas_limit is the maximum gas that can be used in transaction processing\\nbefore an out of gas error occurs"},"payer":{"type":"string","description":"if unset, the first signer is responsible for paying the fees. If set, the\\nspecified account must pay the fees. the payer must be a tx signer (and\\nthus have signed this field in AuthInfo). setting this field does *not*\\nchange the ordering of required signers for the transaction."},"granter":{"type":"string","title":"if set, the fee payer (either the first signer or the value of the payer\\nfield) requests that a fee grant be used to pay fees instead of the fee\\npayer\'s own balance. If an appropriate fee grant does not exist or the\\nchain does not support fee grants, this will fail"}},"description":"Fee includes the amount of coins paid in fees and the maximum\\ngas to be used by the transaction. The ratio yields an effective \\"gasprice\\",\\nwhich must be above some minimum to be accepted into the mempool."},"cosmos.tx.v1beta1.GetBlockWithTxsResponse":{"type":"object","properties":{"txs":{"type":"array","items":{"$ref":"#/components/schemas/cosmos.tx.v1beta1.Tx"},"description":"txs are the transactions in the block."},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"block":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"data":{"type":"object","properties":{"txs":{"type":"array","items":{"type":"string","format":"byte"},"description":"Txs that will be applied by state @ block.Height+1.\\nNOTE: not all txs here are valid.  We\'re just agreeing on the order first.\\nThis means that block.AppHash does not include these txs."}},"title":"Data contains the set of transactions included in the block"},"evidence":{"type":"object","properties":{"evidence":{"type":"array","items":{"type":"object","properties":{"duplicate_vote_evidence":{"type":"object","properties":{"vote_a":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"vote_b":{"type":"object","properties":{"type":{"type":"string","enum":["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],"default":"SIGNED_MSG_TYPE_UNKNOWN","description":"SignedMsgType is a type of signed message in the consensus.\\n\\n - SIGNED_MSG_TYPE_UNKNOWN: Unknown\\n - SIGNED_MSG_TYPE_PREVOTE: Prevote\\n - SIGNED_MSG_TYPE_PRECOMMIT: Precommit\\n - SIGNED_MSG_TYPE_PROPOSAL: Proposal"},"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"timestamp":{"type":"string","format":"date-time"},"validator_address":{"type":"string","format":"byte"},"validator_index":{"type":"integer","format":"int32"},"signature":{"type":"string","format":"byte","description":"Vote signature by the validator if they participated in consensus for the\\nassociated block."},"extension":{"type":"string","format":"byte","description":"Vote extension provided by the application. Only valid for precommit\\nmessages."},"extension_signature":{"type":"string","format":"byte","description":"Vote extension signature by the validator if they participated in\\nconsensus for the associated block.\\nOnly valid for precommit messages."}},"description":"Vote represents a prevote or precommit vote from validators for\\nconsensus."},"total_voting_power":{"type":"string","format":"int64"},"validator_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},"light_client_attack_evidence":{"type":"object","properties":{"conflicting_block":{"type":"object","properties":{"signed_header":{"type":"object","properties":{"header":{"type":"object","properties":{"version":{"title":"basic block info","type":"object","properties":{"block":{"type":"string","format":"uint64"},"app":{"type":"string","format":"uint64"}},"description":"Consensus captures the consensus rules for processing a block in the blockchain,\\nincluding all blockchain data structures and the rules of the application\'s\\nstate transition machine."},"chain_id":{"type":"string"},"height":{"type":"string","format":"int64"},"time":{"type":"string","format":"date-time"},"last_block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.","title":"prev block info"},"last_commit_hash":{"type":"string","format":"byte","description":"commit from validators from the last block","title":"hashes of block data"},"data_hash":{"type":"string","format":"byte","title":"transactions"},"validators_hash":{"type":"string","format":"byte","description":"validators for the current block","title":"hashes from the app output from the prev block"},"next_validators_hash":{"type":"string","format":"byte","title":"validators for the next block"},"consensus_hash":{"type":"string","format":"byte","title":"consensus params for current block"},"app_hash":{"type":"string","format":"byte","title":"state after txs from the previous block"},"last_results_hash":{"type":"string","format":"byte","title":"root hash of all results from the txs from the previous block"},"evidence_hash":{"type":"string","format":"byte","description":"evidence included in the block","title":"consensus info"},"proposer_address":{"type":"string","format":"byte","title":"original proposer of the block"}},"description":"Header defines the structure of a block header."},"commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it."},"validator_set":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"proposer":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."},"total_voting_power":{"type":"string","format":"int64"}},"description":"ValidatorSet defines a set of validators."}},"description":"LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients."},"common_height":{"type":"string","format":"int64"},"byzantine_validators":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","format":"byte"},"pub_key":{"type":"object","properties":{"ed25519":{"type":"string","format":"byte"},"secp256k1":{"type":"string","format":"byte"}},"description":"PublicKey is a ED25519 or a secp256k1 public key."},"voting_power":{"type":"string","format":"int64"},"proposer_priority":{"type":"string","format":"int64"}},"description":"Validator represents a node participating in the consensus protocol."}},"total_voting_power":{"type":"string","format":"int64"},"timestamp":{"type":"string","format":"date-time"}},"description":"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."}},"description":"Evidence is a generic type for wrapping evidence of misbehavior by a validator."}}},"description":"EvidenceList is a list of evidence."},"last_commit":{"type":"object","properties":{"height":{"type":"string","format":"int64"},"round":{"type":"integer","format":"int32"},"block_id":{"type":"object","properties":{"hash":{"type":"string","format":"byte"},"part_set_header":{"type":"object","properties":{"total":{"type":"integer","format":"int64"},"hash":{"type":"string","format":"byte"}},"description":"Header of the parts set for a block."}},"description":"BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."},"signatures":{"type":"array","items":{"type":"object","properties":{"block_id_flag":{"type":"string","enum":["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],"default":"BLOCK_ID_FLAG_UNKNOWN","description":"- BLOCK_ID_FLAG_UNKNOWN: Indicates an error condition\\n - BLOCK_ID_FLAG_ABSENT: The vote was not received\\n - BLOCK_ID_FLAG_COMMIT: Voted for the block that received the majority\\n - BLOCK_ID_FLAG_NIL: Voted for nil","title":"BlockIdFlag indicates which BlockID the signature is for"},"validator_address":{"type":"string","format":"byte"},"timestamp":{"type":"string","format":"date-time"},"signature":{"type":"string","format":"byte"}},"description":"CommitSig is a part of the Vote included in a Commit."}}},"description":"Commit contains the evidence that a block was committed by a set of validators."}},"description":"Block defines the structure of a block in the CometBFT blockchain."},"pagination":{"description":"pagination defines a pagination for the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"GetBlockWithTxsResponse is the response type for the Service.GetBlockWithTxs\\nmethod."},"cosmos.tx.v1beta1.GetTxResponse":{"type":"object","properties":{"tx":{"$ref":"#/components/schemas/cosmos.tx.v1beta1.Tx"},"tx_response":{"description":"tx_response is the queried TxResponses.","type":"object","properties":{"height":{"type":"string","format":"int64","title":"The block height"},"txhash":{"type":"string","description":"The transaction hash."},"codespace":{"type":"string","title":"Namespace for the Code"},"code":{"type":"integer","format":"int64","description":"Response code."},"data":{"type":"string","description":"Result bytes, if any."},"raw_log":{"type":"string","description":"The output of the application\'s logger (raw string). May be\\nnon-deterministic."},"logs":{"type":"array","items":{"type":"object","properties":{"msg_index":{"type":"integer","format":"int64"},"log":{"type":"string"},"events":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"attributes":{"type":"array","items":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"}},"description":"Attribute defines an attribute wrapper where the key and value are\\nstrings instead of raw bytes."}}},"description":"StringEvent defines en Event object wrapper where all the attributes\\ncontain key/value pairs that are strings instead of raw bytes."},"description":"Events contains a slice of Event objects that were emitted during some\\nexecution."}},"description":"ABCIMessageLog defines a structure containing an indexed tx ABCI message log."},"description":"The output of the application\'s logger (typed). May be non-deterministic."},"info":{"type":"string","description":"Additional information. May be non-deterministic."},"gas_wanted":{"type":"string","format":"int64","description":"Amount of gas requested for transaction."},"gas_used":{"type":"string","format":"int64","description":"Amount of gas consumed by transaction."},"tx":{"description":"The request transaction bytes.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"timestamp":{"type":"string","description":"Time of the previous block. For heights > 1, it\'s the weighted median of\\nthe timestamps of the valid votes in the block.LastCommit. For height == 1,\\nit\'s genesis time."},"events":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"attributes":{"type":"array","items":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"},"index":{"type":"boolean","title":"nondeterministic"}},"description":"EventAttribute is a single key-value pair, associated with an event."}}},"description":"Event allows application developers to attach additional information to\\nResponseFinalizeBlock and ResponseCheckTx.\\nUp to 0.37, this could also be used in ResponseBeginBlock, ResponseEndBlock,\\nand ResponseDeliverTx.\\nLater, transactions may be queried using these events."},"description":"Events defines all the events emitted by processing a transaction. Note,\\nthese events include those emitted by processing all the messages and those\\nemitted from the ante. Whereas Logs contains the events, with\\nadditional metadata, emitted only by processing the messages."}}}},"description":"GetTxResponse is the response type for the Service.GetTx method."},"cosmos.tx.v1beta1.GetTxsEventResponse":{"type":"object","properties":{"txs":{"type":"array","items":{"$ref":"#/components/schemas/cosmos.tx.v1beta1.Tx"},"description":"txs is the list of queried transactions."},"tx_responses":{"type":"array","items":{"type":"object","properties":{"height":{"type":"string","format":"int64","title":"The block height"},"txhash":{"type":"string","description":"The transaction hash."},"codespace":{"type":"string","title":"Namespace for the Code"},"code":{"type":"integer","format":"int64","description":"Response code."},"data":{"type":"string","description":"Result bytes, if any."},"raw_log":{"type":"string","description":"The output of the application\'s logger (raw string). May be\\nnon-deterministic."},"logs":{"type":"array","items":{"type":"object","properties":{"msg_index":{"type":"integer","format":"int64"},"log":{"type":"string"},"events":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"attributes":{"type":"array","items":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"}},"description":"Attribute defines an attribute wrapper where the key and value are\\nstrings instead of raw bytes."}}},"description":"StringEvent defines en Event object wrapper where all the attributes\\ncontain key/value pairs that are strings instead of raw bytes."},"description":"Events contains a slice of Event objects that were emitted during some\\nexecution."}},"description":"ABCIMessageLog defines a structure containing an indexed tx ABCI message log."},"description":"The output of the application\'s logger (typed). May be non-deterministic."},"info":{"type":"string","description":"Additional information. May be non-deterministic."},"gas_wanted":{"type":"string","format":"int64","description":"Amount of gas requested for transaction."},"gas_used":{"type":"string","format":"int64","description":"Amount of gas consumed by transaction."},"tx":{"description":"The request transaction bytes.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"timestamp":{"type":"string","description":"Time of the previous block. For heights > 1, it\'s the weighted median of\\nthe timestamps of the valid votes in the block.LastCommit. For height == 1,\\nit\'s genesis time."},"events":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"attributes":{"type":"array","items":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"},"index":{"type":"boolean","title":"nondeterministic"}},"description":"EventAttribute is a single key-value pair, associated with an event."}}},"description":"Event allows application developers to attach additional information to\\nResponseFinalizeBlock and ResponseCheckTx.\\nUp to 0.37, this could also be used in ResponseBeginBlock, ResponseEndBlock,\\nand ResponseDeliverTx.\\nLater, transactions may be queried using these events."},"description":"Events defines all the events emitted by processing a transaction. Note,\\nthese events include those emitted by processing all the messages and those\\nemitted from the ante. Whereas Logs contains the events, with\\nadditional metadata, emitted only by processing the messages."}},"description":"TxResponse defines a structure containing relevant tx data and metadata. The\\ntags are stringified and the log is JSON decoded."},"description":"tx_responses is the list of queried TxResponses."},"pagination":{"description":"pagination defines a pagination for the response.\\nDeprecated: post v0.46.x use total instead.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}},"total":{"type":"string","format":"uint64","title":"total is total number of results available"}},"description":"GetTxsEventResponse is the response type for the Service.TxsByEvents\\nRPC method."},"cosmos.tx.v1beta1.ModeInfo":{"type":"object","properties":{"single":{"title":"single represents a single signer","type":"object","properties":{"mode":{"title":"mode is the signing mode of the single signer","type":"string","enum":["SIGN_MODE_UNSPECIFIED","SIGN_MODE_DIRECT","SIGN_MODE_TEXTUAL","SIGN_MODE_DIRECT_AUX","SIGN_MODE_LEGACY_AMINO_JSON","SIGN_MODE_EIP_191"],"default":"SIGN_MODE_UNSPECIFIED","description":"SignMode represents a signing mode with its own security guarantees.\\n\\nThis enum should be considered a registry of all known sign modes\\nin the Cosmos ecosystem. Apps are not expected to support all known\\nsign modes. Apps that would like to support custom  sign modes are\\nencouraged to open a small PR against this file to add a new case\\nto this SignMode enum describing their sign mode so that different\\napps have a consistent version of this enum.\\n\\n - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be\\nrejected.\\n - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is\\nverified with raw bytes from Tx.\\n - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some\\nhuman-readable textual representation on top of the binary representation\\nfrom SIGN_MODE_DIRECT.\\n\\nSince: cosmos-sdk 0.50\\n - SIGN_MODE_DIRECT_AUX: SIGN_MODE_DIRECT_AUX specifies a signing mode which uses\\nSignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not\\nrequire signers signing over other signers\' `signer_info`.\\n\\nSince: cosmos-sdk 0.46\\n - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses\\nAmino JSON and will be removed in the future.\\n - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos\\nSDK. Ref: https://eips.ethereum.org/EIPS/eip-191\\n\\nCurrently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,\\nbut is not implemented on the SDK by default. To enable EIP-191, you need\\nto pass a custom `TxConfig` that has an implementation of\\n`SignModeHandler` for EIP-191. The SDK may decide to fully support\\nEIP-191 in the future.\\n\\nSince: cosmos-sdk 0.45.2\\nDeprecated: post 0.47.x Sign mode refers to a method of encoding string data for\\nsigning, but in the SDK, it also refers to how to encode a transaction into a string.\\nThis opens the possibility for additional EIP191 sign modes, like SIGN_MODE_EIP_191_TEXTUAL,\\nSIGN_MODE_EIP_191_LEGACY_JSON, and more.\\nEach new EIP191 sign mode should be accompanied by an associated ADR."}}},"multi":{"$ref":"#/components/schemas/cosmos.tx.v1beta1.ModeInfo.Multi"}},"description":"ModeInfo describes the signing mode of a single or nested multisig signer."},"cosmos.tx.v1beta1.ModeInfo.Multi":{"type":"object","properties":{"bitarray":{"title":"bitarray specifies which keys within the multisig are signing","type":"object","properties":{"extra_bits_stored":{"type":"integer","format":"int64"},"elems":{"type":"string","format":"byte"}},"description":"CompactBitArray is an implementation of a space efficient bit array.\\nThis is used to ensure that the encoded data takes up a minimal amount of\\nspace after proto encoding.\\nThis is not thread safe, and is not intended for concurrent usage."},"mode_infos":{"type":"array","items":{"$ref":"#/components/schemas/cosmos.tx.v1beta1.ModeInfo"},"title":"mode_infos is the corresponding modes of the signers of the multisig\\nwhich could include nested multisig public keys"}},"title":"Multi is the mode info for a multisig public key"},"cosmos.tx.v1beta1.ModeInfo.Single":{"type":"object","properties":{"mode":{"title":"mode is the signing mode of the single signer","type":"string","enum":["SIGN_MODE_UNSPECIFIED","SIGN_MODE_DIRECT","SIGN_MODE_TEXTUAL","SIGN_MODE_DIRECT_AUX","SIGN_MODE_LEGACY_AMINO_JSON","SIGN_MODE_EIP_191"],"default":"SIGN_MODE_UNSPECIFIED","description":"SignMode represents a signing mode with its own security guarantees.\\n\\nThis enum should be considered a registry of all known sign modes\\nin the Cosmos ecosystem. Apps are not expected to support all known\\nsign modes. Apps that would like to support custom  sign modes are\\nencouraged to open a small PR against this file to add a new case\\nto this SignMode enum describing their sign mode so that different\\napps have a consistent version of this enum.\\n\\n - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be\\nrejected.\\n - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is\\nverified with raw bytes from Tx.\\n - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some\\nhuman-readable textual representation on top of the binary representation\\nfrom SIGN_MODE_DIRECT.\\n\\nSince: cosmos-sdk 0.50\\n - SIGN_MODE_DIRECT_AUX: SIGN_MODE_DIRECT_AUX specifies a signing mode which uses\\nSignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not\\nrequire signers signing over other signers\' `signer_info`.\\n\\nSince: cosmos-sdk 0.46\\n - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses\\nAmino JSON and will be removed in the future.\\n - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos\\nSDK. Ref: https://eips.ethereum.org/EIPS/eip-191\\n\\nCurrently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,\\nbut is not implemented on the SDK by default. To enable EIP-191, you need\\nto pass a custom `TxConfig` that has an implementation of\\n`SignModeHandler` for EIP-191. The SDK may decide to fully support\\nEIP-191 in the future.\\n\\nSince: cosmos-sdk 0.45.2\\nDeprecated: post 0.47.x Sign mode refers to a method of encoding string data for\\nsigning, but in the SDK, it also refers to how to encode a transaction into a string.\\nThis opens the possibility for additional EIP191 sign modes, like SIGN_MODE_EIP_191_TEXTUAL,\\nSIGN_MODE_EIP_191_LEGACY_JSON, and more.\\nEach new EIP191 sign mode should be accompanied by an associated ADR."}},"title":"Single is the mode info for a single signer. It is structured as a message\\nto allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the\\nfuture"},"cosmos.tx.v1beta1.OrderBy":{"type":"string","enum":["ORDER_BY_UNSPECIFIED","ORDER_BY_ASC","ORDER_BY_DESC"],"default":"ORDER_BY_UNSPECIFIED","description":"- ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults\\nto ASC in this case.\\n - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order\\n - ORDER_BY_DESC: ORDER_BY_DESC defines descending order","title":"OrderBy defines the sorting order"},"cosmos.tx.v1beta1.SignerInfo":{"type":"object","properties":{"public_key":{"description":"public_key is the public key of the signer. It is optional for accounts\\nthat already exist in state. If unset, the verifier can use the required \\\\\\nsigner address for this position and lookup the public key.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"mode_info":{"$ref":"#/components/schemas/cosmos.tx.v1beta1.ModeInfo"},"sequence":{"type":"string","format":"uint64","description":"sequence is the sequence of the account, which describes the\\nnumber of committed transactions signed by a given address. It is used to\\nprevent replay attacks."}},"description":"SignerInfo describes the public key and signing mode of a single top-level\\nsigner."},"cosmos.tx.v1beta1.SimulateRequest":{"type":"object","properties":{"tx":{"$ref":"#/components/schemas/cosmos.tx.v1beta1.Tx"},"tx_bytes":{"type":"string","format":"byte","description":"tx_bytes is the raw transaction."}},"description":"SimulateRequest is the request type for the Service.Simulate\\nRPC method."},"cosmos.tx.v1beta1.SimulateResponse":{"type":"object","properties":{"gas_info":{"description":"gas_info is the information about gas used in the simulation.","type":"object","properties":{"gas_wanted":{"type":"string","format":"uint64","description":"GasWanted is the maximum units of work we allow this tx to perform."},"gas_used":{"type":"string","format":"uint64","description":"GasUsed is the amount of gas actually consumed."}}},"result":{"description":"result is the result of the simulation.","type":"object","properties":{"data":{"type":"string","format":"byte","description":"Data is any data returned from message or handler execution. It MUST be\\nlength prefixed in order to separate data from multiple message executions.\\nDeprecated. This field is still populated, but prefer msg_response instead\\nbecause it also contains the Msg response typeURL."},"log":{"type":"string","description":"Log contains the log information from message or handler execution."},"events":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"attributes":{"type":"array","items":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"},"index":{"type":"boolean","title":"nondeterministic"}},"description":"EventAttribute is a single key-value pair, associated with an event."}}},"description":"Event allows application developers to attach additional information to\\nResponseFinalizeBlock and ResponseCheckTx.\\nUp to 0.37, this could also be used in ResponseBeginBlock, ResponseEndBlock,\\nand ResponseDeliverTx.\\nLater, transactions may be queried using these events."},"description":"Events contains a slice of Event objects that were emitted during message\\nor handler execution."},"msg_responses":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"description":"msg_responses contains the Msg handler responses type packed in Anys."}}}},"description":"SimulateResponse is the response type for the\\nService.SimulateRPC method."},"cosmos.tx.v1beta1.Tip":{"type":"object","properties":{"amount":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"title":"amount is the amount of the tip"},"tipper":{"type":"string","title":"tipper is the address of the account paying for the tip"}},"description":"Tip is the tip used for meta-transactions."},"cosmos.tx.v1beta1.Tx":{"type":"object","properties":{"body":{"title":"body is the processable content of the transaction","type":"object","properties":{"messages":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"description":"messages is a list of messages to be executed. The required signers of\\nthose messages define the number and order of elements in AuthInfo\'s\\nsigner_infos and Tx\'s signatures. Each required signer address is added to\\nthe list only the first time it occurs.\\nBy convention, the first required signer (usually from the first message)\\nis referred to as the primary signer and pays the fee for the whole\\ntransaction."},"memo":{"type":"string","description":"memo is any arbitrary note/comment to be added to the transaction.\\nWARNING: in clients, any publicly exposed text should not be called memo,\\nbut should be called `note` instead (see\\nhttps://github.com/cosmos/cosmos-sdk/issues/9122)."},"timeout_height":{"type":"string","format":"uint64","description":"timeout_height is the block height after which this transaction will not\\nbe processed by the chain."},"unordered":{"type":"boolean","description":"unordered, when set to true, indicates that the transaction signer(s)\\nintend for the transaction to be evaluated and executed in an un-ordered\\nfashion. Specifically, the account\'s nonce will NOT be checked or\\nincremented, which allows for fire-and-forget as well as concurrent\\ntransaction execution.\\n\\nNote, when set to true, the existing \'timeout_height\' value must\\nbe set and will be used to correspond to a time_stamp in which the transaction is deemed\\nvalid."},"timeout_timestamp":{"type":"string","format":"date-time","description":"timeout_timestamp is the block time after which this transaction will not\\nbe processed by the chain.\\n\\nNote, if unordered=true this value MUST be set\\nand will act as a short-lived TTL in which the transaction is deemed valid\\nand kept in memory to prevent duplicates."},"extension_options":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"title":"extension_options are arbitrary options that can be added by chains\\nwhen the default options are not sufficient. If any of these are present\\nand can\'t be handled, the transaction will be rejected"},"non_critical_extension_options":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"title":"extension_options are arbitrary options that can be added by chains\\nwhen the default options are not sufficient. If any of these are present\\nand can\'t be handled, they will be ignored"}},"description":"TxBody is the body of a transaction that all signers sign over."},"auth_info":{"$ref":"#/components/schemas/cosmos.tx.v1beta1.AuthInfo"},"signatures":{"type":"array","items":{"type":"string","format":"byte"},"description":"signatures is a list of signatures that matches the length and order of\\nAuthInfo\'s signer_infos to allow connecting signature meta information like\\npublic key and signing mode by position."}},"description":"Tx is the standard type used for broadcasting transactions."},"cosmos.tx.v1beta1.TxBody":{"type":"object","properties":{"messages":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"description":"messages is a list of messages to be executed. The required signers of\\nthose messages define the number and order of elements in AuthInfo\'s\\nsigner_infos and Tx\'s signatures. Each required signer address is added to\\nthe list only the first time it occurs.\\nBy convention, the first required signer (usually from the first message)\\nis referred to as the primary signer and pays the fee for the whole\\ntransaction."},"memo":{"type":"string","description":"memo is any arbitrary note/comment to be added to the transaction.\\nWARNING: in clients, any publicly exposed text should not be called memo,\\nbut should be called `note` instead (see\\nhttps://github.com/cosmos/cosmos-sdk/issues/9122)."},"timeout_height":{"type":"string","format":"uint64","description":"timeout_height is the block height after which this transaction will not\\nbe processed by the chain."},"unordered":{"type":"boolean","description":"unordered, when set to true, indicates that the transaction signer(s)\\nintend for the transaction to be evaluated and executed in an un-ordered\\nfashion. Specifically, the account\'s nonce will NOT be checked or\\nincremented, which allows for fire-and-forget as well as concurrent\\ntransaction execution.\\n\\nNote, when set to true, the existing \'timeout_height\' value must\\nbe set and will be used to correspond to a time_stamp in which the transaction is deemed\\nvalid."},"timeout_timestamp":{"type":"string","format":"date-time","description":"timeout_timestamp is the block time after which this transaction will not\\nbe processed by the chain.\\n\\nNote, if unordered=true this value MUST be set\\nand will act as a short-lived TTL in which the transaction is deemed valid\\nand kept in memory to prevent duplicates."},"extension_options":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"title":"extension_options are arbitrary options that can be added by chains\\nwhen the default options are not sufficient. If any of these are present\\nand can\'t be handled, the transaction will be rejected"},"non_critical_extension_options":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"title":"extension_options are arbitrary options that can be added by chains\\nwhen the default options are not sufficient. If any of these are present\\nand can\'t be handled, they will be ignored"}},"description":"TxBody is the body of a transaction that all signers sign over."},"cosmos.tx.v1beta1.TxDecodeAminoRequest":{"type":"object","properties":{"amino_binary":{"type":"string","format":"byte"}},"description":"TxDecodeAminoRequest is the request type for the Service.TxDecodeAmino\\nRPC method."},"cosmos.tx.v1beta1.TxDecodeAminoResponse":{"type":"object","properties":{"amino_json":{"type":"string"}},"description":"TxDecodeAminoResponse is the response type for the Service.TxDecodeAmino\\nRPC method."},"cosmos.tx.v1beta1.TxDecodeRequest":{"type":"object","properties":{"tx_bytes":{"type":"string","format":"byte","description":"tx_bytes is the raw transaction."}},"description":"TxDecodeRequest is the request type for the Service.TxDecode\\nRPC method."},"cosmos.tx.v1beta1.TxDecodeResponse":{"type":"object","properties":{"tx":{"$ref":"#/components/schemas/cosmos.tx.v1beta1.Tx"}},"description":"TxDecodeResponse is the response type for the\\nService.TxDecode method."},"cosmos.tx.v1beta1.TxEncodeAminoRequest":{"type":"object","properties":{"amino_json":{"type":"string"}},"description":"TxEncodeAminoRequest is the request type for the Service.TxEncodeAmino\\nRPC method."},"cosmos.tx.v1beta1.TxEncodeAminoResponse":{"type":"object","properties":{"amino_binary":{"type":"string","format":"byte"}},"description":"TxEncodeAminoResponse is the response type for the Service.TxEncodeAmino\\nRPC method."},"cosmos.tx.v1beta1.TxEncodeRequest":{"type":"object","properties":{"tx":{"$ref":"#/components/schemas/cosmos.tx.v1beta1.Tx"}},"description":"TxEncodeRequest is the request type for the Service.TxEncode\\nRPC method."},"cosmos.tx.v1beta1.TxEncodeResponse":{"type":"object","properties":{"tx_bytes":{"type":"string","format":"byte","description":"tx_bytes is the encoded transaction bytes."}},"description":"TxEncodeResponse is the response type for the\\nService.TxEncode method."},"cosmos.upgrade.v1beta1.ModuleVersion":{"type":"object","properties":{"name":{"type":"string","title":"name of the app module"},"version":{"type":"string","format":"uint64","title":"consensus version of the app module"}},"description":"ModuleVersion specifies a module and its consensus version."},"cosmos.upgrade.v1beta1.Plan":{"type":"object","properties":{"name":{"type":"string","description":"Sets the name for the upgrade. This name will be used by the upgraded\\nversion of the software to apply any special \\"on-upgrade\\" commands during\\nthe first BeginBlock method after the upgrade is applied. It is also used\\nto detect whether a software version can handle a given upgrade. If no\\nupgrade handler with this name has been set in the software, it will be\\nassumed that the software is out-of-date when the upgrade Time or Height is\\nreached and the software will exit."},"time":{"type":"string","format":"date-time","description":"Deprecated: Time based upgrades have been deprecated. Time based upgrade logic\\nhas been removed from the SDK.\\nIf this field is not empty, an error will be thrown."},"height":{"type":"string","format":"int64","description":"The height at which the upgrade must be performed."},"info":{"type":"string","title":"Any application specific upgrade info to be included on-chain\\nsuch as a git commit that validators could automatically upgrade to"},"upgraded_client_state":{"description":"Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been\\nmoved to the IBC module in the sub module 02-client.\\nIf this field is not empty, an error will be thrown.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}}},"description":"Plan specifies information about a planned upgrade and when it should occur."},"cosmos.upgrade.v1beta1.QueryAppliedPlanResponse":{"type":"object","properties":{"height":{"type":"string","format":"int64","description":"height is the block height at which the plan was applied."}},"description":"QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC\\nmethod."},"cosmos.upgrade.v1beta1.QueryAuthorityResponse":{"type":"object","properties":{"address":{"type":"string"}},"title":"QueryAuthorityResponse is the response type for Query/Authority"},"cosmos.upgrade.v1beta1.QueryCurrentPlanResponse":{"type":"object","properties":{"plan":{"description":"plan is the current upgrade plan.","type":"object","properties":{"name":{"type":"string","description":"Sets the name for the upgrade. This name will be used by the upgraded\\nversion of the software to apply any special \\"on-upgrade\\" commands during\\nthe first BeginBlock method after the upgrade is applied. It is also used\\nto detect whether a software version can handle a given upgrade. If no\\nupgrade handler with this name has been set in the software, it will be\\nassumed that the software is out-of-date when the upgrade Time or Height is\\nreached and the software will exit."},"time":{"type":"string","format":"date-time","description":"Deprecated: Time based upgrades have been deprecated. Time based upgrade logic\\nhas been removed from the SDK.\\nIf this field is not empty, an error will be thrown."},"height":{"type":"string","format":"int64","description":"The height at which the upgrade must be performed."},"info":{"type":"string","title":"Any application specific upgrade info to be included on-chain\\nsuch as a git commit that validators could automatically upgrade to"},"upgraded_client_state":{"description":"Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been\\nmoved to the IBC module in the sub module 02-client.\\nIf this field is not empty, an error will be thrown.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}}}}},"description":"QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC\\nmethod."},"cosmos.upgrade.v1beta1.QueryModuleVersionsResponse":{"type":"object","properties":{"module_versions":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string","title":"name of the app module"},"version":{"type":"string","format":"uint64","title":"consensus version of the app module"}},"description":"ModuleVersion specifies a module and its consensus version."},"description":"module_versions is a list of module names with their consensus versions."}},"description":"QueryModuleVersionsResponse is the response type for the Query/ModuleVersions\\nRPC method."},"cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse":{"type":"object","properties":{"upgraded_consensus_state":{"type":"string","format":"byte"}},"description":"QueryUpgradedConsensusStateResponse is the response type for the Query/UpgradedConsensusState\\nRPC method."},"cosmos.authz.v1beta1.Grant":{"type":"object","properties":{"authorization":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"expiration":{"type":"string","format":"date-time","title":"time when the grant will expire and will be pruned. If null, then the grant\\ndoesn\'t have a time expiration (other conditions  in `authorization`\\nmay apply to invalidate the grant)"}},"description":"Grant gives permissions to execute\\nthe provide method with expiration time."},"cosmos.authz.v1beta1.GrantAuthorization":{"type":"object","properties":{"granter":{"type":"string"},"grantee":{"type":"string"},"authorization":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"expiration":{"type":"string","format":"date-time"}},"title":"GrantAuthorization extends a grant with both the addresses of the grantee and granter.\\nIt is used in genesis.proto and query.proto"},"cosmos.authz.v1beta1.QueryGranteeGrantsResponse":{"type":"object","properties":{"grants":{"type":"array","items":{"type":"object","properties":{"granter":{"type":"string"},"grantee":{"type":"string"},"authorization":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"expiration":{"type":"string","format":"date-time"}},"title":"GrantAuthorization extends a grant with both the addresses of the grantee and granter.\\nIt is used in genesis.proto and query.proto"},"description":"grants is a list of grants granted to the grantee."},"pagination":{"description":"pagination defines an pagination for the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGranteeGrantsResponse is the response type for the Query/GranteeGrants RPC method."},"cosmos.authz.v1beta1.QueryGranterGrantsResponse":{"type":"object","properties":{"grants":{"type":"array","items":{"type":"object","properties":{"granter":{"type":"string"},"grantee":{"type":"string"},"authorization":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"expiration":{"type":"string","format":"date-time"}},"title":"GrantAuthorization extends a grant with both the addresses of the grantee and granter.\\nIt is used in genesis.proto and query.proto"},"description":"grants is a list of grants granted by the granter."},"pagination":{"description":"pagination defines an pagination for the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGranterGrantsResponse is the response type for the Query/GranterGrants RPC method."},"cosmos.authz.v1beta1.QueryGrantsResponse":{"type":"object","properties":{"grants":{"type":"array","items":{"type":"object","properties":{"authorization":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"expiration":{"type":"string","format":"date-time","title":"time when the grant will expire and will be pruned. If null, then the grant\\ndoesn\'t have a time expiration (other conditions  in `authorization`\\nmay apply to invalidate the grant)"}},"description":"Grant gives permissions to execute\\nthe provide method with expiration time."},"description":"authorizations is a list of grants granted for grantee by granter."},"pagination":{"description":"pagination defines an pagination for the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGrantsResponse is the response type for the Query/Authorizations RPC method."},"cosmos.feegrant.v1beta1.Grant":{"type":"object","properties":{"granter":{"type":"string","description":"granter is the address of the user granting an allowance of their funds."},"grantee":{"type":"string","description":"grantee is the address of the user being granted an allowance of another user\'s funds."},"allowance":{"description":"allowance can be any of basic, periodic, allowed fee allowance.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}}},"title":"Grant is stored in the KVStore to record a grant with full context"},"cosmos.feegrant.v1beta1.QueryAllowanceResponse":{"type":"object","properties":{"allowance":{"description":"allowance is a allowance granted for grantee by granter.","type":"object","properties":{"granter":{"type":"string","description":"granter is the address of the user granting an allowance of their funds."},"grantee":{"type":"string","description":"grantee is the address of the user being granted an allowance of another user\'s funds."},"allowance":{"description":"allowance can be any of basic, periodic, allowed fee allowance.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}}},"title":"Grant is stored in the KVStore to record a grant with full context"}},"description":"QueryAllowanceResponse is the response type for the Query/Allowance RPC method."},"cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse":{"type":"object","properties":{"allowances":{"type":"array","items":{"type":"object","properties":{"granter":{"type":"string","description":"granter is the address of the user granting an allowance of their funds."},"grantee":{"type":"string","description":"grantee is the address of the user being granted an allowance of another user\'s funds."},"allowance":{"description":"allowance can be any of basic, periodic, allowed fee allowance.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}}},"title":"Grant is stored in the KVStore to record a grant with full context"},"description":"allowances that have been issued by the granter."},"pagination":{"description":"pagination defines an pagination for the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryAllowancesByGranterResponse is the response type for the Query/AllowancesByGranter RPC method."},"cosmos.feegrant.v1beta1.QueryAllowancesResponse":{"type":"object","properties":{"allowances":{"type":"array","items":{"type":"object","properties":{"granter":{"type":"string","description":"granter is the address of the user granting an allowance of their funds."},"grantee":{"type":"string","description":"grantee is the address of the user being granted an allowance of another user\'s funds."},"allowance":{"description":"allowance can be any of basic, periodic, allowed fee allowance.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}}},"title":"Grant is stored in the KVStore to record a grant with full context"},"description":"allowances are allowance\'s granted for grantee by granter."},"pagination":{"description":"pagination defines an pagination for the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryAllowancesResponse is the response type for the Query/Allowances RPC method."},"cosmos.nft.v1beta1.Class":{"type":"object","properties":{"id":{"type":"string","title":"id defines the unique identifier of the NFT classification, similar to the contract address of ERC721"},"name":{"type":"string","title":"name defines the human-readable name of the NFT classification. Optional"},"symbol":{"type":"string","title":"symbol is an abbreviated name for nft classification. Optional"},"description":{"type":"string","title":"description is a brief description of nft classification. Optional"},"uri":{"type":"string","title":"uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional"},"uri_hash":{"type":"string","title":"uri_hash is a hash of the document pointed by uri. Optional"},"data":{"title":"data is the app specific metadata of the NFT class. Optional","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}},"description":"Class defines the class of the nft type."},"cosmos.nft.v1beta1.NFT":{"type":"object","properties":{"class_id":{"type":"string","title":"class_id associated with the NFT, similar to the contract address of ERC721"},"id":{"type":"string","title":"id is a unique identifier of the NFT"},"uri":{"type":"string","title":"uri for the NFT metadata stored off chain"},"uri_hash":{"type":"string","title":"uri_hash is a hash of the document pointed by uri"},"data":{"title":"data is an app specific data of the NFT. Optional","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}},"description":"NFT defines the NFT."},"cosmos.nft.v1beta1.QueryBalanceByQueryStringResponse":{"type":"object","properties":{"amount":{"type":"string","format":"uint64","title":"amount is the number of all NFTs of a given class owned by the owner"}},"title":"QueryBalanceByQueryStringResponse is the response type for the Query/Balance RPC method"},"cosmos.nft.v1beta1.QueryBalanceResponse":{"type":"object","properties":{"amount":{"type":"string","format":"uint64","title":"amount is the number of all NFTs of a given class owned by the owner"}},"title":"QueryBalanceResponse is the response type for the Query/Balance RPC method"},"cosmos.nft.v1beta1.QueryClassByQueryStringResponse":{"type":"object","properties":{"class":{"description":"class defines the class of the nft type.","type":"object","properties":{"id":{"type":"string","title":"id defines the unique identifier of the NFT classification, similar to the contract address of ERC721"},"name":{"type":"string","title":"name defines the human-readable name of the NFT classification. Optional"},"symbol":{"type":"string","title":"symbol is an abbreviated name for nft classification. Optional"},"description":{"type":"string","title":"description is a brief description of nft classification. Optional"},"uri":{"type":"string","title":"uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional"},"uri_hash":{"type":"string","title":"uri_hash is a hash of the document pointed by uri. Optional"},"data":{"title":"data is the app specific metadata of the NFT class. Optional","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}},"title":"QueryClassByQueryStringResponse is the response type for the Query/Class RPC method"},"cosmos.nft.v1beta1.QueryClassResponse":{"type":"object","properties":{"class":{"description":"class defines the class of the nft type.","type":"object","properties":{"id":{"type":"string","title":"id defines the unique identifier of the NFT classification, similar to the contract address of ERC721"},"name":{"type":"string","title":"name defines the human-readable name of the NFT classification. Optional"},"symbol":{"type":"string","title":"symbol is an abbreviated name for nft classification. Optional"},"description":{"type":"string","title":"description is a brief description of nft classification. Optional"},"uri":{"type":"string","title":"uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional"},"uri_hash":{"type":"string","title":"uri_hash is a hash of the document pointed by uri. Optional"},"data":{"title":"data is the app specific metadata of the NFT class. Optional","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}}}},"title":"QueryClassResponse is the response type for the Query/Class RPC method"},"cosmos.nft.v1beta1.QueryClassesResponse":{"type":"object","properties":{"classes":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","title":"id defines the unique identifier of the NFT classification, similar to the contract address of ERC721"},"name":{"type":"string","title":"name defines the human-readable name of the NFT classification. Optional"},"symbol":{"type":"string","title":"symbol is an abbreviated name for nft classification. Optional"},"description":{"type":"string","title":"description is a brief description of nft classification. Optional"},"uri":{"type":"string","title":"uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional"},"uri_hash":{"type":"string","title":"uri_hash is a hash of the document pointed by uri. Optional"},"data":{"title":"data is the app specific metadata of the NFT class. Optional","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}},"description":"Class defines the class of the nft type."},"description":"class defines the class of the nft type."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"title":"QueryClassesResponse is the response type for the Query/Classes RPC method"},"cosmos.nft.v1beta1.QueryNFTByQueryStringResponse":{"type":"object","properties":{"nft":{"title":"owner is the owner address of the nft","type":"object","properties":{"class_id":{"type":"string","title":"class_id associated with the NFT, similar to the contract address of ERC721"},"id":{"type":"string","title":"id is a unique identifier of the NFT"},"uri":{"type":"string","title":"uri for the NFT metadata stored off chain"},"uri_hash":{"type":"string","title":"uri_hash is a hash of the document pointed by uri"},"data":{"title":"data is an app specific data of the NFT. Optional","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}},"description":"NFT defines the NFT."}},"title":"QueryNFTByQueryStringResponse is the response type for the Query/NFT RPC method"},"cosmos.nft.v1beta1.QueryNFTResponse":{"type":"object","properties":{"nft":{"title":"owner is the owner address of the nft","type":"object","properties":{"class_id":{"type":"string","title":"class_id associated with the NFT, similar to the contract address of ERC721"},"id":{"type":"string","title":"id is a unique identifier of the NFT"},"uri":{"type":"string","title":"uri for the NFT metadata stored off chain"},"uri_hash":{"type":"string","title":"uri_hash is a hash of the document pointed by uri"},"data":{"title":"data is an app specific data of the NFT. Optional","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}},"description":"NFT defines the NFT."}},"title":"QueryNFTResponse is the response type for the Query/NFT RPC method"},"cosmos.nft.v1beta1.QueryNFTsResponse":{"type":"object","properties":{"nfts":{"type":"array","items":{"type":"object","properties":{"class_id":{"type":"string","title":"class_id associated with the NFT, similar to the contract address of ERC721"},"id":{"type":"string","title":"id is a unique identifier of the NFT"},"uri":{"type":"string","title":"uri for the NFT metadata stored off chain"},"uri_hash":{"type":"string","title":"uri_hash is a hash of the document pointed by uri"},"data":{"title":"data is an app specific data of the NFT. Optional","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"}},"description":"NFT defines the NFT."},"title":"NFT defines the NFT"},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"title":"QueryNFTsResponse is the response type for the Query/NFTs RPC methods"},"cosmos.nft.v1beta1.QueryOwnerByQueryStringResponse":{"type":"object","properties":{"owner":{"type":"string","title":"owner is the owner address of the nft"}},"title":"QueryOwnerByQueryStringResponse is the response type for the Query/Owner RPC method"},"cosmos.nft.v1beta1.QueryOwnerResponse":{"type":"object","properties":{"owner":{"type":"string","title":"owner is the owner address of the nft"}},"title":"QueryOwnerResponse is the response type for the Query/Owner RPC method"},"cosmos.nft.v1beta1.QuerySupplyByQueryStringResponse":{"type":"object","properties":{"amount":{"type":"string","format":"uint64","title":"amount is the number of all NFTs from the given class"}},"title":"QuerySupplyByQueryStringResponse is the response type for the Query/Supply RPC method"},"cosmos.nft.v1beta1.QuerySupplyResponse":{"type":"object","properties":{"amount":{"type":"string","format":"uint64","title":"amount is the number of all NFTs from the given class"}},"title":"QuerySupplyResponse is the response type for the Query/Supply RPC method"},"cosmos.group.v1.GroupInfo":{"type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id is the unique ID of the group."},"admin":{"type":"string","description":"admin is the account address of the group\'s admin."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata to attached to the group.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1"},"version":{"type":"string","format":"uint64","title":"version is used to track changes to a group\'s membership structure that\\nwould break existing proposals. Whenever any members weight is changed,\\nor any member is added or removed this version is incremented and will\\ncause proposals based on older versions of this group to fail"},"total_weight":{"type":"string","description":"total_weight is the sum of the group members\' weights."},"created_at":{"type":"string","format":"date-time","description":"created_at is a timestamp specifying when a group was created."}},"description":"GroupInfo represents the high-level on-chain information for a group."},"cosmos.group.v1.GroupMember":{"type":"object","properties":{"group_id":{"type":"string","format":"uint64","description":"group_id is the unique ID of the group."},"member":{"description":"member is the member data.","type":"object","properties":{"address":{"type":"string","description":"address is the member\'s account address."},"weight":{"type":"string","description":"weight is the member\'s voting weight that should be greater than 0."},"metadata":{"type":"string","description":"metadata is any arbitrary metadata attached to the member."},"added_at":{"type":"string","format":"date-time","description":"added_at is a timestamp specifying when a member was added."}}}},"description":"GroupMember represents the relationship between a group and a member."},"cosmos.group.v1.GroupPolicyInfo":{"type":"object","properties":{"address":{"type":"string","description":"address is the account address of group policy."},"group_id":{"type":"string","format":"uint64","description":"group_id is the unique ID of the group."},"admin":{"type":"string","description":"admin is the account address of the group admin."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the group policy.\\nthe recommended format of the metadata is to be found here:\\nhttps://docs.cosmos.network/v0.47/modules/group#decision-policy-1"},"version":{"type":"string","format":"uint64","description":"version is used to track changes to a group\'s GroupPolicyInfo structure that\\nwould create a different result on a running proposal."},"decision_policy":{"description":"decision_policy specifies the group policy\'s decision policy.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"created_at":{"type":"string","format":"date-time","description":"created_at is a timestamp specifying when a group policy was created."}},"description":"GroupPolicyInfo represents the high-level on-chain information for a group policy."},"cosmos.group.v1.Member":{"type":"object","properties":{"address":{"type":"string","description":"address is the member\'s account address."},"weight":{"type":"string","description":"weight is the member\'s voting weight that should be greater than 0."},"metadata":{"type":"string","description":"metadata is any arbitrary metadata attached to the member."},"added_at":{"type":"string","format":"date-time","description":"added_at is a timestamp specifying when a member was added."}},"description":"Member represents a group member with an account address,\\nnon-zero weight, metadata and added_at timestamp."},"cosmos.group.v1.Proposal":{"type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id is the unique id of the proposal."},"group_policy_address":{"type":"string","description":"group_policy_address is the account address of group policy."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the proposal.\\nthe recommended format of the metadata is to be found here:\\nhttps://docs.cosmos.network/v0.47/modules/group#proposal-4"},"proposers":{"type":"array","items":{"type":"string"},"description":"proposers are the account addresses of the proposers."},"submit_time":{"type":"string","format":"date-time","description":"submit_time is a timestamp specifying when a proposal was submitted."},"group_version":{"type":"string","format":"uint64","description":"group_version tracks the version of the group at proposal submission.\\nThis field is here for informational purposes only."},"group_policy_version":{"type":"string","format":"uint64","description":"group_policy_version tracks the version of the group policy at proposal submission.\\nWhen a decision policy is changed, existing proposals from previous policy\\nversions will become invalid with the `ABORTED` status.\\nThis field is here for informational purposes only."},"status":{"description":"status represents the high level position in the life cycle of the proposal. Initial value is Submitted.","type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_SUBMITTED","PROPOSAL_STATUS_ACCEPTED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_ABORTED","PROPOSAL_STATUS_WITHDRAWN"],"default":"PROPOSAL_STATUS_UNSPECIFIED"},"final_tally_result":{"description":"final_tally_result contains the sums of all weighted votes for this\\nproposal for each vote option. It is empty at submission, and only\\npopulated after tallying, at voting period end or at proposal execution,\\nwhichever happens first.","type":"object","properties":{"yes_count":{"type":"string","description":"yes_count is the weighted sum of yes votes."},"abstain_count":{"type":"string","description":"abstain_count is the weighted sum of abstainers."},"no_count":{"type":"string","description":"no_count is the weighted sum of no votes."},"no_with_veto_count":{"type":"string","description":"no_with_veto_count is the weighted sum of veto."}}},"voting_period_end":{"type":"string","format":"date-time","description":"voting_period_end is the timestamp before which voting must be done.\\nUnless a successful MsgExec is called before (to execute a proposal whose\\ntally is successful before the voting period ends), tallying will be done\\nat this point, and the `final_tally_result`and `status` fields will be\\naccordingly updated."},"executor_result":{"description":"executor_result is the final result of the proposal execution. Initial value is NotRun.","type":"string","enum":["PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED","PROPOSAL_EXECUTOR_RESULT_NOT_RUN","PROPOSAL_EXECUTOR_RESULT_SUCCESS","PROPOSAL_EXECUTOR_RESULT_FAILURE"],"default":"PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED"},"messages":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"description":"messages is a list of `sdk.Msg`s that will be executed if the proposal passes."},"title":{"type":"string","title":"title is the title of the proposal"},"summary":{"type":"string","title":"summary is a short summary of the proposal"}},"description":"Proposal defines a group proposal. Any member of a group can submit a proposal\\nfor a group policy to decide upon.\\nA proposal consists of a set of `sdk.Msg`s that will be executed if the proposal\\npasses as well as some optional metadata associated with the proposal."},"cosmos.group.v1.ProposalExecutorResult":{"type":"string","enum":["PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED","PROPOSAL_EXECUTOR_RESULT_NOT_RUN","PROPOSAL_EXECUTOR_RESULT_SUCCESS","PROPOSAL_EXECUTOR_RESULT_FAILURE"],"default":"PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED","description":"ProposalExecutorResult defines types of proposal executor results.\\n\\n - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED: An empty value is not allowed.\\n - PROPOSAL_EXECUTOR_RESULT_NOT_RUN: We have not yet run the executor.\\n - PROPOSAL_EXECUTOR_RESULT_SUCCESS: The executor was successful and proposed action updated state.\\n - PROPOSAL_EXECUTOR_RESULT_FAILURE: The executor returned an error and proposed action didn\'t update state."},"cosmos.group.v1.ProposalStatus":{"type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_SUBMITTED","PROPOSAL_STATUS_ACCEPTED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_ABORTED","PROPOSAL_STATUS_WITHDRAWN"],"default":"PROPOSAL_STATUS_UNSPECIFIED","description":"ProposalStatus defines proposal statuses.\\n\\n - PROPOSAL_STATUS_UNSPECIFIED: An empty value is invalid and not allowed.\\n - PROPOSAL_STATUS_SUBMITTED: Initial status of a proposal when submitted.\\n - PROPOSAL_STATUS_ACCEPTED: Final status of a proposal when the final tally is done and the outcome\\npasses the group policy\'s decision policy.\\n - PROPOSAL_STATUS_REJECTED: Final status of a proposal when the final tally is done and the outcome\\nis rejected by the group policy\'s decision policy.\\n - PROPOSAL_STATUS_ABORTED: Final status of a proposal when the group policy is modified before the\\nfinal tally.\\n - PROPOSAL_STATUS_WITHDRAWN: A proposal can be withdrawn before the voting start time by the owner.\\nWhen this happens the final status is Withdrawn."},"cosmos.group.v1.QueryGroupInfoResponse":{"type":"object","properties":{"info":{"description":"info is the GroupInfo of the group.","type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id is the unique ID of the group."},"admin":{"type":"string","description":"admin is the account address of the group\'s admin."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata to attached to the group.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1"},"version":{"type":"string","format":"uint64","title":"version is used to track changes to a group\'s membership structure that\\nwould break existing proposals. Whenever any members weight is changed,\\nor any member is added or removed this version is incremented and will\\ncause proposals based on older versions of this group to fail"},"total_weight":{"type":"string","description":"total_weight is the sum of the group members\' weights."},"created_at":{"type":"string","format":"date-time","description":"created_at is a timestamp specifying when a group was created."}}}},"description":"QueryGroupInfoResponse is the Query/GroupInfo response type."},"cosmos.group.v1.QueryGroupMembersResponse":{"type":"object","properties":{"members":{"type":"array","items":{"type":"object","properties":{"group_id":{"type":"string","format":"uint64","description":"group_id is the unique ID of the group."},"member":{"description":"member is the member data.","type":"object","properties":{"address":{"type":"string","description":"address is the member\'s account address."},"weight":{"type":"string","description":"weight is the member\'s voting weight that should be greater than 0."},"metadata":{"type":"string","description":"metadata is any arbitrary metadata attached to the member."},"added_at":{"type":"string","format":"date-time","description":"added_at is a timestamp specifying when a member was added."}}}},"description":"GroupMember represents the relationship between a group and a member."},"description":"members are the members of the group with given group_id."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGroupMembersResponse is the Query/GroupMembersResponse response type."},"cosmos.group.v1.QueryGroupPoliciesByAdminResponse":{"type":"object","properties":{"group_policies":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","description":"address is the account address of group policy."},"group_id":{"type":"string","format":"uint64","description":"group_id is the unique ID of the group."},"admin":{"type":"string","description":"admin is the account address of the group admin."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the group policy.\\nthe recommended format of the metadata is to be found here:\\nhttps://docs.cosmos.network/v0.47/modules/group#decision-policy-1"},"version":{"type":"string","format":"uint64","description":"version is used to track changes to a group\'s GroupPolicyInfo structure that\\nwould create a different result on a running proposal."},"decision_policy":{"description":"decision_policy specifies the group policy\'s decision policy.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"created_at":{"type":"string","format":"date-time","description":"created_at is a timestamp specifying when a group policy was created."}},"description":"GroupPolicyInfo represents the high-level on-chain information for a group policy."},"description":"group_policies are the group policies info with provided admin."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGroupPoliciesByAdminResponse is the Query/GroupPoliciesByAdmin response type."},"cosmos.group.v1.QueryGroupPoliciesByGroupResponse":{"type":"object","properties":{"group_policies":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string","description":"address is the account address of group policy."},"group_id":{"type":"string","format":"uint64","description":"group_id is the unique ID of the group."},"admin":{"type":"string","description":"admin is the account address of the group admin."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the group policy.\\nthe recommended format of the metadata is to be found here:\\nhttps://docs.cosmos.network/v0.47/modules/group#decision-policy-1"},"version":{"type":"string","format":"uint64","description":"version is used to track changes to a group\'s GroupPolicyInfo structure that\\nwould create a different result on a running proposal."},"decision_policy":{"description":"decision_policy specifies the group policy\'s decision policy.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"created_at":{"type":"string","format":"date-time","description":"created_at is a timestamp specifying when a group policy was created."}},"description":"GroupPolicyInfo represents the high-level on-chain information for a group policy."},"description":"group_policies are the group policies info associated with the provided group."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGroupPoliciesByGroupResponse is the Query/GroupPoliciesByGroup response type."},"cosmos.group.v1.QueryGroupPolicyInfoResponse":{"type":"object","properties":{"info":{"description":"info is the GroupPolicyInfo of the group policy.","type":"object","properties":{"address":{"type":"string","description":"address is the account address of group policy."},"group_id":{"type":"string","format":"uint64","description":"group_id is the unique ID of the group."},"admin":{"type":"string","description":"admin is the account address of the group admin."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the group policy.\\nthe recommended format of the metadata is to be found here:\\nhttps://docs.cosmos.network/v0.47/modules/group#decision-policy-1"},"version":{"type":"string","format":"uint64","description":"version is used to track changes to a group\'s GroupPolicyInfo structure that\\nwould create a different result on a running proposal."},"decision_policy":{"description":"decision_policy specifies the group policy\'s decision policy.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"created_at":{"type":"string","format":"date-time","description":"created_at is a timestamp specifying when a group policy was created."}}}},"description":"QueryGroupPolicyInfoResponse is the Query/GroupPolicyInfo response type."},"cosmos.group.v1.QueryGroupsByAdminResponse":{"type":"object","properties":{"groups":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id is the unique ID of the group."},"admin":{"type":"string","description":"admin is the account address of the group\'s admin."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata to attached to the group.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1"},"version":{"type":"string","format":"uint64","title":"version is used to track changes to a group\'s membership structure that\\nwould break existing proposals. Whenever any members weight is changed,\\nor any member is added or removed this version is incremented and will\\ncause proposals based on older versions of this group to fail"},"total_weight":{"type":"string","description":"total_weight is the sum of the group members\' weights."},"created_at":{"type":"string","format":"date-time","description":"created_at is a timestamp specifying when a group was created."}},"description":"GroupInfo represents the high-level on-chain information for a group."},"description":"groups are the groups info with the provided admin."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGroupsByAdminResponse is the Query/GroupsByAdminResponse response type."},"cosmos.group.v1.QueryGroupsByMemberResponse":{"type":"object","properties":{"groups":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id is the unique ID of the group."},"admin":{"type":"string","description":"admin is the account address of the group\'s admin."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata to attached to the group.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1"},"version":{"type":"string","format":"uint64","title":"version is used to track changes to a group\'s membership structure that\\nwould break existing proposals. Whenever any members weight is changed,\\nor any member is added or removed this version is incremented and will\\ncause proposals based on older versions of this group to fail"},"total_weight":{"type":"string","description":"total_weight is the sum of the group members\' weights."},"created_at":{"type":"string","format":"date-time","description":"created_at is a timestamp specifying when a group was created."}},"description":"GroupInfo represents the high-level on-chain information for a group."},"description":"groups are the groups info with the provided group member."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGroupsByMemberResponse is the Query/GroupsByMember response type."},"cosmos.group.v1.QueryGroupsResponse":{"type":"object","properties":{"groups":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id is the unique ID of the group."},"admin":{"type":"string","description":"admin is the account address of the group\'s admin."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata to attached to the group.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1"},"version":{"type":"string","format":"uint64","title":"version is used to track changes to a group\'s membership structure that\\nwould break existing proposals. Whenever any members weight is changed,\\nor any member is added or removed this version is incremented and will\\ncause proposals based on older versions of this group to fail"},"total_weight":{"type":"string","description":"total_weight is the sum of the group members\' weights."},"created_at":{"type":"string","format":"date-time","description":"created_at is a timestamp specifying when a group was created."}},"description":"GroupInfo represents the high-level on-chain information for a group."},"description":"`groups` is all the groups present in state."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryGroupsResponse is the Query/Groups response type."},"cosmos.group.v1.QueryProposalResponse":{"type":"object","properties":{"proposal":{"description":"proposal is the proposal info.","type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id is the unique id of the proposal."},"group_policy_address":{"type":"string","description":"group_policy_address is the account address of group policy."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the proposal.\\nthe recommended format of the metadata is to be found here:\\nhttps://docs.cosmos.network/v0.47/modules/group#proposal-4"},"proposers":{"type":"array","items":{"type":"string"},"description":"proposers are the account addresses of the proposers."},"submit_time":{"type":"string","format":"date-time","description":"submit_time is a timestamp specifying when a proposal was submitted."},"group_version":{"type":"string","format":"uint64","description":"group_version tracks the version of the group at proposal submission.\\nThis field is here for informational purposes only."},"group_policy_version":{"type":"string","format":"uint64","description":"group_policy_version tracks the version of the group policy at proposal submission.\\nWhen a decision policy is changed, existing proposals from previous policy\\nversions will become invalid with the `ABORTED` status.\\nThis field is here for informational purposes only."},"status":{"description":"status represents the high level position in the life cycle of the proposal. Initial value is Submitted.","type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_SUBMITTED","PROPOSAL_STATUS_ACCEPTED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_ABORTED","PROPOSAL_STATUS_WITHDRAWN"],"default":"PROPOSAL_STATUS_UNSPECIFIED"},"final_tally_result":{"description":"final_tally_result contains the sums of all weighted votes for this\\nproposal for each vote option. It is empty at submission, and only\\npopulated after tallying, at voting period end or at proposal execution,\\nwhichever happens first.","type":"object","properties":{"yes_count":{"type":"string","description":"yes_count is the weighted sum of yes votes."},"abstain_count":{"type":"string","description":"abstain_count is the weighted sum of abstainers."},"no_count":{"type":"string","description":"no_count is the weighted sum of no votes."},"no_with_veto_count":{"type":"string","description":"no_with_veto_count is the weighted sum of veto."}}},"voting_period_end":{"type":"string","format":"date-time","description":"voting_period_end is the timestamp before which voting must be done.\\nUnless a successful MsgExec is called before (to execute a proposal whose\\ntally is successful before the voting period ends), tallying will be done\\nat this point, and the `final_tally_result`and `status` fields will be\\naccordingly updated."},"executor_result":{"description":"executor_result is the final result of the proposal execution. Initial value is NotRun.","type":"string","enum":["PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED","PROPOSAL_EXECUTOR_RESULT_NOT_RUN","PROPOSAL_EXECUTOR_RESULT_SUCCESS","PROPOSAL_EXECUTOR_RESULT_FAILURE"],"default":"PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED"},"messages":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"description":"messages is a list of `sdk.Msg`s that will be executed if the proposal passes."},"title":{"type":"string","title":"title is the title of the proposal"},"summary":{"type":"string","title":"summary is a short summary of the proposal"}}}},"description":"QueryProposalResponse is the Query/Proposal response type."},"cosmos.group.v1.QueryProposalsByGroupPolicyResponse":{"type":"object","properties":{"proposals":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","format":"uint64","description":"id is the unique id of the proposal."},"group_policy_address":{"type":"string","description":"group_policy_address is the account address of group policy."},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the proposal.\\nthe recommended format of the metadata is to be found here:\\nhttps://docs.cosmos.network/v0.47/modules/group#proposal-4"},"proposers":{"type":"array","items":{"type":"string"},"description":"proposers are the account addresses of the proposers."},"submit_time":{"type":"string","format":"date-time","description":"submit_time is a timestamp specifying when a proposal was submitted."},"group_version":{"type":"string","format":"uint64","description":"group_version tracks the version of the group at proposal submission.\\nThis field is here for informational purposes only."},"group_policy_version":{"type":"string","format":"uint64","description":"group_policy_version tracks the version of the group policy at proposal submission.\\nWhen a decision policy is changed, existing proposals from previous policy\\nversions will become invalid with the `ABORTED` status.\\nThis field is here for informational purposes only."},"status":{"description":"status represents the high level position in the life cycle of the proposal. Initial value is Submitted.","type":"string","enum":["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_SUBMITTED","PROPOSAL_STATUS_ACCEPTED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_ABORTED","PROPOSAL_STATUS_WITHDRAWN"],"default":"PROPOSAL_STATUS_UNSPECIFIED"},"final_tally_result":{"description":"final_tally_result contains the sums of all weighted votes for this\\nproposal for each vote option. It is empty at submission, and only\\npopulated after tallying, at voting period end or at proposal execution,\\nwhichever happens first.","type":"object","properties":{"yes_count":{"type":"string","description":"yes_count is the weighted sum of yes votes."},"abstain_count":{"type":"string","description":"abstain_count is the weighted sum of abstainers."},"no_count":{"type":"string","description":"no_count is the weighted sum of no votes."},"no_with_veto_count":{"type":"string","description":"no_with_veto_count is the weighted sum of veto."}}},"voting_period_end":{"type":"string","format":"date-time","description":"voting_period_end is the timestamp before which voting must be done.\\nUnless a successful MsgExec is called before (to execute a proposal whose\\ntally is successful before the voting period ends), tallying will be done\\nat this point, and the `final_tally_result`and `status` fields will be\\naccordingly updated."},"executor_result":{"description":"executor_result is the final result of the proposal execution. Initial value is NotRun.","type":"string","enum":["PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED","PROPOSAL_EXECUTOR_RESULT_NOT_RUN","PROPOSAL_EXECUTOR_RESULT_SUCCESS","PROPOSAL_EXECUTOR_RESULT_FAILURE"],"default":"PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED"},"messages":{"type":"array","items":{"type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{},"description":"`Any` contains an arbitrary serialized protocol buffer message along with a\\nURL that describes the type of the serialized message.\\n\\nProtobuf library provides support to pack/unpack Any values in the form\\nof utility functions or additional generated methods of the Any type.\\n\\nExample 1: Pack and unpack a message in C++.\\n\\n    Foo foo = ...;\\n    Any any;\\n    any.PackFrom(foo);\\n    ...\\n    if (any.UnpackTo(&foo)) {\\n      ...\\n    }\\n\\nExample 2: Pack and unpack a message in Java.\\n\\n    Foo foo = ...;\\n    Any any = Any.pack(foo);\\n    ...\\n    if (any.is(Foo.class)) {\\n      foo = any.unpack(Foo.class);\\n    }\\n    // or ...\\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\\n      foo = any.unpack(Foo.getDefaultInstance());\\n    }\\n\\n Example 3: Pack and unpack a message in Python.\\n\\n    foo = Foo(...)\\n    any = Any()\\n    any.Pack(foo)\\n    ...\\n    if any.Is(Foo.DESCRIPTOR):\\n      any.Unpack(foo)\\n      ...\\n\\n Example 4: Pack and unpack a message in Go\\n\\n     foo := &pb.Foo{...}\\n     any, err := anypb.New(foo)\\n     if err != nil {\\n       ...\\n     }\\n     ...\\n     foo := &pb.Foo{}\\n     if err := any.UnmarshalTo(foo); err != nil {\\n       ...\\n     }\\n\\nThe pack methods provided by protobuf library will by default use\\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\\nmethods only use the fully qualified type name after the last \'/\'\\nin the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type\\nname \\"y.z\\".\\n\\nJSON\\n====\\nThe JSON representation of an `Any` value uses the regular\\nrepresentation of the deserialized, embedded message, with an\\nadditional field `@type` which contains the type URL. Example:\\n\\n    package google.profile;\\n    message Person {\\n      string first_name = 1;\\n      string last_name = 2;\\n    }\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.profile.Person\\",\\n      \\"firstName\\": <string>,\\n      \\"lastName\\": <string>\\n    }\\n\\nIf the embedded message type is well-known and has a custom JSON\\nrepresentation, that representation will be embedded adding a field\\n`value` which holds the custom JSON in addition to the `@type`\\nfield. Example (for message [google.protobuf.Duration][]):\\n\\n    {\\n      \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\",\\n      \\"value\\": \\"1.212s\\"\\n    }"},"description":"messages is a list of `sdk.Msg`s that will be executed if the proposal passes."},"title":{"type":"string","title":"title is the title of the proposal"},"summary":{"type":"string","title":"summary is a short summary of the proposal"}},"description":"Proposal defines a group proposal. Any member of a group can submit a proposal\\nfor a group policy to decide upon.\\nA proposal consists of a set of `sdk.Msg`s that will be executed if the proposal\\npasses as well as some optional metadata associated with the proposal."},"description":"proposals are the proposals with given group policy."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryProposalsByGroupPolicyResponse is the Query/ProposalByGroupPolicy response type."},"cosmos.group.v1.QueryTallyResultResponse":{"type":"object","properties":{"tally":{"description":"tally defines the requested tally.","type":"object","properties":{"yes_count":{"type":"string","description":"yes_count is the weighted sum of yes votes."},"abstain_count":{"type":"string","description":"abstain_count is the weighted sum of abstainers."},"no_count":{"type":"string","description":"no_count is the weighted sum of no votes."},"no_with_veto_count":{"type":"string","description":"no_with_veto_count is the weighted sum of veto."}}}},"description":"QueryTallyResultResponse is the Query/TallyResult response type."},"cosmos.group.v1.QueryVoteByProposalVoterResponse":{"type":"object","properties":{"vote":{"description":"vote is the vote with given proposal_id and voter.","type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal is the unique ID of the proposal."},"voter":{"type":"string","description":"voter is the account address of the voter."},"option":{"description":"option is the voter\'s choice on the proposal.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the vote.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2"},"submit_time":{"type":"string","format":"date-time","description":"submit_time is the timestamp when the vote was submitted."}},"title":"Vote represents a vote for a proposal.string metadata"}},"description":"QueryVoteByProposalVoterResponse is the Query/VoteByProposalVoter response type."},"cosmos.group.v1.QueryVotesByProposalResponse":{"type":"object","properties":{"votes":{"type":"array","items":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal is the unique ID of the proposal."},"voter":{"type":"string","description":"voter is the account address of the voter."},"option":{"description":"option is the voter\'s choice on the proposal.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the vote.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2"},"submit_time":{"type":"string","format":"date-time","description":"submit_time is the timestamp when the vote was submitted."}},"title":"Vote represents a vote for a proposal.string metadata"},"description":"votes are the list of votes for given proposal_id."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryVotesByProposalResponse is the Query/VotesByProposal response type."},"cosmos.group.v1.QueryVotesByVoterResponse":{"type":"object","properties":{"votes":{"type":"array","items":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal is the unique ID of the proposal."},"voter":{"type":"string","description":"voter is the account address of the voter."},"option":{"description":"option is the voter\'s choice on the proposal.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the vote.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2"},"submit_time":{"type":"string","format":"date-time","description":"submit_time is the timestamp when the vote was submitted."}},"title":"Vote represents a vote for a proposal.string metadata"},"description":"votes are the list of votes by given voter."},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"QueryVotesByVoterResponse is the Query/VotesByVoter response type."},"cosmos.group.v1.TallyResult":{"type":"object","properties":{"yes_count":{"type":"string","description":"yes_count is the weighted sum of yes votes."},"abstain_count":{"type":"string","description":"abstain_count is the weighted sum of abstainers."},"no_count":{"type":"string","description":"no_count is the weighted sum of no votes."},"no_with_veto_count":{"type":"string","description":"no_with_veto_count is the weighted sum of veto."}},"description":"TallyResult represents the sum of weighted votes for each vote option."},"cosmos.group.v1.Vote":{"type":"object","properties":{"proposal_id":{"type":"string","format":"uint64","description":"proposal is the unique ID of the proposal."},"voter":{"type":"string","description":"voter is the account address of the voter."},"option":{"description":"option is the voter\'s choice on the proposal.","type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED"},"metadata":{"type":"string","title":"metadata is any arbitrary metadata attached to the vote.\\nthe recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2"},"submit_time":{"type":"string","format":"date-time","description":"submit_time is the timestamp when the vote was submitted."}},"title":"Vote represents a vote for a proposal.string metadata"},"cosmos.group.v1.VoteOption":{"type":"string","enum":["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"],"default":"VOTE_OPTION_UNSPECIFIED","description":"VoteOption enumerates the valid vote options for a given proposal.\\n\\n - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines an unspecified vote option which will\\nreturn an error.\\n - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.\\n - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.\\n - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.\\n - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option."},"cosmos.circuit.v1.AccountResponse":{"type":"object","properties":{"permission":{"type":"object","properties":{"level":{"description":"level is the level of permissions granted to this account.","type":"string","enum":["LEVEL_NONE_UNSPECIFIED","LEVEL_SOME_MSGS","LEVEL_ALL_MSGS","LEVEL_SUPER_ADMIN"],"default":"LEVEL_NONE_UNSPECIFIED"},"limit_type_urls":{"type":"array","items":{"type":"string"},"description":"limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg type\\nURLs that the account can trip. It is an error to use limit_type_urls with\\na level other than LEVEL_SOME_MSGS."}},"description":"Permissions are the permissions that an account has to trip\\nor reset the circuit breaker."}},"description":"AccountResponse is the response type for the Query/Account RPC method."},"cosmos.circuit.v1.AccountsResponse":{"type":"object","properties":{"accounts":{"type":"array","items":{"type":"object","properties":{"address":{"type":"string"},"permissions":{"type":"object","properties":{"level":{"description":"level is the level of permissions granted to this account.","type":"string","enum":["LEVEL_NONE_UNSPECIFIED","LEVEL_SOME_MSGS","LEVEL_ALL_MSGS","LEVEL_SUPER_ADMIN"],"default":"LEVEL_NONE_UNSPECIFIED"},"limit_type_urls":{"type":"array","items":{"type":"string"},"description":"limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg type\\nURLs that the account can trip. It is an error to use limit_type_urls with\\na level other than LEVEL_SOME_MSGS."}},"description":"Permissions are the permissions that an account has to trip\\nor reset the circuit breaker."}},"title":"GenesisAccountPermissions is the account permissions for the circuit breaker in genesis"}},"pagination":{"description":"pagination defines the pagination in the response.","type":"object","properties":{"next_key":{"type":"string","format":"byte","description":"next_key is the key to be passed to PageRequest.key to\\nquery the next page most efficiently. It will be empty if\\nthere are no more results."},"total":{"type":"string","format":"uint64","title":"total is total number of results available if PageRequest.count_total\\nwas set, its value is undefined otherwise"}}}},"description":"AccountsResponse is the response type for the Query/Accounts RPC method."},"cosmos.circuit.v1.DisabledListResponse":{"type":"object","properties":{"disabled_list":{"type":"array","items":{"type":"string"}}},"description":"DisabledListResponse is the response type for the Query/DisabledList RPC method."},"cosmos.circuit.v1.GenesisAccountPermissions":{"type":"object","properties":{"address":{"type":"string"},"permissions":{"type":"object","properties":{"level":{"description":"level is the level of permissions granted to this account.","type":"string","enum":["LEVEL_NONE_UNSPECIFIED","LEVEL_SOME_MSGS","LEVEL_ALL_MSGS","LEVEL_SUPER_ADMIN"],"default":"LEVEL_NONE_UNSPECIFIED"},"limit_type_urls":{"type":"array","items":{"type":"string"},"description":"limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg type\\nURLs that the account can trip. It is an error to use limit_type_urls with\\na level other than LEVEL_SOME_MSGS."}},"description":"Permissions are the permissions that an account has to trip\\nor reset the circuit breaker."}},"title":"GenesisAccountPermissions is the account permissions for the circuit breaker in genesis"},"cosmos.circuit.v1.Permissions":{"type":"object","properties":{"level":{"description":"level is the level of permissions granted to this account.","type":"string","enum":["LEVEL_NONE_UNSPECIFIED","LEVEL_SOME_MSGS","LEVEL_ALL_MSGS","LEVEL_SUPER_ADMIN"],"default":"LEVEL_NONE_UNSPECIFIED"},"limit_type_urls":{"type":"array","items":{"type":"string"},"description":"limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg type\\nURLs that the account can trip. It is an error to use limit_type_urls with\\na level other than LEVEL_SOME_MSGS."}},"description":"Permissions are the permissions that an account has to trip\\nor reset the circuit breaker."},"cosmos.circuit.v1.Permissions.Level":{"type":"string","enum":["LEVEL_NONE_UNSPECIFIED","LEVEL_SOME_MSGS","LEVEL_ALL_MSGS","LEVEL_SUPER_ADMIN"],"default":"LEVEL_NONE_UNSPECIFIED","description":"Level is the permission level.\\n\\n - LEVEL_NONE_UNSPECIFIED: LEVEL_NONE_UNSPECIFIED indicates that the account will have no circuit\\nbreaker permissions.\\n - LEVEL_SOME_MSGS: LEVEL_SOME_MSGS indicates that the account will have permission to\\ntrip or reset the circuit breaker for some Msg type URLs. If this level\\nis chosen, a non-empty list of Msg type URLs must be provided in\\nlimit_type_urls.\\n - LEVEL_ALL_MSGS: LEVEL_ALL_MSGS indicates that the account can trip or reset the circuit\\nbreaker for Msg\'s of all type URLs.\\n - LEVEL_SUPER_ADMIN: LEVEL_SUPER_ADMIN indicates that the account can take all circuit breaker\\nactions and can grant permissions to other accounts."},"cometbft.types.v1.ABCIParams":{"type":"object","properties":{"vote_extensions_enable_height":{"type":"string","format":"int64","description":"vote_extensions_enable_height has been deprecated.\\nInstead, use FeatureParams.vote_extensions_enable_height."}},"title":"ABCIParams is deprecated and its contents moved to FeatureParams"},"cometbft.types.v1.BlockParams":{"type":"object","properties":{"max_bytes":{"type":"string","format":"int64","description":"Maximum size of a block, in bytes.\\n\\nMust be greater or equal to -1 and cannot be greater than the hard-coded\\nmaximum block size, which is 100MB.\\n\\nIf set to -1, the limit is the hard-coded maximum block size."},"max_gas":{"type":"string","format":"int64","description":"Maximum gas wanted by transactions included in a block.\\n\\nMust be greater or equal to -1. If set to -1, no limit is enforced."}},"description":"BlockParams define limits on the block size and gas."},"cometbft.types.v1.ConsensusParams":{"type":"object","properties":{"block":{"type":"object","properties":{"max_bytes":{"type":"string","format":"int64","description":"Maximum size of a block, in bytes.\\n\\nMust be greater or equal to -1 and cannot be greater than the hard-coded\\nmaximum block size, which is 100MB.\\n\\nIf set to -1, the limit is the hard-coded maximum block size."},"max_gas":{"type":"string","format":"int64","description":"Maximum gas wanted by transactions included in a block.\\n\\nMust be greater or equal to -1. If set to -1, no limit is enforced."}},"description":"BlockParams define limits on the block size and gas."},"evidence":{"type":"object","properties":{"max_age_num_blocks":{"type":"string","format":"int64","description":"Maximum age of evidence, in blocks.\\n\\nThe recommended formula for calculating it is max_age_duration / {average\\nblock time}."},"max_age_duration":{"type":"string","description":"Maximum age of evidence, in time.\\n\\nThe recommended value of is should correspond to the application\'s\\n\\"unbonding period\\" or other similar mechanism for handling\\nNothing-At-Stake attacks.\\nSee: https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed."},"max_bytes":{"type":"string","format":"int64","description":"Maximum size in bytes of evidence allowed to be included in a block.\\n\\nIt should fall comfortably under the maximum size of a block."}},"description":"EvidenceParams determine the validity of evidences of Byzantine behavior."},"validator":{"type":"object","properties":{"pub_key_types":{"type":"array","items":{"type":"string"}}},"description":"ValidatorParams restrict the public key types validators can use.\\n\\nNOTE: uses ABCI public keys naming, not Amino names."},"version":{"type":"object","properties":{"app":{"type":"string","format":"uint64","description":"The ABCI application version.\\n\\nIt was named app_version in CometBFT 0.34."}},"description":"VersionParams contain the version of specific components of CometBFT."},"abci":{"title":"Use FeatureParams.vote_extensions_enable_height instead","type":"object","properties":{"vote_extensions_enable_height":{"type":"string","format":"int64","description":"vote_extensions_enable_height has been deprecated.\\nInstead, use FeatureParams.vote_extensions_enable_height."}}},"synchrony":{"type":"object","properties":{"precision":{"type":"string","description":"Bound for how skewed a proposer\'s clock may be from any validator on the\\nnetwork while still producing valid proposals."},"message_delay":{"type":"string","description":"Bound for how long a proposal message may take to reach all validators on\\na network and still be considered valid."}},"description":"SynchronyParams determine the validity of block timestamps.\\n\\nThese parameters are part of the Proposer-Based Timestamps (PBTS) algorithm.\\nFor more information on the relationship of the synchrony parameters to\\nblock timestamps validity, refer to the PBTS specification:\\nhttps://github.com/tendermint/spec/blob/master/spec/consensus/proposer-based-timestamp/README.md"},"feature":{"type":"object","properties":{"vote_extensions_enable_height":{"type":"string","format":"int64","description":"First height during which vote extensions will be enabled.\\n\\nDuring the specified height, and for all subsequent heights, precommit\\nmessages that do not contain valid extension data will be considered\\ninvalid. Prior to this height, or when this height is set to 0, vote\\nextensions will not be used or accepted by validators on the network.\\n\\nOnce enabled, vote extensions will be created by the application in\\nExtendVote, validated by the application in VerifyVoteExtension, and\\nused by the application in PrepareProposal, when proposing the next block.\\n\\nCannot be set to heights lower or equal to the current blockchain height."},"pbts_enable_height":{"type":"string","format":"int64","description":"Height at which Proposer-Based Timestamps (PBTS) will be enabled.\\n\\nFrom the specified height, and for all subsequent heights, the PBTS\\nalgorithm will be used to produce and validate block timestamps. Prior to\\nthis height, or when this height is set to 0, the legacy BFT Time\\nalgorithm is used to produce and validate timestamps.\\n\\nCannot be set to heights lower or equal to the current blockchain height."}},"description":"FeatureParams configure the height from which features of CometBFT are enabled."}},"description":"ConsensusParams contains consensus critical parameters that determine the\\nvalidity of blocks."},"cometbft.types.v1.EvidenceParams":{"type":"object","properties":{"max_age_num_blocks":{"type":"string","format":"int64","description":"Maximum age of evidence, in blocks.\\n\\nThe recommended formula for calculating it is max_age_duration / {average\\nblock time}."},"max_age_duration":{"type":"string","description":"Maximum age of evidence, in time.\\n\\nThe recommended value of is should correspond to the application\'s\\n\\"unbonding period\\" or other similar mechanism for handling\\nNothing-At-Stake attacks.\\nSee: https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed."},"max_bytes":{"type":"string","format":"int64","description":"Maximum size in bytes of evidence allowed to be included in a block.\\n\\nIt should fall comfortably under the maximum size of a block."}},"description":"EvidenceParams determine the validity of evidences of Byzantine behavior."},"cometbft.types.v1.FeatureParams":{"type":"object","properties":{"vote_extensions_enable_height":{"type":"string","format":"int64","description":"First height during which vote extensions will be enabled.\\n\\nDuring the specified height, and for all subsequent heights, precommit\\nmessages that do not contain valid extension data will be considered\\ninvalid. Prior to this height, or when this height is set to 0, vote\\nextensions will not be used or accepted by validators on the network.\\n\\nOnce enabled, vote extensions will be created by the application in\\nExtendVote, validated by the application in VerifyVoteExtension, and\\nused by the application in PrepareProposal, when proposing the next block.\\n\\nCannot be set to heights lower or equal to the current blockchain height."},"pbts_enable_height":{"type":"string","format":"int64","description":"Height at which Proposer-Based Timestamps (PBTS) will be enabled.\\n\\nFrom the specified height, and for all subsequent heights, the PBTS\\nalgorithm will be used to produce and validate block timestamps. Prior to\\nthis height, or when this height is set to 0, the legacy BFT Time\\nalgorithm is used to produce and validate timestamps.\\n\\nCannot be set to heights lower or equal to the current blockchain height."}},"description":"FeatureParams configure the height from which features of CometBFT are enabled."},"cometbft.types.v1.SynchronyParams":{"type":"object","properties":{"precision":{"type":"string","description":"Bound for how skewed a proposer\'s clock may be from any validator on the\\nnetwork while still producing valid proposals."},"message_delay":{"type":"string","description":"Bound for how long a proposal message may take to reach all validators on\\na network and still be considered valid."}},"description":"SynchronyParams determine the validity of block timestamps.\\n\\nThese parameters are part of the Proposer-Based Timestamps (PBTS) algorithm.\\nFor more information on the relationship of the synchrony parameters to\\nblock timestamps validity, refer to the PBTS specification:\\nhttps://github.com/tendermint/spec/blob/master/spec/consensus/proposer-based-timestamp/README.md"},"cometbft.types.v1.ValidatorParams":{"type":"object","properties":{"pub_key_types":{"type":"array","items":{"type":"string"}}},"description":"ValidatorParams restrict the public key types validators can use.\\n\\nNOTE: uses ABCI public keys naming, not Amino names."},"cometbft.types.v1.VersionParams":{"type":"object","properties":{"app":{"type":"string","format":"uint64","description":"The ABCI application version.\\n\\nIt was named app_version in CometBFT 0.34."}},"description":"VersionParams contain the version of specific components of CometBFT."},"cosmos.consensus.v1.QueryParamsResponse":{"type":"object","properties":{"params":{"description":"params are the tendermint consensus params stored in the consensus module.\\nPlease note that `params.version` is not populated in this response, it is\\ntracked separately in the x/upgrade module.","type":"object","properties":{"block":{"type":"object","properties":{"max_bytes":{"type":"string","format":"int64","description":"Maximum size of a block, in bytes.\\n\\nMust be greater or equal to -1 and cannot be greater than the hard-coded\\nmaximum block size, which is 100MB.\\n\\nIf set to -1, the limit is the hard-coded maximum block size."},"max_gas":{"type":"string","format":"int64","description":"Maximum gas wanted by transactions included in a block.\\n\\nMust be greater or equal to -1. If set to -1, no limit is enforced."}},"description":"BlockParams define limits on the block size and gas."},"evidence":{"type":"object","properties":{"max_age_num_blocks":{"type":"string","format":"int64","description":"Maximum age of evidence, in blocks.\\n\\nThe recommended formula for calculating it is max_age_duration / {average\\nblock time}."},"max_age_duration":{"type":"string","description":"Maximum age of evidence, in time.\\n\\nThe recommended value of is should correspond to the application\'s\\n\\"unbonding period\\" or other similar mechanism for handling\\nNothing-At-Stake attacks.\\nSee: https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed."},"max_bytes":{"type":"string","format":"int64","description":"Maximum size in bytes of evidence allowed to be included in a block.\\n\\nIt should fall comfortably under the maximum size of a block."}},"description":"EvidenceParams determine the validity of evidences of Byzantine behavior."},"validator":{"type":"object","properties":{"pub_key_types":{"type":"array","items":{"type":"string"}}},"description":"ValidatorParams restrict the public key types validators can use.\\n\\nNOTE: uses ABCI public keys naming, not Amino names."},"version":{"type":"object","properties":{"app":{"type":"string","format":"uint64","description":"The ABCI application version.\\n\\nIt was named app_version in CometBFT 0.34."}},"description":"VersionParams contain the version of specific components of CometBFT."},"abci":{"title":"Use FeatureParams.vote_extensions_enable_height instead","type":"object","properties":{"vote_extensions_enable_height":{"type":"string","format":"int64","description":"vote_extensions_enable_height has been deprecated.\\nInstead, use FeatureParams.vote_extensions_enable_height."}}},"synchrony":{"type":"object","properties":{"precision":{"type":"string","description":"Bound for how skewed a proposer\'s clock may be from any validator on the\\nnetwork while still producing valid proposals."},"message_delay":{"type":"string","description":"Bound for how long a proposal message may take to reach all validators on\\na network and still be considered valid."}},"description":"SynchronyParams determine the validity of block timestamps.\\n\\nThese parameters are part of the Proposer-Based Timestamps (PBTS) algorithm.\\nFor more information on the relationship of the synchrony parameters to\\nblock timestamps validity, refer to the PBTS specification:\\nhttps://github.com/tendermint/spec/blob/master/spec/consensus/proposer-based-timestamp/README.md"},"feature":{"type":"object","properties":{"vote_extensions_enable_height":{"type":"string","format":"int64","description":"First height during which vote extensions will be enabled.\\n\\nDuring the specified height, and for all subsequent heights, precommit\\nmessages that do not contain valid extension data will be considered\\ninvalid. Prior to this height, or when this height is set to 0, vote\\nextensions will not be used or accepted by validators on the network.\\n\\nOnce enabled, vote extensions will be created by the application in\\nExtendVote, validated by the application in VerifyVoteExtension, and\\nused by the application in PrepareProposal, when proposing the next block.\\n\\nCannot be set to heights lower or equal to the current blockchain height."},"pbts_enable_height":{"type":"string","format":"int64","description":"Height at which Proposer-Based Timestamps (PBTS) will be enabled.\\n\\nFrom the specified height, and for all subsequent heights, the PBTS\\nalgorithm will be used to produce and validate block timestamps. Prior to\\nthis height, or when this height is set to 0, the legacy BFT Time\\nalgorithm is used to produce and validate timestamps.\\n\\nCannot be set to heights lower or equal to the current blockchain height."}},"description":"FeatureParams configure the height from which features of CometBFT are enabled."}}}},"description":"QueryParamsResponse defines the response type for querying x/consensus parameters."},"cosmos.app.v1alpha1.Config":{"type":"object","properties":{"modules":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string","description":"name is the unique name of the module within the app. It should be a name\\nthat persists between different versions of a module so that modules\\ncan be smoothly upgraded to new versions.\\n\\nFor example, for the module cosmos.bank.module.v1.Module, we may chose\\nto simply name the module \\"bank\\" in the app. When we upgrade to\\ncosmos.bank.module.v2.Module, the app-specific name \\"bank\\" stays the same\\nand the framework knows that the v2 module should receive all the same state\\nthat the v1 module had. Note: modules should provide info on which versions\\nthey can migrate from in the ModuleDescriptor.can_migration_from field."},"config":{"description":"config is the config object for the module. Module config messages should\\ndefine a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"golang_bindings":{"type":"array","items":{"type":"object","properties":{"interface_type":{"type":"string","title":"interface_type is the interface type which will be bound to a specific implementation type"},"implementation":{"type":"string","title":"implementation is the implementing type which will be supplied when an input of type interface is requested"}},"description":"GolangBinding is an explicit interface type to implementing type binding for dependency injection."},"description":"golang_bindings specifies explicit interface to implementation type bindings which\\ndepinject uses to resolve interface inputs to provider functions.  The scope of this\\nfield\'s configuration is module specific."}},"description":"ModuleConfig is a module configuration for an app."},"description":"modules are the module configurations for the app."},"golang_bindings":{"type":"array","items":{"type":"object","properties":{"interface_type":{"type":"string","title":"interface_type is the interface type which will be bound to a specific implementation type"},"implementation":{"type":"string","title":"implementation is the implementing type which will be supplied when an input of type interface is requested"}},"description":"GolangBinding is an explicit interface type to implementing type binding for dependency injection."},"description":"golang_bindings specifies explicit interface to implementation type bindings which\\ndepinject uses to resolve interface inputs to provider functions.  The scope of this\\nfield\'s configuration is global (not module specific)."}},"description":"Config represents the configuration for a Cosmos SDK ABCI app.\\nIt is intended that all state machine logic including the version of\\nbaseapp and tx handlers (and possibly even Tendermint) that an app needs\\ncan be described in a config object. For compatibility, the framework should\\nallow a mixture of declarative and imperative app wiring, however, apps\\nthat strive for the maximum ease of maintainability should be able to describe\\ntheir state machine with a config object alone."},"cosmos.app.v1alpha1.GolangBinding":{"type":"object","properties":{"interface_type":{"type":"string","title":"interface_type is the interface type which will be bound to a specific implementation type"},"implementation":{"type":"string","title":"implementation is the implementing type which will be supplied when an input of type interface is requested"}},"description":"GolangBinding is an explicit interface type to implementing type binding for dependency injection."},"cosmos.app.v1alpha1.ModuleConfig":{"type":"object","properties":{"name":{"type":"string","description":"name is the unique name of the module within the app. It should be a name\\nthat persists between different versions of a module so that modules\\ncan be smoothly upgraded to new versions.\\n\\nFor example, for the module cosmos.bank.module.v1.Module, we may chose\\nto simply name the module \\"bank\\" in the app. When we upgrade to\\ncosmos.bank.module.v2.Module, the app-specific name \\"bank\\" stays the same\\nand the framework knows that the v2 module should receive all the same state\\nthat the v1 module had. Note: modules should provide info on which versions\\nthey can migrate from in the ModuleDescriptor.can_migration_from field."},"config":{"description":"config is the config object for the module. Module config messages should\\ndefine a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"golang_bindings":{"type":"array","items":{"type":"object","properties":{"interface_type":{"type":"string","title":"interface_type is the interface type which will be bound to a specific implementation type"},"implementation":{"type":"string","title":"implementation is the implementing type which will be supplied when an input of type interface is requested"}},"description":"GolangBinding is an explicit interface type to implementing type binding for dependency injection."},"description":"golang_bindings specifies explicit interface to implementation type bindings which\\ndepinject uses to resolve interface inputs to provider functions.  The scope of this\\nfield\'s configuration is module specific."}},"description":"ModuleConfig is a module configuration for an app."},"cosmos.app.v1alpha1.QueryConfigResponse":{"type":"object","properties":{"config":{"description":"config is the current app config.","type":"object","properties":{"modules":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string","description":"name is the unique name of the module within the app. It should be a name\\nthat persists between different versions of a module so that modules\\ncan be smoothly upgraded to new versions.\\n\\nFor example, for the module cosmos.bank.module.v1.Module, we may chose\\nto simply name the module \\"bank\\" in the app. When we upgrade to\\ncosmos.bank.module.v2.Module, the app-specific name \\"bank\\" stays the same\\nand the framework knows that the v2 module should receive all the same state\\nthat the v1 module had. Note: modules should provide info on which versions\\nthey can migrate from in the ModuleDescriptor.can_migration_from field."},"config":{"description":"config is the config object for the module. Module config messages should\\ndefine a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension.","type":"object","properties":{"@type":{"type":"string","description":"A URL/resource name that uniquely identifies the type of the serialized\\nprotocol buffer message. This string must contain at least\\none \\"/\\" character. The last segment of the URL\'s path must represent\\nthe fully qualified name of the type (as in\\n`path/google.protobuf.Duration`). The name should be in a canonical form\\n(e.g., leading \\".\\" is not accepted).\\n\\nIn practice, teams usually precompile into the binary all types that they\\nexpect it to use in the context of Any. However, for URLs which use the\\nscheme `http`, `https`, or no scheme, one can optionally set up a type\\nserver that maps type URLs to message definitions as follows:\\n\\n* If no scheme is provided, `https` is assumed.\\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\\n  value in binary format, or produce an error.\\n* Applications are allowed to cache lookup results based on the\\n  URL, or have them precompiled into a binary to avoid any\\n  lookup. Therefore, binary compatibility needs to be preserved\\n  on changes to types. (Use versioned type names to manage\\n  breaking changes.)\\n\\nNote: this functionality is not currently available in the official\\nprotobuf release, and it is not used for type URLs beginning with\\ntype.googleapis.com.\\n\\nSchemes other than `http`, `https` (or the empty scheme) might be\\nused with implementation specific semantics."}},"additionalProperties":{}},"golang_bindings":{"type":"array","items":{"type":"object","properties":{"interface_type":{"type":"string","title":"interface_type is the interface type which will be bound to a specific implementation type"},"implementation":{"type":"string","title":"implementation is the implementing type which will be supplied when an input of type interface is requested"}},"description":"GolangBinding is an explicit interface type to implementing type binding for dependency injection."},"description":"golang_bindings specifies explicit interface to implementation type bindings which\\ndepinject uses to resolve interface inputs to provider functions.  The scope of this\\nfield\'s configuration is module specific."}},"description":"ModuleConfig is a module configuration for an app."},"description":"modules are the module configurations for the app."},"golang_bindings":{"type":"array","items":{"type":"object","properties":{"interface_type":{"type":"string","title":"interface_type is the interface type which will be bound to a specific implementation type"},"implementation":{"type":"string","title":"implementation is the implementing type which will be supplied when an input of type interface is requested"}},"description":"GolangBinding is an explicit interface type to implementing type binding for dependency injection."},"description":"golang_bindings specifies explicit interface to implementation type bindings which\\ndepinject uses to resolve interface inputs to provider functions.  The scope of this\\nfield\'s configuration is global (not module specific)."}}}},"description":"QueryConfigResponse is the Query/Config response type."},"cosmos.protocolpool.v1.QueryCommunityPoolResponse":{"type":"object","properties":{"pool":{"type":"array","items":{"type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"DecCoin defines a token with a denomination and a decimal amount.\\n\\nNOTE: The amount field is an Dec which implements the custom method\\nsignatures required by gogoproto."},"description":"pool defines community pool\'s coins."}},"description":"QueryCommunityPoolResponse is the response type for the Query/CommunityPool\\nRPC method."},"cosmos.protocolpool.v1.QueryUnclaimedBudgetResponse":{"type":"object","properties":{"claimed_amount":{"title":"claimed_amount is the budget amount already claimed by the recipient","type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"unclaimed_amount":{"title":"unclaimed_amount is the remaining budget amount that is unclaimed by the recipient","type":"object","properties":{"denom":{"type":"string"},"amount":{"type":"string"}},"description":"Coin defines a token with a denomination and an amount.\\n\\nNOTE: The amount field is an Int which implements the custom method\\nsignatures required by gogoproto."},"next_claim_from":{"type":"string","format":"date-time","description":"next_claim_from is the next starting claim time for fund distribution.\\nIt represents the time when we can claim funds after the period time interval has passed."},"period":{"type":"string","title":"period is the time interval for fund distribution"},"tranches_left":{"type":"string","format":"uint64","title":"tranches_left is the number of tranches left for the amount to be distributed"}},"description":"QueryUnclaimedBudgetResponse is the response type for the Query/UnclaimedBudget\\nRPC method."}}}}}},"docusaurus-plugin-content-docs":{"default":{"path":"/","versions":[{"name":"current","label":"Next","isLast":false,"path":"/main","mainDocId":"learn/learn","docs":[{"id":"build/abci/checktx","path":"/main/build/abci/checktx","sidebar":"buildSidebar"},{"id":"build/abci/introduction","path":"/main/build/abci/introduction","sidebar":"buildSidebar"},{"id":"build/abci/prepare-proposal","path":"/main/build/abci/prepare-proposal","sidebar":"buildSidebar"},{"id":"build/abci/process-proposal","path":"/main/build/abci/process-proposal","sidebar":"buildSidebar"},{"id":"build/abci/vote-extensions","path":"/main/build/abci/vote-extensions","sidebar":"buildSidebar"},{"id":"build/architecture/adr-002-docs-structure","path":"/main/build/architecture/adr-002-docs-structure","sidebar":"buildSidebar"},{"id":"build/architecture/adr-003-dynamic-capability-store","path":"/main/build/architecture/adr-003-dynamic-capability-store","sidebar":"buildSidebar"},{"id":"build/architecture/adr-004-split-denomination-keys","path":"/main/build/architecture/adr-004-split-denomination-keys","sidebar":"buildSidebar"},{"id":"build/architecture/adr-006-secret-store-replacement","path":"/main/build/architecture/adr-006-secret-store-replacement","sidebar":"buildSidebar"},{"id":"build/architecture/adr-007-specialization-groups","path":"/main/build/architecture/adr-007-specialization-groups","sidebar":"buildSidebar"},{"id":"build/architecture/adr-008-dCERT-group","path":"/main/build/architecture/adr-008-dCERT-group","sidebar":"buildSidebar"},{"id":"build/architecture/adr-009-evidence-module","path":"/main/build/architecture/adr-009-evidence-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-010-modular-antehandler","path":"/main/build/architecture/adr-010-modular-antehandler","sidebar":"buildSidebar"},{"id":"build/architecture/adr-011-generalize-genesis-accounts","path":"/main/build/architecture/adr-011-generalize-genesis-accounts","sidebar":"buildSidebar"},{"id":"build/architecture/adr-012-state-accessors","path":"/main/build/architecture/adr-012-state-accessors","sidebar":"buildSidebar"},{"id":"build/architecture/adr-013-metrics","path":"/main/build/architecture/adr-013-metrics","sidebar":"buildSidebar"},{"id":"build/architecture/adr-014-proportional-slashing","path":"/main/build/architecture/adr-014-proportional-slashing","sidebar":"buildSidebar"},{"id":"build/architecture/adr-016-validator-consensus-key-rotation","path":"/main/build/architecture/adr-016-validator-consensus-key-rotation","sidebar":"buildSidebar"},{"id":"build/architecture/adr-017-historical-header-module","path":"/main/build/architecture/adr-017-historical-header-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-018-extendable-voting-period","path":"/main/build/architecture/adr-018-extendable-voting-period","sidebar":"buildSidebar"},{"id":"build/architecture/adr-019-protobuf-state-encoding","path":"/main/build/architecture/adr-019-protobuf-state-encoding","sidebar":"buildSidebar"},{"id":"build/architecture/adr-020-protobuf-transaction-encoding","path":"/main/build/architecture/adr-020-protobuf-transaction-encoding","sidebar":"buildSidebar"},{"id":"build/architecture/adr-021-protobuf-query-encoding","path":"/main/build/architecture/adr-021-protobuf-query-encoding","sidebar":"buildSidebar"},{"id":"build/architecture/adr-022-custom-panic-handling","path":"/main/build/architecture/adr-022-custom-panic-handling","sidebar":"buildSidebar"},{"id":"build/architecture/adr-023-protobuf-naming","path":"/main/build/architecture/adr-023-protobuf-naming","sidebar":"buildSidebar"},{"id":"build/architecture/adr-024-coin-metadata","path":"/main/build/architecture/adr-024-coin-metadata","sidebar":"buildSidebar"},{"id":"build/architecture/adr-027-deterministic-protobuf-serialization","path":"/main/build/architecture/adr-027-deterministic-protobuf-serialization","sidebar":"buildSidebar"},{"id":"build/architecture/adr-028-public-key-addresses","path":"/main/build/architecture/adr-028-public-key-addresses","sidebar":"buildSidebar"},{"id":"build/architecture/adr-029-fee-grant-module","path":"/main/build/architecture/adr-029-fee-grant-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-030-authz-module","path":"/main/build/architecture/adr-030-authz-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-031-msg-service","path":"/main/build/architecture/adr-031-msg-service","sidebar":"buildSidebar"},{"id":"build/architecture/adr-032-typed-events","path":"/main/build/architecture/adr-032-typed-events","sidebar":"buildSidebar"},{"id":"build/architecture/adr-033-protobuf-inter-module-comm","path":"/main/build/architecture/adr-033-protobuf-inter-module-comm","sidebar":"buildSidebar"},{"id":"build/architecture/adr-034-account-rekeying","path":"/main/build/architecture/adr-034-account-rekeying","sidebar":"buildSidebar"},{"id":"build/architecture/adr-035-rosetta-api-support","path":"/main/build/architecture/adr-035-rosetta-api-support","sidebar":"buildSidebar"},{"id":"build/architecture/adr-036-arbitrary-signature","path":"/main/build/architecture/adr-036-arbitrary-signature","sidebar":"buildSidebar"},{"id":"build/architecture/adr-037-gov-split-vote","path":"/main/build/architecture/adr-037-gov-split-vote","sidebar":"buildSidebar"},{"id":"build/architecture/adr-038-state-listening","path":"/main/build/architecture/adr-038-state-listening","sidebar":"buildSidebar"},{"id":"build/architecture/adr-039-epoched-staking","path":"/main/build/architecture/adr-039-epoched-staking","sidebar":"buildSidebar"},{"id":"build/architecture/adr-040-storage-and-smt-state-commitments","path":"/main/build/architecture/adr-040-storage-and-smt-state-commitments","sidebar":"buildSidebar"},{"id":"build/architecture/adr-041-in-place-store-migrations","path":"/main/build/architecture/adr-041-in-place-store-migrations","sidebar":"buildSidebar"},{"id":"build/architecture/adr-042-group-module","path":"/main/build/architecture/adr-042-group-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-043-nft-module","path":"/main/build/architecture/adr-043-nft-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-044-protobuf-updates-guidelines","path":"/main/build/architecture/adr-044-protobuf-updates-guidelines","sidebar":"buildSidebar"},{"id":"build/architecture/adr-045-check-delivertx-middlewares","path":"/main/build/architecture/adr-045-check-delivertx-middlewares","sidebar":"buildSidebar"},{"id":"build/architecture/adr-046-module-params","path":"/main/build/architecture/adr-046-module-params","sidebar":"buildSidebar"},{"id":"build/architecture/adr-047-extend-upgrade-plan","path":"/main/build/architecture/adr-047-extend-upgrade-plan","sidebar":"buildSidebar"},{"id":"build/architecture/adr-048-consensus-fees","path":"/main/build/architecture/adr-048-consensus-fees","sidebar":"buildSidebar"},{"id":"build/architecture/adr-049-state-sync-hooks","path":"/main/build/architecture/adr-049-state-sync-hooks","sidebar":"buildSidebar"},{"id":"build/architecture/adr-050-sign-mode-textual","path":"/main/build/architecture/adr-050-sign-mode-textual","sidebar":"buildSidebar"},{"id":"build/architecture/adr-050-sign-mode-textual-annex1","path":"/main/build/architecture/adr-050-sign-mode-textual-annex1","sidebar":"buildSidebar"},{"id":"build/architecture/adr-050-sign-mode-textual-annex2","path":"/main/build/architecture/adr-050-sign-mode-textual-annex2","sidebar":"buildSidebar"},{"id":"build/architecture/adr-053-go-module-refactoring","path":"/main/build/architecture/adr-053-go-module-refactoring","sidebar":"buildSidebar"},{"id":"build/architecture/adr-054-semver-compatible-modules","path":"/main/build/architecture/adr-054-semver-compatible-modules","sidebar":"buildSidebar"},{"id":"build/architecture/adr-055-orm","path":"/main/build/architecture/adr-055-orm","sidebar":"buildSidebar"},{"id":"build/architecture/adr-057-app-wiring","path":"/main/build/architecture/adr-057-app-wiring","sidebar":"buildSidebar"},{"id":"build/architecture/adr-058-auto-generated-cli","path":"/main/build/architecture/adr-058-auto-generated-cli","sidebar":"buildSidebar"},{"id":"build/architecture/adr-059-test-scopes","path":"/main/build/architecture/adr-059-test-scopes","sidebar":"buildSidebar"},{"id":"build/architecture/adr-060-abci-1.0","path":"/main/build/architecture/adr-060-abci-1.0","sidebar":"buildSidebar"},{"id":"build/architecture/adr-061-liquid-staking","path":"/main/build/architecture/adr-061-liquid-staking","sidebar":"buildSidebar"},{"id":"build/architecture/adr-062-collections-state-layer","path":"/main/build/architecture/adr-062-collections-state-layer","sidebar":"buildSidebar"},{"id":"build/architecture/adr-063-core-module-api","path":"/main/build/architecture/adr-063-core-module-api","sidebar":"buildSidebar"},{"id":"build/architecture/adr-064-abci-2.0","path":"/main/build/architecture/adr-064-abci-2.0","sidebar":"buildSidebar"},{"id":"build/architecture/adr-065-store-v2","path":"/main/build/architecture/adr-065-store-v2","sidebar":"buildSidebar"},{"id":"build/architecture/adr-068-preblock","path":"/main/build/architecture/adr-068-preblock","sidebar":"buildSidebar"},{"id":"build/architecture/adr-070-unordered-account","path":"/main/build/architecture/adr-070-unordered-account","sidebar":"buildSidebar"},{"id":"build/architecture/adr-076-tx-malleability","path":"/main/build/architecture/adr-076-tx-malleability","sidebar":"buildSidebar"},{"id":"build/architecture/adr-template","path":"/main/build/architecture/adr-template","sidebar":"buildSidebar"},{"id":"build/architecture/PROCESS","path":"/main/build/architecture/PROCESS","sidebar":"buildSidebar"},{"id":"build/architecture/README","path":"/main/build/architecture/","sidebar":"buildSidebar"},{"id":"build/build","path":"/main/build/","sidebar":"buildSidebar"},{"id":"build/building-apps/app-go","path":"/main/build/building-apps/app-go","sidebar":"buildSidebar"},{"id":"build/building-apps/app-go-di","path":"/main/build/building-apps/app-go-di","sidebar":"buildSidebar"},{"id":"build/building-apps/app-mempool","path":"/main/build/building-apps/app-mempool","sidebar":"buildSidebar"},{"id":"build/building-apps/app-testnet","path":"/main/build/building-apps/app-testnet","sidebar":"buildSidebar"},{"id":"build/building-apps/app-upgrade","path":"/main/build/building-apps/app-upgrade","sidebar":"buildSidebar"},{"id":"build/building-apps/runtime","path":"/main/build/building-apps/runtime","sidebar":"buildSidebar"},{"id":"build/building-apps/vote-extensions","path":"/main/build/building-apps/vote-extensions","sidebar":"buildSidebar"},{"id":"build/building-modules/beginblock-endblock","path":"/main/build/building-modules/beginblock-endblock","sidebar":"buildSidebar"},{"id":"build/building-modules/depinject","path":"/main/build/building-modules/depinject","sidebar":"buildSidebar"},{"id":"build/building-modules/errors","path":"/main/build/building-modules/errors","sidebar":"buildSidebar"},{"id":"build/building-modules/genesis","path":"/main/build/building-modules/genesis","sidebar":"buildSidebar"},{"id":"build/building-modules/intro","path":"/main/build/building-modules/intro","sidebar":"buildSidebar"},{"id":"build/building-modules/invariants","path":"/main/build/building-modules/invariants","sidebar":"buildSidebar"},{"id":"build/building-modules/keeper","path":"/main/build/building-modules/keeper","sidebar":"buildSidebar"},{"id":"build/building-modules/messages-and-queries","path":"/main/build/building-modules/messages-and-queries","sidebar":"buildSidebar"},{"id":"build/building-modules/module-interfaces","path":"/main/build/building-modules/module-interfaces","sidebar":"buildSidebar"},{"id":"build/building-modules/module-manager","path":"/main/build/building-modules/module-manager","sidebar":"buildSidebar"},{"id":"build/building-modules/msg-services","path":"/main/build/building-modules/msg-services","sidebar":"buildSidebar"},{"id":"build/building-modules/preblock","path":"/main/build/building-modules/preblock","sidebar":"buildSidebar"},{"id":"build/building-modules/protobuf-annotations","path":"/main/build/building-modules/protobuf-annotations","sidebar":"buildSidebar"},{"id":"build/building-modules/query-services","path":"/main/build/building-modules/query-services","sidebar":"buildSidebar"},{"id":"build/building-modules/simulator","path":"/main/build/building-modules/simulator","sidebar":"buildSidebar"},{"id":"build/building-modules/structure","path":"/main/build/building-modules/structure","sidebar":"buildSidebar"},{"id":"build/building-modules/testing","path":"/main/build/building-modules/testing","sidebar":"buildSidebar"},{"id":"build/building-modules/upgrade","path":"/main/build/building-modules/upgrade","sidebar":"buildSidebar"},{"id":"build/migrations/intro","path":"/main/build/migrations/intro","sidebar":"buildSidebar"},{"id":"build/migrations/upgrade-guide","path":"/main/build/migrations/upgrade-guide","sidebar":"buildSidebar"},{"id":"build/migrations/upgrade-reference","path":"/main/build/migrations/upgrade-reference","sidebar":"buildSidebar"},{"id":"build/migrations/upgrading","path":"/main/build/migrations/upgrading","sidebar":"buildSidebar"},{"id":"build/modules/auth/README","path":"/main/build/modules/auth/","sidebar":"buildSidebar"},{"id":"build/modules/auth/tx","path":"/main/build/modules/auth/tx","sidebar":"buildSidebar"},{"id":"build/modules/auth/vesting","path":"/main/build/modules/auth/vesting","sidebar":"buildSidebar"},{"id":"build/modules/authz/README","path":"/main/build/modules/authz/","sidebar":"buildSidebar"},{"id":"build/modules/bank/README","path":"/main/build/modules/bank/","sidebar":"buildSidebar"},{"id":"build/modules/circuit/README","path":"/main/build/modules/circuit/","sidebar":"buildSidebar"},{"id":"build/modules/consensus/README","path":"/main/build/modules/consensus/","sidebar":"buildSidebar"},{"id":"build/modules/crisis/README","path":"/main/build/modules/crisis/","sidebar":"buildSidebar"},{"id":"build/modules/distribution/README","path":"/main/build/modules/distribution/","sidebar":"buildSidebar"},{"id":"build/modules/epochs/README","path":"/main/build/modules/epochs/","sidebar":"buildSidebar"},{"id":"build/modules/evidence/README","path":"/main/build/modules/evidence/","sidebar":"buildSidebar"},{"id":"build/modules/feegrant/README","path":"/main/build/modules/feegrant/","sidebar":"buildSidebar"},{"id":"build/modules/genutil/README","path":"/main/build/modules/genutil/","sidebar":"buildSidebar"},{"id":"build/modules/gov/README","path":"/main/build/modules/gov/","sidebar":"buildSidebar"},{"id":"build/modules/group/README","path":"/main/build/modules/group/","sidebar":"buildSidebar"},{"id":"build/modules/mint/README","path":"/main/build/modules/mint/","sidebar":"buildSidebar"},{"id":"build/modules/nft/README","path":"/main/build/modules/nft/","sidebar":"buildSidebar"},{"id":"build/modules/params/README","path":"/main/build/modules/params/","sidebar":"buildSidebar"},{"id":"build/modules/protocolpool/README","path":"/main/build/modules/protocolpool/","sidebar":"buildSidebar"},{"id":"build/modules/README","path":"/main/build/modules/","sidebar":"buildSidebar"},{"id":"build/modules/slashing/README","path":"/main/build/modules/slashing/","sidebar":"buildSidebar"},{"id":"build/modules/staking/README","path":"/main/build/modules/staking/","sidebar":"buildSidebar"},{"id":"build/modules/upgrade/README","path":"/main/build/modules/upgrade/","sidebar":"buildSidebar"},{"id":"build/packages/collections","path":"/main/build/packages/collections","sidebar":"buildSidebar"},{"id":"build/packages/depinject","path":"/main/build/packages/depinject","sidebar":"buildSidebar"},{"id":"build/packages/README","path":"/main/build/packages/","sidebar":"buildSidebar"},{"id":"build/rfc/PROCESS","path":"/main/build/rfc/PROCESS","sidebar":"buildSidebar"},{"id":"build/rfc/README","path":"/main/build/rfc/","sidebar":"buildSidebar"},{"id":"build/rfc/rfc-001-tx-validation","path":"/main/build/rfc/rfc-001-tx-validation","sidebar":"buildSidebar"},{"id":"build/rfc/rfc-template","path":"/main/build/rfc/rfc-template","sidebar":"buildSidebar"},{"id":"build/rfc/rfc/PROCESS","path":"/main/build/rfc/rfc/PROCESS","sidebar":"buildSidebar"},{"id":"build/rfc/rfc/README","path":"/main/build/rfc/rfc/","sidebar":"buildSidebar"},{"id":"build/rfc/rfc/rfc-001-tx-validation","path":"/main/build/rfc/rfc/rfc-001-tx-validation","sidebar":"buildSidebar"},{"id":"build/rfc/rfc/rfc-template","path":"/main/build/rfc/rfc/rfc-template","sidebar":"buildSidebar"},{"id":"build/spec/addresses/bech32","path":"/main/build/spec/addresses/bech32","sidebar":"buildSidebar"},{"id":"build/spec/addresses/README","path":"/main/build/spec/addresses/","sidebar":"buildSidebar"},{"id":"build/spec/README","path":"/main/build/spec/","sidebar":"buildSidebar"},{"id":"build/spec/SPEC_MODULE","path":"/main/build/spec/SPEC_MODULE","sidebar":"buildSidebar"},{"id":"build/spec/SPEC_STANDARD","path":"/main/build/spec/SPEC_STANDARD","sidebar":"buildSidebar"},{"id":"build/spec/store/interblock-cache","path":"/main/build/spec/store/interblock-cache","sidebar":"buildSidebar"},{"id":"build/spec/store/README","path":"/main/build/spec/store/","sidebar":"buildSidebar"},{"id":"build/tooling/confix","path":"/main/build/tooling/confix","sidebar":"buildSidebar"},{"id":"build/tooling/cosmovisor","path":"/main/build/tooling/cosmovisor","sidebar":"buildSidebar"},{"id":"build/tooling/hubl","path":"/main/build/tooling/hubl","sidebar":"buildSidebar"},{"id":"build/tooling/protobuf","path":"/main/build/tooling/protobuf","sidebar":"buildSidebar"},{"id":"build/tooling/README","path":"/main/build/tooling/","sidebar":"buildSidebar"},{"id":"learn/advanced/autocli","path":"/main/learn/advanced/autocli","sidebar":"learnSidebar"},{"id":"learn/advanced/baseapp","path":"/main/learn/advanced/baseapp","sidebar":"learnSidebar"},{"id":"learn/advanced/cli","path":"/main/learn/advanced/cli","sidebar":"learnSidebar"},{"id":"learn/advanced/config","path":"/main/learn/advanced/config","sidebar":"learnSidebar"},{"id":"learn/advanced/context","path":"/main/learn/advanced/context","sidebar":"learnSidebar"},{"id":"learn/advanced/encoding","path":"/main/learn/advanced/encoding","sidebar":"learnSidebar"},{"id":"learn/advanced/events","path":"/main/learn/advanced/events","sidebar":"learnSidebar"},{"id":"learn/advanced/grpc_rest","path":"/main/learn/advanced/grpc_rest","sidebar":"learnSidebar"},{"id":"learn/advanced/node","path":"/main/learn/advanced/node","sidebar":"learnSidebar"},{"id":"learn/advanced/ocap","path":"/main/learn/advanced/ocap","sidebar":"learnSidebar"},{"id":"learn/advanced/proto-docs","path":"/main/learn/advanced/proto-docs","sidebar":"learnSidebar"},{"id":"learn/advanced/runtx_middleware","path":"/main/learn/advanced/runtx_middleware","sidebar":"learnSidebar"},{"id":"learn/advanced/simulation","path":"/main/learn/advanced/simulation","sidebar":"learnSidebar"},{"id":"learn/advanced/store","path":"/main/learn/advanced/store","sidebar":"learnSidebar"},{"id":"learn/advanced/telemetry","path":"/main/learn/advanced/telemetry","sidebar":"learnSidebar"},{"id":"learn/advanced/transactions","path":"/main/learn/advanced/transactions","sidebar":"learnSidebar"},{"id":"learn/advanced/upgrade","path":"/main/learn/advanced/upgrade","sidebar":"learnSidebar"},{"id":"learn/beginner/accounts","path":"/main/learn/beginner/accounts","sidebar":"learnSidebar"},{"id":"learn/beginner/app-anatomy","path":"/main/learn/beginner/app-anatomy","sidebar":"learnSidebar"},{"id":"learn/beginner/gas-fees","path":"/main/learn/beginner/gas-fees","sidebar":"learnSidebar"},{"id":"learn/beginner/query-lifecycle","path":"/main/learn/beginner/query-lifecycle","sidebar":"learnSidebar"},{"id":"learn/beginner/tx-lifecycle","path":"/main/learn/beginner/tx-lifecycle","sidebar":"learnSidebar"},{"id":"learn/intro/overview","path":"/main/learn/intro/overview","sidebar":"learnSidebar"},{"id":"learn/intro/sdk-app-architecture","path":"/main/learn/intro/sdk-app-architecture","sidebar":"learnSidebar"},{"id":"learn/intro/sdk-design","path":"/main/learn/intro/sdk-design","sidebar":"learnSidebar"},{"id":"learn/intro/why-app-specific","path":"/main/learn/intro/why-app-specific","sidebar":"learnSidebar"},{"id":"learn/learn","path":"/main/learn/","sidebar":"learnSidebar"},{"id":"tutorials/transactions/building-a-transaction","path":"/main/tutorials/transactions/building-a-transaction","sidebar":"tutorialsSidebar"},{"id":"tutorials/tutorials","path":"/main/tutorials/","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/auction-frontrunning/demo-of-mitigating-front-running","path":"/main/tutorials/vote-extensions/auction-frontrunning/demo-of-mitigating-front-running","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/auction-frontrunning/getting-started","path":"/main/tutorials/vote-extensions/auction-frontrunning/getting-started","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extensions","path":"/main/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extensions","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extesions","path":"/main/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extesions","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/auction-frontrunning/understanding-frontrunning","path":"/main/tutorials/vote-extensions/auction-frontrunning/understanding-frontrunning","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/oracle/getting-started","path":"/main/tutorials/vote-extensions/oracle/getting-started","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/oracle/implementing-vote-extensions","path":"/main/tutorials/vote-extensions/oracle/implementing-vote-extensions","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/oracle/testing-oracle","path":"/main/tutorials/vote-extensions/oracle/testing-oracle","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/oracle/what-is-an-oracle","path":"/main/tutorials/vote-extensions/oracle/what-is-an-oracle","sidebar":"tutorialsSidebar"},{"id":"user/run-node/interact-node","path":"/main/user/run-node/interact-node","sidebar":"userSidebar"},{"id":"user/run-node/keyring","path":"/main/user/run-node/keyring","sidebar":"userSidebar"},{"id":"user/run-node/rosetta","path":"/main/user/run-node/rosetta","sidebar":"userSidebar"},{"id":"user/run-node/run-node","path":"/main/user/run-node/run-node","sidebar":"userSidebar"},{"id":"user/run-node/run-production","path":"/main/user/run-node/run-production","sidebar":"userSidebar"},{"id":"user/run-node/run-testnet","path":"/main/user/run-node/run-testnet","sidebar":"userSidebar"},{"id":"user/run-node/txs","path":"/main/user/run-node/txs","sidebar":"userSidebar"},{"id":"user/user","path":"/main/user/","sidebar":"userSidebar"}],"draftIds":[],"sidebars":{"learnSidebar":{"link":{"path":"/main/learn/","label":"learn/learn"}},"buildSidebar":{"link":{"path":"/main/build/","label":"build/build"}},"userSidebar":{"link":{"path":"/main/user/run-node/keyring","label":"user/run-node/keyring"}},"tutorialsSidebar":{"link":{"path":"/main/tutorials/","label":"tutorials/tutorials"}}}},{"name":"0.53","label":"v0.53","isLast":true,"path":"/v0.53","mainDocId":"learn/learn","docs":[{"id":"build/abci/checktx","path":"/v0.53/build/abci/checktx","sidebar":"buildSidebar"},{"id":"build/abci/introduction","path":"/v0.53/build/abci/introduction","sidebar":"buildSidebar"},{"id":"build/abci/prepare-proposal","path":"/v0.53/build/abci/prepare-proposal","sidebar":"buildSidebar"},{"id":"build/abci/process-proposal","path":"/v0.53/build/abci/process-proposal","sidebar":"buildSidebar"},{"id":"build/abci/vote-extensions","path":"/v0.53/build/abci/vote-extensions","sidebar":"buildSidebar"},{"id":"build/architecture/adr-002-docs-structure","path":"/v0.53/build/architecture/adr-002-docs-structure","sidebar":"buildSidebar"},{"id":"build/architecture/adr-003-dynamic-capability-store","path":"/v0.53/build/architecture/adr-003-dynamic-capability-store","sidebar":"buildSidebar"},{"id":"build/architecture/adr-004-split-denomination-keys","path":"/v0.53/build/architecture/adr-004-split-denomination-keys","sidebar":"buildSidebar"},{"id":"build/architecture/adr-006-secret-store-replacement","path":"/v0.53/build/architecture/adr-006-secret-store-replacement","sidebar":"buildSidebar"},{"id":"build/architecture/adr-007-specialization-groups","path":"/v0.53/build/architecture/adr-007-specialization-groups","sidebar":"buildSidebar"},{"id":"build/architecture/adr-008-dCERT-group","path":"/v0.53/build/architecture/adr-008-dCERT-group","sidebar":"buildSidebar"},{"id":"build/architecture/adr-009-evidence-module","path":"/v0.53/build/architecture/adr-009-evidence-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-010-modular-antehandler","path":"/v0.53/build/architecture/adr-010-modular-antehandler","sidebar":"buildSidebar"},{"id":"build/architecture/adr-011-generalize-genesis-accounts","path":"/v0.53/build/architecture/adr-011-generalize-genesis-accounts","sidebar":"buildSidebar"},{"id":"build/architecture/adr-012-state-accessors","path":"/v0.53/build/architecture/adr-012-state-accessors","sidebar":"buildSidebar"},{"id":"build/architecture/adr-013-metrics","path":"/v0.53/build/architecture/adr-013-metrics","sidebar":"buildSidebar"},{"id":"build/architecture/adr-014-proportional-slashing","path":"/v0.53/build/architecture/adr-014-proportional-slashing","sidebar":"buildSidebar"},{"id":"build/architecture/adr-016-validator-consensus-key-rotation","path":"/v0.53/build/architecture/adr-016-validator-consensus-key-rotation","sidebar":"buildSidebar"},{"id":"build/architecture/adr-017-historical-header-module","path":"/v0.53/build/architecture/adr-017-historical-header-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-018-extendable-voting-period","path":"/v0.53/build/architecture/adr-018-extendable-voting-period","sidebar":"buildSidebar"},{"id":"build/architecture/adr-019-protobuf-state-encoding","path":"/v0.53/build/architecture/adr-019-protobuf-state-encoding","sidebar":"buildSidebar"},{"id":"build/architecture/adr-020-protobuf-transaction-encoding","path":"/v0.53/build/architecture/adr-020-protobuf-transaction-encoding","sidebar":"buildSidebar"},{"id":"build/architecture/adr-021-protobuf-query-encoding","path":"/v0.53/build/architecture/adr-021-protobuf-query-encoding","sidebar":"buildSidebar"},{"id":"build/architecture/adr-022-custom-panic-handling","path":"/v0.53/build/architecture/adr-022-custom-panic-handling","sidebar":"buildSidebar"},{"id":"build/architecture/adr-023-protobuf-naming","path":"/v0.53/build/architecture/adr-023-protobuf-naming","sidebar":"buildSidebar"},{"id":"build/architecture/adr-024-coin-metadata","path":"/v0.53/build/architecture/adr-024-coin-metadata","sidebar":"buildSidebar"},{"id":"build/architecture/adr-027-deterministic-protobuf-serialization","path":"/v0.53/build/architecture/adr-027-deterministic-protobuf-serialization","sidebar":"buildSidebar"},{"id":"build/architecture/adr-028-public-key-addresses","path":"/v0.53/build/architecture/adr-028-public-key-addresses","sidebar":"buildSidebar"},{"id":"build/architecture/adr-029-fee-grant-module","path":"/v0.53/build/architecture/adr-029-fee-grant-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-030-authz-module","path":"/v0.53/build/architecture/adr-030-authz-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-031-msg-service","path":"/v0.53/build/architecture/adr-031-msg-service","sidebar":"buildSidebar"},{"id":"build/architecture/adr-032-typed-events","path":"/v0.53/build/architecture/adr-032-typed-events","sidebar":"buildSidebar"},{"id":"build/architecture/adr-033-protobuf-inter-module-comm","path":"/v0.53/build/architecture/adr-033-protobuf-inter-module-comm","sidebar":"buildSidebar"},{"id":"build/architecture/adr-034-account-rekeying","path":"/v0.53/build/architecture/adr-034-account-rekeying","sidebar":"buildSidebar"},{"id":"build/architecture/adr-035-rosetta-api-support","path":"/v0.53/build/architecture/adr-035-rosetta-api-support","sidebar":"buildSidebar"},{"id":"build/architecture/adr-036-arbitrary-signature","path":"/v0.53/build/architecture/adr-036-arbitrary-signature","sidebar":"buildSidebar"},{"id":"build/architecture/adr-037-gov-split-vote","path":"/v0.53/build/architecture/adr-037-gov-split-vote","sidebar":"buildSidebar"},{"id":"build/architecture/adr-038-state-listening","path":"/v0.53/build/architecture/adr-038-state-listening","sidebar":"buildSidebar"},{"id":"build/architecture/adr-039-epoched-staking","path":"/v0.53/build/architecture/adr-039-epoched-staking","sidebar":"buildSidebar"},{"id":"build/architecture/adr-040-storage-and-smt-state-commitments","path":"/v0.53/build/architecture/adr-040-storage-and-smt-state-commitments","sidebar":"buildSidebar"},{"id":"build/architecture/adr-041-in-place-store-migrations","path":"/v0.53/build/architecture/adr-041-in-place-store-migrations","sidebar":"buildSidebar"},{"id":"build/architecture/adr-042-group-module","path":"/v0.53/build/architecture/adr-042-group-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-043-nft-module","path":"/v0.53/build/architecture/adr-043-nft-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-044-protobuf-updates-guidelines","path":"/v0.53/build/architecture/adr-044-protobuf-updates-guidelines","sidebar":"buildSidebar"},{"id":"build/architecture/adr-045-check-delivertx-middlewares","path":"/v0.53/build/architecture/adr-045-check-delivertx-middlewares","sidebar":"buildSidebar"},{"id":"build/architecture/adr-046-module-params","path":"/v0.53/build/architecture/adr-046-module-params","sidebar":"buildSidebar"},{"id":"build/architecture/adr-047-extend-upgrade-plan","path":"/v0.53/build/architecture/adr-047-extend-upgrade-plan","sidebar":"buildSidebar"},{"id":"build/architecture/adr-048-consensus-fees","path":"/v0.53/build/architecture/adr-048-consensus-fees","sidebar":"buildSidebar"},{"id":"build/architecture/adr-049-state-sync-hooks","path":"/v0.53/build/architecture/adr-049-state-sync-hooks","sidebar":"buildSidebar"},{"id":"build/architecture/adr-050-sign-mode-textual","path":"/v0.53/build/architecture/adr-050-sign-mode-textual","sidebar":"buildSidebar"},{"id":"build/architecture/adr-050-sign-mode-textual-annex1","path":"/v0.53/build/architecture/adr-050-sign-mode-textual-annex1","sidebar":"buildSidebar"},{"id":"build/architecture/adr-050-sign-mode-textual-annex2","path":"/v0.53/build/architecture/adr-050-sign-mode-textual-annex2","sidebar":"buildSidebar"},{"id":"build/architecture/adr-053-go-module-refactoring","path":"/v0.53/build/architecture/adr-053-go-module-refactoring","sidebar":"buildSidebar"},{"id":"build/architecture/adr-054-semver-compatible-modules","path":"/v0.53/build/architecture/adr-054-semver-compatible-modules","sidebar":"buildSidebar"},{"id":"build/architecture/adr-055-orm","path":"/v0.53/build/architecture/adr-055-orm","sidebar":"buildSidebar"},{"id":"build/architecture/adr-057-app-wiring","path":"/v0.53/build/architecture/adr-057-app-wiring","sidebar":"buildSidebar"},{"id":"build/architecture/adr-058-auto-generated-cli","path":"/v0.53/build/architecture/adr-058-auto-generated-cli","sidebar":"buildSidebar"},{"id":"build/architecture/adr-059-test-scopes","path":"/v0.53/build/architecture/adr-059-test-scopes","sidebar":"buildSidebar"},{"id":"build/architecture/adr-060-abci-1.0","path":"/v0.53/build/architecture/adr-060-abci-1.0","sidebar":"buildSidebar"},{"id":"build/architecture/adr-061-liquid-staking","path":"/v0.53/build/architecture/adr-061-liquid-staking","sidebar":"buildSidebar"},{"id":"build/architecture/adr-062-collections-state-layer","path":"/v0.53/build/architecture/adr-062-collections-state-layer","sidebar":"buildSidebar"},{"id":"build/architecture/adr-063-core-module-api","path":"/v0.53/build/architecture/adr-063-core-module-api","sidebar":"buildSidebar"},{"id":"build/architecture/adr-064-abci-2.0","path":"/v0.53/build/architecture/adr-064-abci-2.0","sidebar":"buildSidebar"},{"id":"build/architecture/adr-065-store-v2","path":"/v0.53/build/architecture/adr-065-store-v2","sidebar":"buildSidebar"},{"id":"build/architecture/adr-068-preblock","path":"/v0.53/build/architecture/adr-068-preblock","sidebar":"buildSidebar"},{"id":"build/architecture/adr-070-unordered-account","path":"/v0.53/build/architecture/adr-070-unordered-account","sidebar":"buildSidebar"},{"id":"build/architecture/adr-076-tx-malleability","path":"/v0.53/build/architecture/adr-076-tx-malleability","sidebar":"buildSidebar"},{"id":"build/architecture/adr-template","path":"/v0.53/build/architecture/adr-template","sidebar":"buildSidebar"},{"id":"build/architecture/PROCESS","path":"/v0.53/build/architecture/PROCESS","sidebar":"buildSidebar"},{"id":"build/architecture/README","path":"/v0.53/build/architecture/","sidebar":"buildSidebar"},{"id":"build/build","path":"/v0.53/build/","sidebar":"buildSidebar"},{"id":"build/building-apps/app-go","path":"/v0.53/build/building-apps/app-go","sidebar":"buildSidebar"},{"id":"build/building-apps/app-go-di","path":"/v0.53/build/building-apps/app-go-di","sidebar":"buildSidebar"},{"id":"build/building-apps/app-mempool","path":"/v0.53/build/building-apps/app-mempool","sidebar":"buildSidebar"},{"id":"build/building-apps/app-testnet","path":"/v0.53/build/building-apps/app-testnet","sidebar":"buildSidebar"},{"id":"build/building-apps/app-upgrade","path":"/v0.53/build/building-apps/app-upgrade","sidebar":"buildSidebar"},{"id":"build/building-apps/runtime","path":"/v0.53/build/building-apps/runtime","sidebar":"buildSidebar"},{"id":"build/building-apps/vote-extensions","path":"/v0.53/build/building-apps/vote-extensions","sidebar":"buildSidebar"},{"id":"build/building-modules/beginblock-endblock","path":"/v0.53/build/building-modules/beginblock-endblock","sidebar":"buildSidebar"},{"id":"build/building-modules/depinject","path":"/v0.53/build/building-modules/depinject","sidebar":"buildSidebar"},{"id":"build/building-modules/errors","path":"/v0.53/build/building-modules/errors","sidebar":"buildSidebar"},{"id":"build/building-modules/genesis","path":"/v0.53/build/building-modules/genesis","sidebar":"buildSidebar"},{"id":"build/building-modules/intro","path":"/v0.53/build/building-modules/intro","sidebar":"buildSidebar"},{"id":"build/building-modules/invariants","path":"/v0.53/build/building-modules/invariants","sidebar":"buildSidebar"},{"id":"build/building-modules/keeper","path":"/v0.53/build/building-modules/keeper","sidebar":"buildSidebar"},{"id":"build/building-modules/messages-and-queries","path":"/v0.53/build/building-modules/messages-and-queries","sidebar":"buildSidebar"},{"id":"build/building-modules/module-interfaces","path":"/v0.53/build/building-modules/module-interfaces","sidebar":"buildSidebar"},{"id":"build/building-modules/module-manager","path":"/v0.53/build/building-modules/module-manager","sidebar":"buildSidebar"},{"id":"build/building-modules/msg-services","path":"/v0.53/build/building-modules/msg-services","sidebar":"buildSidebar"},{"id":"build/building-modules/preblock","path":"/v0.53/build/building-modules/preblock","sidebar":"buildSidebar"},{"id":"build/building-modules/protobuf-annotations","path":"/v0.53/build/building-modules/protobuf-annotations","sidebar":"buildSidebar"},{"id":"build/building-modules/query-services","path":"/v0.53/build/building-modules/query-services","sidebar":"buildSidebar"},{"id":"build/building-modules/simulator","path":"/v0.53/build/building-modules/simulator","sidebar":"buildSidebar"},{"id":"build/building-modules/structure","path":"/v0.53/build/building-modules/structure","sidebar":"buildSidebar"},{"id":"build/building-modules/testing","path":"/v0.53/build/building-modules/testing","sidebar":"buildSidebar"},{"id":"build/building-modules/upgrade","path":"/v0.53/build/building-modules/upgrade","sidebar":"buildSidebar"},{"id":"build/migrations/intro","path":"/v0.53/build/migrations/intro","sidebar":"buildSidebar"},{"id":"build/migrations/upgrade-guide","path":"/v0.53/build/migrations/upgrade-guide","sidebar":"buildSidebar"},{"id":"build/migrations/upgrade-reference","path":"/v0.53/build/migrations/upgrade-reference","sidebar":"buildSidebar"},{"id":"build/modules/auth/README","path":"/v0.53/build/modules/auth/","sidebar":"buildSidebar"},{"id":"build/modules/auth/tx","path":"/v0.53/build/modules/auth/tx","sidebar":"buildSidebar"},{"id":"build/modules/auth/vesting","path":"/v0.53/build/modules/auth/vesting","sidebar":"buildSidebar"},{"id":"build/modules/authz/README","path":"/v0.53/build/modules/authz/","sidebar":"buildSidebar"},{"id":"build/modules/bank/README","path":"/v0.53/build/modules/bank/","sidebar":"buildSidebar"},{"id":"build/modules/circuit/README","path":"/v0.53/build/modules/circuit/","sidebar":"buildSidebar"},{"id":"build/modules/consensus/README","path":"/v0.53/build/modules/consensus/","sidebar":"buildSidebar"},{"id":"build/modules/crisis/README","path":"/v0.53/build/modules/crisis/","sidebar":"buildSidebar"},{"id":"build/modules/distribution/README","path":"/v0.53/build/modules/distribution/","sidebar":"buildSidebar"},{"id":"build/modules/epochs/README","path":"/v0.53/build/modules/epochs/","sidebar":"buildSidebar"},{"id":"build/modules/evidence/README","path":"/v0.53/build/modules/evidence/","sidebar":"buildSidebar"},{"id":"build/modules/feegrant/README","path":"/v0.53/build/modules/feegrant/","sidebar":"buildSidebar"},{"id":"build/modules/genutil/README","path":"/v0.53/build/modules/genutil/","sidebar":"buildSidebar"},{"id":"build/modules/gov/README","path":"/v0.53/build/modules/gov/","sidebar":"buildSidebar"},{"id":"build/modules/group/README","path":"/v0.53/build/modules/group/","sidebar":"buildSidebar"},{"id":"build/modules/mint/README","path":"/v0.53/build/modules/mint/","sidebar":"buildSidebar"},{"id":"build/modules/nft/README","path":"/v0.53/build/modules/nft/","sidebar":"buildSidebar"},{"id":"build/modules/params/README","path":"/v0.53/build/modules/params/","sidebar":"buildSidebar"},{"id":"build/modules/protocolpool/README","path":"/v0.53/build/modules/protocolpool/","sidebar":"buildSidebar"},{"id":"build/modules/README","path":"/v0.53/build/modules/","sidebar":"buildSidebar"},{"id":"build/modules/slashing/README","path":"/v0.53/build/modules/slashing/","sidebar":"buildSidebar"},{"id":"build/modules/staking/README","path":"/v0.53/build/modules/staking/","sidebar":"buildSidebar"},{"id":"build/modules/upgrade/README","path":"/v0.53/build/modules/upgrade/","sidebar":"buildSidebar"},{"id":"build/packages/collections","path":"/v0.53/build/packages/collections","sidebar":"buildSidebar"},{"id":"build/packages/depinject","path":"/v0.53/build/packages/depinject","sidebar":"buildSidebar"},{"id":"build/packages/README","path":"/v0.53/build/packages/","sidebar":"buildSidebar"},{"id":"build/rfc/PROCESS","path":"/v0.53/build/rfc/PROCESS","sidebar":"buildSidebar"},{"id":"build/rfc/README","path":"/v0.53/build/rfc/","sidebar":"buildSidebar"},{"id":"build/rfc/rfc-001-tx-validation","path":"/v0.53/build/rfc/rfc-001-tx-validation","sidebar":"buildSidebar"},{"id":"build/rfc/rfc-template","path":"/v0.53/build/rfc/rfc-template","sidebar":"buildSidebar"},{"id":"build/spec/addresses/bech32","path":"/v0.53/build/spec/addresses/bech32","sidebar":"buildSidebar"},{"id":"build/spec/addresses/README","path":"/v0.53/build/spec/addresses/","sidebar":"buildSidebar"},{"id":"build/spec/README","path":"/v0.53/build/spec/","sidebar":"buildSidebar"},{"id":"build/spec/SPEC_MODULE","path":"/v0.53/build/spec/SPEC_MODULE","sidebar":"buildSidebar"},{"id":"build/spec/SPEC_STANDARD","path":"/v0.53/build/spec/SPEC_STANDARD","sidebar":"buildSidebar"},{"id":"build/spec/store/interblock-cache","path":"/v0.53/build/spec/store/interblock-cache","sidebar":"buildSidebar"},{"id":"build/spec/store/README","path":"/v0.53/build/spec/store/","sidebar":"buildSidebar"},{"id":"build/tooling/confix","path":"/v0.53/build/tooling/confix","sidebar":"buildSidebar"},{"id":"build/tooling/cosmovisor","path":"/v0.53/build/tooling/cosmovisor","sidebar":"buildSidebar"},{"id":"build/tooling/protobuf","path":"/v0.53/build/tooling/protobuf","sidebar":"buildSidebar"},{"id":"build/tooling/README","path":"/v0.53/build/tooling/","sidebar":"buildSidebar"},{"id":"learn/advanced/autocli","path":"/v0.53/learn/advanced/autocli","sidebar":"learnSidebar"},{"id":"learn/advanced/baseapp","path":"/v0.53/learn/advanced/baseapp","sidebar":"learnSidebar"},{"id":"learn/advanced/cli","path":"/v0.53/learn/advanced/cli","sidebar":"learnSidebar"},{"id":"learn/advanced/config","path":"/v0.53/learn/advanced/config","sidebar":"learnSidebar"},{"id":"learn/advanced/context","path":"/v0.53/learn/advanced/context","sidebar":"learnSidebar"},{"id":"learn/advanced/encoding","path":"/v0.53/learn/advanced/encoding","sidebar":"learnSidebar"},{"id":"learn/advanced/events","path":"/v0.53/learn/advanced/events","sidebar":"learnSidebar"},{"id":"learn/advanced/grpc_rest","path":"/v0.53/learn/advanced/grpc_rest","sidebar":"learnSidebar"},{"id":"learn/advanced/node","path":"/v0.53/learn/advanced/node","sidebar":"learnSidebar"},{"id":"learn/advanced/ocap","path":"/v0.53/learn/advanced/ocap","sidebar":"learnSidebar"},{"id":"learn/advanced/proto-docs","path":"/v0.53/learn/advanced/proto-docs","sidebar":"learnSidebar"},{"id":"learn/advanced/runtx_middleware","path":"/v0.53/learn/advanced/runtx_middleware","sidebar":"learnSidebar"},{"id":"learn/advanced/simulation","path":"/v0.53/learn/advanced/simulation","sidebar":"learnSidebar"},{"id":"learn/advanced/store","path":"/v0.53/learn/advanced/store","sidebar":"learnSidebar"},{"id":"learn/advanced/telemetry","path":"/v0.53/learn/advanced/telemetry","sidebar":"learnSidebar"},{"id":"learn/advanced/transactions","path":"/v0.53/learn/advanced/transactions","sidebar":"learnSidebar"},{"id":"learn/advanced/upgrade","path":"/v0.53/learn/advanced/upgrade","sidebar":"learnSidebar"},{"id":"learn/beginner/accounts","path":"/v0.53/learn/beginner/accounts","sidebar":"learnSidebar"},{"id":"learn/beginner/app-anatomy","path":"/v0.53/learn/beginner/app-anatomy","sidebar":"learnSidebar"},{"id":"learn/beginner/gas-fees","path":"/v0.53/learn/beginner/gas-fees","sidebar":"learnSidebar"},{"id":"learn/beginner/query-lifecycle","path":"/v0.53/learn/beginner/query-lifecycle","sidebar":"learnSidebar"},{"id":"learn/beginner/tx-lifecycle","path":"/v0.53/learn/beginner/tx-lifecycle","sidebar":"learnSidebar"},{"id":"learn/intro/overview","path":"/v0.53/learn/intro/overview","sidebar":"learnSidebar"},{"id":"learn/intro/sdk-app-architecture","path":"/v0.53/learn/intro/sdk-app-architecture","sidebar":"learnSidebar"},{"id":"learn/intro/sdk-design","path":"/v0.53/learn/intro/sdk-design","sidebar":"learnSidebar"},{"id":"learn/intro/why-app-specific","path":"/v0.53/learn/intro/why-app-specific","sidebar":"learnSidebar"},{"id":"learn/learn","path":"/v0.53/learn/","sidebar":"learnSidebar"},{"id":"tutorials/transactions/building-a-transaction","path":"/v0.53/tutorials/transactions/building-a-transaction","sidebar":"tutorialsSidebar"},{"id":"tutorials/tutorials","path":"/v0.53/tutorials/","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/auction-frontrunning/demo-of-mitigating-front-running","path":"/v0.53/tutorials/vote-extensions/auction-frontrunning/demo-of-mitigating-front-running","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/auction-frontrunning/getting-started","path":"/v0.53/tutorials/vote-extensions/auction-frontrunning/getting-started","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extensions","path":"/v0.53/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extensions","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extesions","path":"/v0.53/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extesions","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/auction-frontrunning/understanding-frontrunning","path":"/v0.53/tutorials/vote-extensions/auction-frontrunning/understanding-frontrunning","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/oracle/getting-started","path":"/v0.53/tutorials/vote-extensions/oracle/getting-started","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/oracle/implementing-vote-extensions","path":"/v0.53/tutorials/vote-extensions/oracle/implementing-vote-extensions","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/oracle/testing-oracle","path":"/v0.53/tutorials/vote-extensions/oracle/testing-oracle","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/oracle/what-is-an-oracle","path":"/v0.53/tutorials/vote-extensions/oracle/what-is-an-oracle","sidebar":"tutorialsSidebar"},{"id":"user/run-node/interact-node","path":"/v0.53/user/run-node/interact-node","sidebar":"userSidebar"},{"id":"user/run-node/keyring","path":"/v0.53/user/run-node/keyring","sidebar":"userSidebar"},{"id":"user/run-node/run-node","path":"/v0.53/user/run-node/run-node","sidebar":"userSidebar"},{"id":"user/run-node/run-production","path":"/v0.53/user/run-node/run-production","sidebar":"userSidebar"},{"id":"user/run-node/run-testnet","path":"/v0.53/user/run-node/run-testnet","sidebar":"userSidebar"},{"id":"user/run-node/txs","path":"/v0.53/user/run-node/txs","sidebar":"userSidebar"},{"id":"user/user","path":"/v0.53/user/","sidebar":"userSidebar"}],"draftIds":[],"sidebars":{"learnSidebar":{"link":{"path":"/v0.53/learn/","label":"version-0.53/learn/learn"}},"buildSidebar":{"link":{"path":"/v0.53/build/","label":"version-0.53/build/build"}},"userSidebar":{"link":{"path":"/v0.53/user/run-node/keyring","label":"version-0.53/user/run-node/keyring"}},"tutorialsSidebar":{"link":{"path":"/v0.53/tutorials/","label":"version-0.53/tutorials/tutorials"}}}},{"name":"0.5","label":"v0.50","isLast":false,"path":"/v0.50","mainDocId":"learn/learn","docs":[{"id":"build/abci/introduction","path":"/v0.50/build/abci/introduction","sidebar":"buildSidebar"},{"id":"build/abci/prepare-proposal","path":"/v0.50/build/abci/prepare-proposal","sidebar":"buildSidebar"},{"id":"build/abci/process-proposal","path":"/v0.50/build/abci/process-proposal","sidebar":"buildSidebar"},{"id":"build/abci/vote-extensions","path":"/v0.50/build/abci/vote-extensions","sidebar":"buildSidebar"},{"id":"build/architecture/adr-002-docs-structure","path":"/v0.50/build/architecture/adr-002-docs-structure","sidebar":"buildSidebar"},{"id":"build/architecture/adr-003-dynamic-capability-store","path":"/v0.50/build/architecture/adr-003-dynamic-capability-store","sidebar":"buildSidebar"},{"id":"build/architecture/adr-004-split-denomination-keys","path":"/v0.50/build/architecture/adr-004-split-denomination-keys","sidebar":"buildSidebar"},{"id":"build/architecture/adr-006-secret-store-replacement","path":"/v0.50/build/architecture/adr-006-secret-store-replacement","sidebar":"buildSidebar"},{"id":"build/architecture/adr-007-specialization-groups","path":"/v0.50/build/architecture/adr-007-specialization-groups","sidebar":"buildSidebar"},{"id":"build/architecture/adr-008-dCERT-group","path":"/v0.50/build/architecture/adr-008-dCERT-group","sidebar":"buildSidebar"},{"id":"build/architecture/adr-009-evidence-module","path":"/v0.50/build/architecture/adr-009-evidence-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-010-modular-antehandler","path":"/v0.50/build/architecture/adr-010-modular-antehandler","sidebar":"buildSidebar"},{"id":"build/architecture/adr-011-generalize-genesis-accounts","path":"/v0.50/build/architecture/adr-011-generalize-genesis-accounts","sidebar":"buildSidebar"},{"id":"build/architecture/adr-012-state-accessors","path":"/v0.50/build/architecture/adr-012-state-accessors","sidebar":"buildSidebar"},{"id":"build/architecture/adr-013-metrics","path":"/v0.50/build/architecture/adr-013-metrics","sidebar":"buildSidebar"},{"id":"build/architecture/adr-014-proportional-slashing","path":"/v0.50/build/architecture/adr-014-proportional-slashing","sidebar":"buildSidebar"},{"id":"build/architecture/adr-016-validator-consensus-key-rotation","path":"/v0.50/build/architecture/adr-016-validator-consensus-key-rotation","sidebar":"buildSidebar"},{"id":"build/architecture/adr-017-historical-header-module","path":"/v0.50/build/architecture/adr-017-historical-header-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-018-extendable-voting-period","path":"/v0.50/build/architecture/adr-018-extendable-voting-period","sidebar":"buildSidebar"},{"id":"build/architecture/adr-019-protobuf-state-encoding","path":"/v0.50/build/architecture/adr-019-protobuf-state-encoding","sidebar":"buildSidebar"},{"id":"build/architecture/adr-020-protobuf-transaction-encoding","path":"/v0.50/build/architecture/adr-020-protobuf-transaction-encoding","sidebar":"buildSidebar"},{"id":"build/architecture/adr-021-protobuf-query-encoding","path":"/v0.50/build/architecture/adr-021-protobuf-query-encoding","sidebar":"buildSidebar"},{"id":"build/architecture/adr-022-custom-panic-handling","path":"/v0.50/build/architecture/adr-022-custom-panic-handling","sidebar":"buildSidebar"},{"id":"build/architecture/adr-023-protobuf-naming","path":"/v0.50/build/architecture/adr-023-protobuf-naming","sidebar":"buildSidebar"},{"id":"build/architecture/adr-024-coin-metadata","path":"/v0.50/build/architecture/adr-024-coin-metadata","sidebar":"buildSidebar"},{"id":"build/architecture/adr-027-deterministic-protobuf-serialization","path":"/v0.50/build/architecture/adr-027-deterministic-protobuf-serialization","sidebar":"buildSidebar"},{"id":"build/architecture/adr-028-public-key-addresses","path":"/v0.50/build/architecture/adr-028-public-key-addresses","sidebar":"buildSidebar"},{"id":"build/architecture/adr-029-fee-grant-module","path":"/v0.50/build/architecture/adr-029-fee-grant-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-030-authz-module","path":"/v0.50/build/architecture/adr-030-authz-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-031-msg-service","path":"/v0.50/build/architecture/adr-031-msg-service","sidebar":"buildSidebar"},{"id":"build/architecture/adr-032-typed-events","path":"/v0.50/build/architecture/adr-032-typed-events","sidebar":"buildSidebar"},{"id":"build/architecture/adr-033-protobuf-inter-module-comm","path":"/v0.50/build/architecture/adr-033-protobuf-inter-module-comm","sidebar":"buildSidebar"},{"id":"build/architecture/adr-034-account-rekeying","path":"/v0.50/build/architecture/adr-034-account-rekeying","sidebar":"buildSidebar"},{"id":"build/architecture/adr-035-rosetta-api-support","path":"/v0.50/build/architecture/adr-035-rosetta-api-support","sidebar":"buildSidebar"},{"id":"build/architecture/adr-036-arbitrary-signature","path":"/v0.50/build/architecture/adr-036-arbitrary-signature","sidebar":"buildSidebar"},{"id":"build/architecture/adr-037-gov-split-vote","path":"/v0.50/build/architecture/adr-037-gov-split-vote","sidebar":"buildSidebar"},{"id":"build/architecture/adr-038-state-listening","path":"/v0.50/build/architecture/adr-038-state-listening","sidebar":"buildSidebar"},{"id":"build/architecture/adr-039-epoched-staking","path":"/v0.50/build/architecture/adr-039-epoched-staking","sidebar":"buildSidebar"},{"id":"build/architecture/adr-040-storage-and-smt-state-commitments","path":"/v0.50/build/architecture/adr-040-storage-and-smt-state-commitments","sidebar":"buildSidebar"},{"id":"build/architecture/adr-041-in-place-store-migrations","path":"/v0.50/build/architecture/adr-041-in-place-store-migrations","sidebar":"buildSidebar"},{"id":"build/architecture/adr-042-group-module","path":"/v0.50/build/architecture/adr-042-group-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-043-nft-module","path":"/v0.50/build/architecture/adr-043-nft-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-044-protobuf-updates-guidelines","path":"/v0.50/build/architecture/adr-044-protobuf-updates-guidelines","sidebar":"buildSidebar"},{"id":"build/architecture/adr-045-check-delivertx-middlewares","path":"/v0.50/build/architecture/adr-045-check-delivertx-middlewares","sidebar":"buildSidebar"},{"id":"build/architecture/adr-046-module-params","path":"/v0.50/build/architecture/adr-046-module-params","sidebar":"buildSidebar"},{"id":"build/architecture/adr-047-extend-upgrade-plan","path":"/v0.50/build/architecture/adr-047-extend-upgrade-plan","sidebar":"buildSidebar"},{"id":"build/architecture/adr-048-consensus-fees","path":"/v0.50/build/architecture/adr-048-consensus-fees","sidebar":"buildSidebar"},{"id":"build/architecture/adr-049-state-sync-hooks","path":"/v0.50/build/architecture/adr-049-state-sync-hooks","sidebar":"buildSidebar"},{"id":"build/architecture/adr-050-sign-mode-textual","path":"/v0.50/build/architecture/adr-050-sign-mode-textual","sidebar":"buildSidebar"},{"id":"build/architecture/adr-050-sign-mode-textual-annex1","path":"/v0.50/build/architecture/adr-050-sign-mode-textual-annex1","sidebar":"buildSidebar"},{"id":"build/architecture/adr-050-sign-mode-textual-annex2","path":"/v0.50/build/architecture/adr-050-sign-mode-textual-annex2","sidebar":"buildSidebar"},{"id":"build/architecture/adr-053-go-module-refactoring","path":"/v0.50/build/architecture/adr-053-go-module-refactoring","sidebar":"buildSidebar"},{"id":"build/architecture/adr-054-semver-compatible-modules","path":"/v0.50/build/architecture/adr-054-semver-compatible-modules","sidebar":"buildSidebar"},{"id":"build/architecture/adr-055-orm","path":"/v0.50/build/architecture/adr-055-orm","sidebar":"buildSidebar"},{"id":"build/architecture/adr-057-app-wiring","path":"/v0.50/build/architecture/adr-057-app-wiring","sidebar":"buildSidebar"},{"id":"build/architecture/adr-058-auto-generated-cli","path":"/v0.50/build/architecture/adr-058-auto-generated-cli","sidebar":"buildSidebar"},{"id":"build/architecture/adr-059-test-scopes","path":"/v0.50/build/architecture/adr-059-test-scopes","sidebar":"buildSidebar"},{"id":"build/architecture/adr-060-abci-1.0","path":"/v0.50/build/architecture/adr-060-abci-1.0","sidebar":"buildSidebar"},{"id":"build/architecture/adr-061-liquid-staking","path":"/v0.50/build/architecture/adr-061-liquid-staking","sidebar":"buildSidebar"},{"id":"build/architecture/adr-062-collections-state-layer","path":"/v0.50/build/architecture/adr-062-collections-state-layer","sidebar":"buildSidebar"},{"id":"build/architecture/adr-063-core-module-api","path":"/v0.50/build/architecture/adr-063-core-module-api","sidebar":"buildSidebar"},{"id":"build/architecture/adr-064-abci-2.0","path":"/v0.50/build/architecture/adr-064-abci-2.0","sidebar":"buildSidebar"},{"id":"build/architecture/adr-065-store-v2","path":"/v0.50/build/architecture/adr-065-store-v2","sidebar":"buildSidebar"},{"id":"build/architecture/adr-068-preblock","path":"/v0.50/build/architecture/adr-068-preblock","sidebar":"buildSidebar"},{"id":"build/architecture/adr-070-unordered-account","path":"/v0.50/build/architecture/adr-070-unordered-account","sidebar":"buildSidebar"},{"id":"build/architecture/adr-076-tx-malleability","path":"/v0.50/build/architecture/adr-076-tx-malleability","sidebar":"buildSidebar"},{"id":"build/architecture/adr-template","path":"/v0.50/build/architecture/adr-template","sidebar":"buildSidebar"},{"id":"build/architecture/PROCESS","path":"/v0.50/build/architecture/PROCESS","sidebar":"buildSidebar"},{"id":"build/architecture/README","path":"/v0.50/build/architecture/","sidebar":"buildSidebar"},{"id":"build/build","path":"/v0.50/build/","sidebar":"buildSidebar"},{"id":"build/building-apps/app-go","path":"/v0.50/build/building-apps/app-go","sidebar":"buildSidebar"},{"id":"build/building-apps/app-go-v2","path":"/v0.50/build/building-apps/app-go-v2","sidebar":"buildSidebar"},{"id":"build/building-apps/app-mempool","path":"/v0.50/build/building-apps/app-mempool","sidebar":"buildSidebar"},{"id":"build/building-apps/app-testnet","path":"/v0.50/build/building-apps/app-testnet","sidebar":"buildSidebar"},{"id":"build/building-apps/app-upgrade","path":"/v0.50/build/building-apps/app-upgrade","sidebar":"buildSidebar"},{"id":"build/building-apps/vote-extensions","path":"/v0.50/build/building-apps/vote-extensions","sidebar":"buildSidebar"},{"id":"build/building-modules/beginblock-endblock","path":"/v0.50/build/building-modules/beginblock-endblock","sidebar":"buildSidebar"},{"id":"build/building-modules/depinject","path":"/v0.50/build/building-modules/depinject","sidebar":"buildSidebar"},{"id":"build/building-modules/errors","path":"/v0.50/build/building-modules/errors","sidebar":"buildSidebar"},{"id":"build/building-modules/genesis","path":"/v0.50/build/building-modules/genesis","sidebar":"buildSidebar"},{"id":"build/building-modules/intro","path":"/v0.50/build/building-modules/intro","sidebar":"buildSidebar"},{"id":"build/building-modules/invariants","path":"/v0.50/build/building-modules/invariants","sidebar":"buildSidebar"},{"id":"build/building-modules/keeper","path":"/v0.50/build/building-modules/keeper","sidebar":"buildSidebar"},{"id":"build/building-modules/messages-and-queries","path":"/v0.50/build/building-modules/messages-and-queries","sidebar":"buildSidebar"},{"id":"build/building-modules/module-interfaces","path":"/v0.50/build/building-modules/module-interfaces","sidebar":"buildSidebar"},{"id":"build/building-modules/module-manager","path":"/v0.50/build/building-modules/module-manager","sidebar":"buildSidebar"},{"id":"build/building-modules/msg-services","path":"/v0.50/build/building-modules/msg-services","sidebar":"buildSidebar"},{"id":"build/building-modules/preblock","path":"/v0.50/build/building-modules/preblock","sidebar":"buildSidebar"},{"id":"build/building-modules/protobuf-annotations","path":"/v0.50/build/building-modules/protobuf-annotations","sidebar":"buildSidebar"},{"id":"build/building-modules/query-services","path":"/v0.50/build/building-modules/query-services","sidebar":"buildSidebar"},{"id":"build/building-modules/simulator","path":"/v0.50/build/building-modules/simulator","sidebar":"buildSidebar"},{"id":"build/building-modules/structure","path":"/v0.50/build/building-modules/structure","sidebar":"buildSidebar"},{"id":"build/building-modules/testing","path":"/v0.50/build/building-modules/testing","sidebar":"buildSidebar"},{"id":"build/building-modules/upgrade","path":"/v0.50/build/building-modules/upgrade","sidebar":"buildSidebar"},{"id":"build/migrations/intro","path":"/v0.50/build/migrations/intro","sidebar":"buildSidebar"},{"id":"build/migrations/upgrade-guide","path":"/v0.50/build/migrations/upgrade-guide","sidebar":"buildSidebar"},{"id":"build/migrations/upgrade-reference","path":"/v0.50/build/migrations/upgrade-reference","sidebar":"buildSidebar"},{"id":"build/migrations/upgrading","path":"/v0.50/build/migrations/upgrading","sidebar":"buildSidebar"},{"id":"build/modules/auth/README","path":"/v0.50/build/modules/auth/","sidebar":"buildSidebar"},{"id":"build/modules/auth/tx","path":"/v0.50/build/modules/auth/tx","sidebar":"buildSidebar"},{"id":"build/modules/auth/vesting","path":"/v0.50/build/modules/auth/vesting","sidebar":"buildSidebar"},{"id":"build/modules/authz/README","path":"/v0.50/build/modules/authz/","sidebar":"buildSidebar"},{"id":"build/modules/bank/README","path":"/v0.50/build/modules/bank/","sidebar":"buildSidebar"},{"id":"build/modules/circuit/README","path":"/v0.50/build/modules/circuit/","sidebar":"buildSidebar"},{"id":"build/modules/consensus/README","path":"/v0.50/build/modules/consensus/","sidebar":"buildSidebar"},{"id":"build/modules/crisis/README","path":"/v0.50/build/modules/crisis/","sidebar":"buildSidebar"},{"id":"build/modules/distribution/README","path":"/v0.50/build/modules/distribution/","sidebar":"buildSidebar"},{"id":"build/modules/epochs/README","path":"/v0.50/build/modules/epochs/","sidebar":"buildSidebar"},{"id":"build/modules/evidence/README","path":"/v0.50/build/modules/evidence/","sidebar":"buildSidebar"},{"id":"build/modules/feegrant/README","path":"/v0.50/build/modules/feegrant/","sidebar":"buildSidebar"},{"id":"build/modules/genutil/README","path":"/v0.50/build/modules/genutil/","sidebar":"buildSidebar"},{"id":"build/modules/gov/README","path":"/v0.50/build/modules/gov/","sidebar":"buildSidebar"},{"id":"build/modules/group/README","path":"/v0.50/build/modules/group/","sidebar":"buildSidebar"},{"id":"build/modules/mint/README","path":"/v0.50/build/modules/mint/","sidebar":"buildSidebar"},{"id":"build/modules/nft/README","path":"/v0.50/build/modules/nft/","sidebar":"buildSidebar"},{"id":"build/modules/params/README","path":"/v0.50/build/modules/params/","sidebar":"buildSidebar"},{"id":"build/modules/protocolpool/README","path":"/v0.50/build/modules/protocolpool/","sidebar":"buildSidebar"},{"id":"build/modules/README","path":"/v0.50/build/modules/","sidebar":"buildSidebar"},{"id":"build/modules/slashing/README","path":"/v0.50/build/modules/slashing/","sidebar":"buildSidebar"},{"id":"build/modules/staking/README","path":"/v0.50/build/modules/staking/","sidebar":"buildSidebar"},{"id":"build/modules/upgrade/README","path":"/v0.50/build/modules/upgrade/","sidebar":"buildSidebar"},{"id":"build/packages/collections","path":"/v0.50/build/packages/collections","sidebar":"buildSidebar"},{"id":"build/packages/depinject","path":"/v0.50/build/packages/depinject","sidebar":"buildSidebar"},{"id":"build/packages/README","path":"/v0.50/build/packages/","sidebar":"buildSidebar"},{"id":"build/rfc/PROCESS","path":"/v0.50/build/rfc/PROCESS","sidebar":"buildSidebar"},{"id":"build/rfc/README","path":"/v0.50/build/rfc/","sidebar":"buildSidebar"},{"id":"build/rfc/rfc-001-tx-validation","path":"/v0.50/build/rfc/rfc-001-tx-validation","sidebar":"buildSidebar"},{"id":"build/rfc/rfc-template","path":"/v0.50/build/rfc/rfc-template","sidebar":"buildSidebar"},{"id":"build/rfc/rfc/PROCESS","path":"/v0.50/build/rfc/rfc/PROCESS","sidebar":"buildSidebar"},{"id":"build/rfc/rfc/README","path":"/v0.50/build/rfc/rfc/","sidebar":"buildSidebar"},{"id":"build/rfc/rfc/rfc-001-tx-validation","path":"/v0.50/build/rfc/rfc/rfc-001-tx-validation","sidebar":"buildSidebar"},{"id":"build/rfc/rfc/rfc-template","path":"/v0.50/build/rfc/rfc/rfc-template","sidebar":"buildSidebar"},{"id":"build/spec/addresses/bech32","path":"/v0.50/build/spec/addresses/bech32","sidebar":"buildSidebar"},{"id":"build/spec/addresses/README","path":"/v0.50/build/spec/addresses/","sidebar":"buildSidebar"},{"id":"build/spec/README","path":"/v0.50/build/spec/","sidebar":"buildSidebar"},{"id":"build/spec/SPEC_MODULE","path":"/v0.50/build/spec/SPEC_MODULE","sidebar":"buildSidebar"},{"id":"build/spec/SPEC_STANDARD","path":"/v0.50/build/spec/SPEC_STANDARD","sidebar":"buildSidebar"},{"id":"build/spec/store/interblock-cache","path":"/v0.50/build/spec/store/interblock-cache","sidebar":"buildSidebar"},{"id":"build/spec/store/README","path":"/v0.50/build/spec/store/","sidebar":"buildSidebar"},{"id":"build/tooling/confix","path":"/v0.50/build/tooling/confix","sidebar":"buildSidebar"},{"id":"build/tooling/cosmovisor","path":"/v0.50/build/tooling/cosmovisor","sidebar":"buildSidebar"},{"id":"build/tooling/hubl","path":"/v0.50/build/tooling/hubl","sidebar":"buildSidebar"},{"id":"build/tooling/protobuf","path":"/v0.50/build/tooling/protobuf","sidebar":"buildSidebar"},{"id":"build/tooling/README","path":"/v0.50/build/tooling/","sidebar":"buildSidebar"},{"id":"learn/advanced/autocli","path":"/v0.50/learn/advanced/autocli","sidebar":"learnSidebar"},{"id":"learn/advanced/baseapp","path":"/v0.50/learn/advanced/baseapp","sidebar":"learnSidebar"},{"id":"learn/advanced/cli","path":"/v0.50/learn/advanced/cli","sidebar":"learnSidebar"},{"id":"learn/advanced/config","path":"/v0.50/learn/advanced/config","sidebar":"learnSidebar"},{"id":"learn/advanced/context","path":"/v0.50/learn/advanced/context","sidebar":"learnSidebar"},{"id":"learn/advanced/encoding","path":"/v0.50/learn/advanced/encoding","sidebar":"learnSidebar"},{"id":"learn/advanced/events","path":"/v0.50/learn/advanced/events","sidebar":"learnSidebar"},{"id":"learn/advanced/grpc_rest","path":"/v0.50/learn/advanced/grpc_rest","sidebar":"learnSidebar"},{"id":"learn/advanced/node","path":"/v0.50/learn/advanced/node","sidebar":"learnSidebar"},{"id":"learn/advanced/ocap","path":"/v0.50/learn/advanced/ocap","sidebar":"learnSidebar"},{"id":"learn/advanced/proto-docs","path":"/v0.50/learn/advanced/proto-docs","sidebar":"learnSidebar"},{"id":"learn/advanced/runtx_middleware","path":"/v0.50/learn/advanced/runtx_middleware","sidebar":"learnSidebar"},{"id":"learn/advanced/simulation","path":"/v0.50/learn/advanced/simulation","sidebar":"learnSidebar"},{"id":"learn/advanced/store","path":"/v0.50/learn/advanced/store","sidebar":"learnSidebar"},{"id":"learn/advanced/telemetry","path":"/v0.50/learn/advanced/telemetry","sidebar":"learnSidebar"},{"id":"learn/advanced/transactions","path":"/v0.50/learn/advanced/transactions","sidebar":"learnSidebar"},{"id":"learn/advanced/upgrade","path":"/v0.50/learn/advanced/upgrade","sidebar":"learnSidebar"},{"id":"learn/beginner/accounts","path":"/v0.50/learn/beginner/accounts","sidebar":"learnSidebar"},{"id":"learn/beginner/app-anatomy","path":"/v0.50/learn/beginner/app-anatomy","sidebar":"learnSidebar"},{"id":"learn/beginner/gas-fees","path":"/v0.50/learn/beginner/gas-fees","sidebar":"learnSidebar"},{"id":"learn/beginner/query-lifecycle","path":"/v0.50/learn/beginner/query-lifecycle","sidebar":"learnSidebar"},{"id":"learn/beginner/tx-lifecycle","path":"/v0.50/learn/beginner/tx-lifecycle","sidebar":"learnSidebar"},{"id":"learn/intro/overview","path":"/v0.50/learn/intro/overview","sidebar":"learnSidebar"},{"id":"learn/intro/sdk-app-architecture","path":"/v0.50/learn/intro/sdk-app-architecture","sidebar":"learnSidebar"},{"id":"learn/intro/sdk-design","path":"/v0.50/learn/intro/sdk-design","sidebar":"learnSidebar"},{"id":"learn/intro/why-app-specific","path":"/v0.50/learn/intro/why-app-specific","sidebar":"learnSidebar"},{"id":"learn/learn","path":"/v0.50/learn/","sidebar":"learnSidebar"},{"id":"tutorials/transactions/building-a-transaction","path":"/v0.50/tutorials/transactions/building-a-transaction","sidebar":"tutorialsSidebar"},{"id":"tutorials/tutorials","path":"/v0.50/tutorials/","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/auction-frontrunning/demo-of-mitigating-front-running","path":"/v0.50/tutorials/vote-extensions/auction-frontrunning/demo-of-mitigating-front-running","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/auction-frontrunning/getting-started","path":"/v0.50/tutorials/vote-extensions/auction-frontrunning/getting-started","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extensions","path":"/v0.50/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extensions","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extesions","path":"/v0.50/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extesions","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/auction-frontrunning/understanding-frontrunning","path":"/v0.50/tutorials/vote-extensions/auction-frontrunning/understanding-frontrunning","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/oracle/getting-started","path":"/v0.50/tutorials/vote-extensions/oracle/getting-started","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/oracle/implementing-vote-extensions","path":"/v0.50/tutorials/vote-extensions/oracle/implementing-vote-extensions","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/oracle/testing-oracle","path":"/v0.50/tutorials/vote-extensions/oracle/testing-oracle","sidebar":"tutorialsSidebar"},{"id":"tutorials/vote-extensions/oracle/what-is-an-oracle","path":"/v0.50/tutorials/vote-extensions/oracle/what-is-an-oracle","sidebar":"tutorialsSidebar"},{"id":"user/run-node/interact-node","path":"/v0.50/user/run-node/interact-node","sidebar":"userSidebar"},{"id":"user/run-node/keyring","path":"/v0.50/user/run-node/keyring","sidebar":"userSidebar"},{"id":"user/run-node/rosetta","path":"/v0.50/user/run-node/rosetta","sidebar":"userSidebar"},{"id":"user/run-node/run-node","path":"/v0.50/user/run-node/run-node","sidebar":"userSidebar"},{"id":"user/run-node/run-production","path":"/v0.50/user/run-node/run-production","sidebar":"userSidebar"},{"id":"user/run-node/run-testnet","path":"/v0.50/user/run-node/run-testnet","sidebar":"userSidebar"},{"id":"user/run-node/txs","path":"/v0.50/user/run-node/txs","sidebar":"userSidebar"},{"id":"user/user","path":"/v0.50/user/","sidebar":"userSidebar"}],"draftIds":[],"sidebars":{"learnSidebar":{"link":{"path":"/v0.50/learn/","label":"version-0.5/learn/learn"}},"buildSidebar":{"link":{"path":"/v0.50/build/","label":"version-0.5/build/build"}},"userSidebar":{"link":{"path":"/v0.50/user/run-node/keyring","label":"version-0.5/user/run-node/keyring"}},"tutorialsSidebar":{"link":{"path":"/v0.50/tutorials/","label":"version-0.5/tutorials/tutorials"}}}},{"name":"0.47","label":"v0.47","isLast":false,"path":"/v0.47","mainDocId":"learn/learn","docs":[{"id":"build/architecture/adr-002-docs-structure","path":"/v0.47/build/architecture/adr-002-docs-structure","sidebar":"buildSidebar"},{"id":"build/architecture/adr-003-dynamic-capability-store","path":"/v0.47/build/architecture/adr-003-dynamic-capability-store","sidebar":"buildSidebar"},{"id":"build/architecture/adr-004-split-denomination-keys","path":"/v0.47/build/architecture/adr-004-split-denomination-keys","sidebar":"buildSidebar"},{"id":"build/architecture/adr-006-secret-store-replacement","path":"/v0.47/build/architecture/adr-006-secret-store-replacement","sidebar":"buildSidebar"},{"id":"build/architecture/adr-007-specialization-groups","path":"/v0.47/build/architecture/adr-007-specialization-groups","sidebar":"buildSidebar"},{"id":"build/architecture/adr-008-dCERT-group","path":"/v0.47/build/architecture/adr-008-dCERT-group","sidebar":"buildSidebar"},{"id":"build/architecture/adr-009-evidence-module","path":"/v0.47/build/architecture/adr-009-evidence-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-010-modular-antehandler","path":"/v0.47/build/architecture/adr-010-modular-antehandler","sidebar":"buildSidebar"},{"id":"build/architecture/adr-011-generalize-genesis-accounts","path":"/v0.47/build/architecture/adr-011-generalize-genesis-accounts","sidebar":"buildSidebar"},{"id":"build/architecture/adr-012-state-accessors","path":"/v0.47/build/architecture/adr-012-state-accessors","sidebar":"buildSidebar"},{"id":"build/architecture/adr-013-metrics","path":"/v0.47/build/architecture/adr-013-metrics","sidebar":"buildSidebar"},{"id":"build/architecture/adr-014-proportional-slashing","path":"/v0.47/build/architecture/adr-014-proportional-slashing","sidebar":"buildSidebar"},{"id":"build/architecture/adr-016-validator-consensus-key-rotation","path":"/v0.47/build/architecture/adr-016-validator-consensus-key-rotation","sidebar":"buildSidebar"},{"id":"build/architecture/adr-017-historical-header-module","path":"/v0.47/build/architecture/adr-017-historical-header-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-018-extendable-voting-period","path":"/v0.47/build/architecture/adr-018-extendable-voting-period","sidebar":"buildSidebar"},{"id":"build/architecture/adr-019-protobuf-state-encoding","path":"/v0.47/build/architecture/adr-019-protobuf-state-encoding","sidebar":"buildSidebar"},{"id":"build/architecture/adr-020-protobuf-transaction-encoding","path":"/v0.47/build/architecture/adr-020-protobuf-transaction-encoding","sidebar":"buildSidebar"},{"id":"build/architecture/adr-021-protobuf-query-encoding","path":"/v0.47/build/architecture/adr-021-protobuf-query-encoding","sidebar":"buildSidebar"},{"id":"build/architecture/adr-022-custom-panic-handling","path":"/v0.47/build/architecture/adr-022-custom-panic-handling","sidebar":"buildSidebar"},{"id":"build/architecture/adr-023-protobuf-naming","path":"/v0.47/build/architecture/adr-023-protobuf-naming","sidebar":"buildSidebar"},{"id":"build/architecture/adr-024-coin-metadata","path":"/v0.47/build/architecture/adr-024-coin-metadata","sidebar":"buildSidebar"},{"id":"build/architecture/adr-027-deterministic-protobuf-serialization","path":"/v0.47/build/architecture/adr-027-deterministic-protobuf-serialization","sidebar":"buildSidebar"},{"id":"build/architecture/adr-028-public-key-addresses","path":"/v0.47/build/architecture/adr-028-public-key-addresses","sidebar":"buildSidebar"},{"id":"build/architecture/adr-029-fee-grant-module","path":"/v0.47/build/architecture/adr-029-fee-grant-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-030-authz-module","path":"/v0.47/build/architecture/adr-030-authz-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-031-msg-service","path":"/v0.47/build/architecture/adr-031-msg-service","sidebar":"buildSidebar"},{"id":"build/architecture/adr-032-typed-events","path":"/v0.47/build/architecture/adr-032-typed-events","sidebar":"buildSidebar"},{"id":"build/architecture/adr-033-protobuf-inter-module-comm","path":"/v0.47/build/architecture/adr-033-protobuf-inter-module-comm","sidebar":"buildSidebar"},{"id":"build/architecture/adr-034-account-rekeying","path":"/v0.47/build/architecture/adr-034-account-rekeying","sidebar":"buildSidebar"},{"id":"build/architecture/adr-035-rosetta-api-support","path":"/v0.47/build/architecture/adr-035-rosetta-api-support","sidebar":"buildSidebar"},{"id":"build/architecture/adr-036-arbitrary-signature","path":"/v0.47/build/architecture/adr-036-arbitrary-signature","sidebar":"buildSidebar"},{"id":"build/architecture/adr-037-gov-split-vote","path":"/v0.47/build/architecture/adr-037-gov-split-vote","sidebar":"buildSidebar"},{"id":"build/architecture/adr-038-state-listening","path":"/v0.47/build/architecture/adr-038-state-listening","sidebar":"buildSidebar"},{"id":"build/architecture/adr-039-epoched-staking","path":"/v0.47/build/architecture/adr-039-epoched-staking","sidebar":"buildSidebar"},{"id":"build/architecture/adr-040-storage-and-smt-state-commitments","path":"/v0.47/build/architecture/adr-040-storage-and-smt-state-commitments","sidebar":"buildSidebar"},{"id":"build/architecture/adr-041-in-place-store-migrations","path":"/v0.47/build/architecture/adr-041-in-place-store-migrations","sidebar":"buildSidebar"},{"id":"build/architecture/adr-042-group-module","path":"/v0.47/build/architecture/adr-042-group-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-043-nft-module","path":"/v0.47/build/architecture/adr-043-nft-module","sidebar":"buildSidebar"},{"id":"build/architecture/adr-044-protobuf-updates-guidelines","path":"/v0.47/build/architecture/adr-044-protobuf-updates-guidelines","sidebar":"buildSidebar"},{"id":"build/architecture/adr-045-check-delivertx-middlewares","path":"/v0.47/build/architecture/adr-045-check-delivertx-middlewares","sidebar":"buildSidebar"},{"id":"build/architecture/adr-046-module-params","path":"/v0.47/build/architecture/adr-046-module-params","sidebar":"buildSidebar"},{"id":"build/architecture/adr-047-extend-upgrade-plan","path":"/v0.47/build/architecture/adr-047-extend-upgrade-plan","sidebar":"buildSidebar"},{"id":"build/architecture/adr-048-consensus-fees","path":"/v0.47/build/architecture/adr-048-consensus-fees","sidebar":"buildSidebar"},{"id":"build/architecture/adr-049-state-sync-hooks","path":"/v0.47/build/architecture/adr-049-state-sync-hooks","sidebar":"buildSidebar"},{"id":"build/architecture/adr-050-sign-mode-textual","path":"/v0.47/build/architecture/adr-050-sign-mode-textual","sidebar":"buildSidebar"},{"id":"build/architecture/adr-050-sign-mode-textual-annex1","path":"/v0.47/build/architecture/adr-050-sign-mode-textual-annex1","sidebar":"buildSidebar"},{"id":"build/architecture/adr-050-sign-mode-textual-annex2","path":"/v0.47/build/architecture/adr-050-sign-mode-textual-annex2","sidebar":"buildSidebar"},{"id":"build/architecture/adr-053-go-module-refactoring","path":"/v0.47/build/architecture/adr-053-go-module-refactoring","sidebar":"buildSidebar"},{"id":"build/architecture/adr-054-semver-compatible-modules","path":"/v0.47/build/architecture/adr-054-semver-compatible-modules","sidebar":"buildSidebar"},{"id":"build/architecture/adr-055-orm","path":"/v0.47/build/architecture/adr-055-orm","sidebar":"buildSidebar"},{"id":"build/architecture/adr-057-app-wiring","path":"/v0.47/build/architecture/adr-057-app-wiring","sidebar":"buildSidebar"},{"id":"build/architecture/adr-058-auto-generated-cli","path":"/v0.47/build/architecture/adr-058-auto-generated-cli","sidebar":"buildSidebar"},{"id":"build/architecture/adr-059-test-scopes","path":"/v0.47/build/architecture/adr-059-test-scopes","sidebar":"buildSidebar"},{"id":"build/architecture/adr-060-abci-1.0","path":"/v0.47/build/architecture/adr-060-abci-1.0","sidebar":"buildSidebar"},{"id":"build/architecture/adr-061-liquid-staking","path":"/v0.47/build/architecture/adr-061-liquid-staking","sidebar":"buildSidebar"},{"id":"build/architecture/adr-062-collections-state-layer","path":"/v0.47/build/architecture/adr-062-collections-state-layer","sidebar":"buildSidebar"},{"id":"build/architecture/adr-063-core-module-api","path":"/v0.47/build/architecture/adr-063-core-module-api","sidebar":"buildSidebar"},{"id":"build/architecture/adr-064-abci-2.0","path":"/v0.47/build/architecture/adr-064-abci-2.0","sidebar":"buildSidebar"},{"id":"build/architecture/adr-065-store-v2","path":"/v0.47/build/architecture/adr-065-store-v2","sidebar":"buildSidebar"},{"id":"build/architecture/adr-template","path":"/v0.47/build/architecture/adr-template","sidebar":"buildSidebar"},{"id":"build/architecture/PROCESS","path":"/v0.47/build/architecture/PROCESS","sidebar":"buildSidebar"},{"id":"build/architecture/README","path":"/v0.47/build/architecture/","sidebar":"buildSidebar"},{"id":"build/build","path":"/v0.47/build/","sidebar":"buildSidebar"},{"id":"build/building-apps/app-go","path":"/v0.47/build/building-apps/app-go","sidebar":"buildSidebar"},{"id":"build/building-apps/app-go-v2","path":"/v0.47/build/building-apps/app-go-v2","sidebar":"buildSidebar"},{"id":"build/building-apps/app-mempool","path":"/v0.47/build/building-apps/app-mempool","sidebar":"buildSidebar"},{"id":"build/building-apps/app-upgrade","path":"/v0.47/build/building-apps/app-upgrade","sidebar":"buildSidebar"},{"id":"build/building-modules/beginblock-endblock","path":"/v0.47/build/building-modules/beginblock-endblock","sidebar":"buildSidebar"},{"id":"build/building-modules/depinject","path":"/v0.47/build/building-modules/depinject","sidebar":"buildSidebar"},{"id":"build/building-modules/errors","path":"/v0.47/build/building-modules/errors","sidebar":"buildSidebar"},{"id":"build/building-modules/genesis","path":"/v0.47/build/building-modules/genesis","sidebar":"buildSidebar"},{"id":"build/building-modules/intro","path":"/v0.47/build/building-modules/intro","sidebar":"buildSidebar"},{"id":"build/building-modules/invariants","path":"/v0.47/build/building-modules/invariants","sidebar":"buildSidebar"},{"id":"build/building-modules/keeper","path":"/v0.47/build/building-modules/keeper","sidebar":"buildSidebar"},{"id":"build/building-modules/messages-and-queries","path":"/v0.47/build/building-modules/messages-and-queries","sidebar":"buildSidebar"},{"id":"build/building-modules/module-interfaces","path":"/v0.47/build/building-modules/module-interfaces","sidebar":"buildSidebar"},{"id":"build/building-modules/module-manager","path":"/v0.47/build/building-modules/module-manager","sidebar":"buildSidebar"},{"id":"build/building-modules/msg-services","path":"/v0.47/build/building-modules/msg-services","sidebar":"buildSidebar"},{"id":"build/building-modules/query-services","path":"/v0.47/build/building-modules/query-services","sidebar":"buildSidebar"},{"id":"build/building-modules/simulator","path":"/v0.47/build/building-modules/simulator","sidebar":"buildSidebar"},{"id":"build/building-modules/structure","path":"/v0.47/build/building-modules/structure","sidebar":"buildSidebar"},{"id":"build/building-modules/testing","path":"/v0.47/build/building-modules/testing","sidebar":"buildSidebar"},{"id":"build/building-modules/upgrade","path":"/v0.47/build/building-modules/upgrade","sidebar":"buildSidebar"},{"id":"build/migrations/intro","path":"/v0.47/build/migrations/intro","sidebar":"buildSidebar"},{"id":"build/migrations/upgrading","path":"/v0.47/build/migrations/upgrading","sidebar":"buildSidebar"},{"id":"build/modules/accounts/accounts","path":"/v0.47/build/modules/accounts/","sidebar":"buildSidebar"},{"id":"build/modules/auth/README","path":"/v0.47/build/modules/auth/","sidebar":"buildSidebar"},{"id":"build/modules/auth/tx","path":"/v0.47/build/modules/auth/tx","sidebar":"buildSidebar"},{"id":"build/modules/auth/vesting","path":"/v0.47/build/modules/auth/vesting","sidebar":"buildSidebar"},{"id":"build/modules/authz/README","path":"/v0.47/build/modules/authz/","sidebar":"buildSidebar"},{"id":"build/modules/bank/README","path":"/v0.47/build/modules/bank/","sidebar":"buildSidebar"},{"id":"build/modules/circuit/README","path":"/v0.47/build/modules/circuit/","sidebar":"buildSidebar"},{"id":"build/modules/consensus/README","path":"/v0.47/build/modules/consensus/","sidebar":"buildSidebar"},{"id":"build/modules/crisis/README","path":"/v0.47/build/modules/crisis/","sidebar":"buildSidebar"},{"id":"build/modules/distribution/README","path":"/v0.47/build/modules/distribution/","sidebar":"buildSidebar"},{"id":"build/modules/evidence/README","path":"/v0.47/build/modules/evidence/","sidebar":"buildSidebar"},{"id":"build/modules/feegrant/README","path":"/v0.47/build/modules/feegrant/","sidebar":"buildSidebar"},{"id":"build/modules/genutil/README","path":"/v0.47/build/modules/genutil/","sidebar":"buildSidebar"},{"id":"build/modules/gov/README","path":"/v0.47/build/modules/gov/","sidebar":"buildSidebar"},{"id":"build/modules/group/README","path":"/v0.47/build/modules/group/","sidebar":"buildSidebar"},{"id":"build/modules/mint/README","path":"/v0.47/build/modules/mint/","sidebar":"buildSidebar"},{"id":"build/modules/nft/README","path":"/v0.47/build/modules/nft/","sidebar":"buildSidebar"},{"id":"build/modules/params/README","path":"/v0.47/build/modules/params/","sidebar":"buildSidebar"},{"id":"build/modules/README","path":"/v0.47/build/modules/","sidebar":"buildSidebar"},{"id":"build/modules/slashing/README","path":"/v0.47/build/modules/slashing/","sidebar":"buildSidebar"},{"id":"build/modules/staking/README","path":"/v0.47/build/modules/staking/","sidebar":"buildSidebar"},{"id":"build/modules/upgrade/README","path":"/v0.47/build/modules/upgrade/","sidebar":"buildSidebar"},{"id":"build/packages/collections","path":"/v0.47/build/packages/collections","sidebar":"buildSidebar"},{"id":"build/packages/depinject","path":"/v0.47/build/packages/depinject","sidebar":"buildSidebar"},{"id":"build/packages/orm","path":"/v0.47/build/packages/orm","sidebar":"buildSidebar"},{"id":"build/packages/README","path":"/v0.47/build/packages/","sidebar":"buildSidebar"},{"id":"build/rfc/PROCESS","path":"/v0.47/build/rfc/PROCESS","sidebar":"buildSidebar"},{"id":"build/rfc/README","path":"/v0.47/build/rfc/","sidebar":"buildSidebar"},{"id":"build/rfc/rfc-001-tx-validation","path":"/v0.47/build/rfc/rfc-001-tx-validation","sidebar":"buildSidebar"},{"id":"build/rfc/rfc-template","path":"/v0.47/build/rfc/rfc-template","sidebar":"buildSidebar"},{"id":"build/spec/addresses/bech32","path":"/v0.47/build/spec/addresses/bech32","sidebar":"buildSidebar"},{"id":"build/spec/addresses/README","path":"/v0.47/build/spec/addresses/","sidebar":"buildSidebar"},{"id":"build/spec/ics/ics-030-signed-messages","path":"/v0.47/build/spec/ics/ics-030-signed-messages","sidebar":"buildSidebar"},{"id":"build/spec/ics/README","path":"/v0.47/build/spec/ics/","sidebar":"buildSidebar"},{"id":"build/spec/SPEC_MODULE","path":"/v0.47/build/spec/SPEC_MODULE","sidebar":"buildSidebar"},{"id":"build/spec/SPEC_STANDARD","path":"/v0.47/build/spec/SPEC_STANDARD","sidebar":"buildSidebar"},{"id":"build/tooling/autocli","path":"/v0.47/build/tooling/autocli","sidebar":"buildSidebar"},{"id":"build/tooling/confix","path":"/v0.47/build/tooling/confix","sidebar":"buildSidebar"},{"id":"build/tooling/cosmovisor","path":"/v0.47/build/tooling/cosmovisor","sidebar":"buildSidebar"},{"id":"build/tooling/depinject","path":"/v0.47/build/tooling/depinject","sidebar":"buildSidebar"},{"id":"build/tooling/hubl","path":"/v0.47/build/tooling/hubl","sidebar":"buildSidebar"},{"id":"build/tooling/protobuf","path":"/v0.47/build/tooling/protobuf","sidebar":"buildSidebar"},{"id":"build/tooling/README","path":"/v0.47/build/tooling/","sidebar":"buildSidebar"},{"id":"learn/advanced/baseapp","path":"/v0.47/learn/advanced/baseapp","sidebar":"learnSidebar"},{"id":"learn/advanced/cli","path":"/v0.47/learn/advanced/cli","sidebar":"learnSidebar"},{"id":"learn/advanced/config","path":"/v0.47/learn/advanced/config","sidebar":"learnSidebar"},{"id":"learn/advanced/context","path":"/v0.47/learn/advanced/context","sidebar":"learnSidebar"},{"id":"learn/advanced/encoding","path":"/v0.47/learn/advanced/encoding","sidebar":"learnSidebar"},{"id":"learn/advanced/events","path":"/v0.47/learn/advanced/events","sidebar":"learnSidebar"},{"id":"learn/advanced/grpc_rest","path":"/v0.47/learn/advanced/grpc_rest","sidebar":"learnSidebar"},{"id":"learn/advanced/interblock-cache","path":"/v0.47/learn/advanced/interblock-cache","sidebar":"learnSidebar"},{"id":"learn/advanced/node","path":"/v0.47/learn/advanced/node","sidebar":"learnSidebar"},{"id":"learn/advanced/ocap","path":"/v0.47/learn/advanced/ocap","sidebar":"learnSidebar"},{"id":"learn/advanced/proto-docs","path":"/v0.47/learn/advanced/proto-docs","sidebar":"learnSidebar"},{"id":"learn/advanced/runtx_middleware","path":"/v0.47/learn/advanced/runtx_middleware","sidebar":"learnSidebar"},{"id":"learn/advanced/simulation","path":"/v0.47/learn/advanced/simulation","sidebar":"learnSidebar"},{"id":"learn/advanced/store","path":"/v0.47/learn/advanced/store","sidebar":"learnSidebar"},{"id":"learn/advanced/telemetry","path":"/v0.47/learn/advanced/telemetry","sidebar":"learnSidebar"},{"id":"learn/advanced/transactions","path":"/v0.47/learn/advanced/transactions","sidebar":"learnSidebar"},{"id":"learn/advanced/upgrade","path":"/v0.47/learn/advanced/upgrade","sidebar":"learnSidebar"},{"id":"learn/beginner/accounts","path":"/v0.47/learn/beginner/accounts","sidebar":"learnSidebar"},{"id":"learn/beginner/gas-fees","path":"/v0.47/learn/beginner/gas-fees","sidebar":"learnSidebar"},{"id":"learn/beginner/overview-app","path":"/v0.47/learn/beginner/overview-app","sidebar":"learnSidebar"},{"id":"learn/beginner/query-lifecycle","path":"/v0.47/learn/beginner/query-lifecycle","sidebar":"learnSidebar"},{"id":"learn/beginner/tx-lifecycle","path":"/v0.47/learn/beginner/tx-lifecycle","sidebar":"learnSidebar"},{"id":"learn/glossary","path":"/v0.47/learn/glossary","sidebar":"learnSidebar"},{"id":"learn/intro/overview","path":"/v0.47/learn/intro/overview","sidebar":"learnSidebar"},{"id":"learn/intro/sdk-app-architecture","path":"/v0.47/learn/intro/sdk-app-architecture","sidebar":"learnSidebar"},{"id":"learn/intro/sdk-design","path":"/v0.47/learn/intro/sdk-design","sidebar":"learnSidebar"},{"id":"learn/intro/why-app-specific","path":"/v0.47/learn/intro/why-app-specific","sidebar":"learnSidebar"},{"id":"learn/learn","path":"/v0.47/learn/","sidebar":"learnSidebar"},{"id":"user/run-node/interact-node","path":"/v0.47/user/run-node/interact-node","sidebar":"userSidebar"},{"id":"user/run-node/keyring","path":"/v0.47/user/run-node/keyring","sidebar":"userSidebar"},{"id":"user/run-node/multisig-guide","path":"/v0.47/user/run-node/multisig-guide","sidebar":"userSidebar"},{"id":"user/run-node/rosetta","path":"/v0.47/user/run-node/rosetta","sidebar":"userSidebar"},{"id":"user/run-node/run-node","path":"/v0.47/user/run-node/run-node","sidebar":"userSidebar"},{"id":"user/run-node/run-production","path":"/v0.47/user/run-node/run-production","sidebar":"userSidebar"},{"id":"user/run-node/run-testnet","path":"/v0.47/user/run-node/run-testnet","sidebar":"userSidebar"},{"id":"user/run-node/txs","path":"/v0.47/user/run-node/txs","sidebar":"userSidebar"},{"id":"user/user","path":"/v0.47/user/","sidebar":"userSidebar"},{"id":"validate/run-testnet","path":"/v0.47/validate/run-testnet"}],"draftIds":[],"sidebars":{"learnSidebar":{"link":{"path":"/v0.47/learn/","label":"version-0.47/learn/learn"}},"buildSidebar":{"link":{"path":"/v0.47/build/","label":"version-0.47/build/build"}},"userSidebar":{"link":{"path":"/v0.47/user/","label":"version-0.47/user/user"}}}}],"breadcrumbs":true}}}'),s=JSON.parse('{"defaultLocale":"en","locales":["en"],"path":"i18n","currentLocale":"en","localeConfigs":{"en":{"label":"English","direction":"ltr","htmlLang":"en","calendar":"gregory","path":"en"}}}');var r=n(57529);const d=JSON.parse('{"docusaurusVersion":"2.4.0","siteVersion":"1.0.0","pluginVersions":{"docusaurus-plugin-content-docs":{"type":"package","name":"@docusaurus/plugin-content-docs","version":"2.4.0"},"docusaurus-plugin-content-blog":{"type":"package","name":"@docusaurus/plugin-content-blog","version":"2.4.0"},"docusaurus-plugin-content-pages":{"type":"package","name":"@docusaurus/plugin-content-pages","version":"2.4.0"},"docusaurus-plugin-sitemap":{"type":"package","name":"@docusaurus/plugin-sitemap","version":"2.4.0"},"docusaurus-plugin-redoc":{"type":"package","name":"docusaurus-plugin-redoc","version":"1.6.0"},"docusaurus-theme-classic":{"type":"package","name":"@docusaurus/theme-classic","version":"2.4.0"},"docusaurus-theme-search-algolia":{"type":"package","name":"@docusaurus/theme-search-algolia","version":"2.4.0"},"docusaurus-theme-redoc":{"type":"package","name":"docusaurus-theme-redoc","version":"1.6.4"},"docusaurus-tailwindcss":{"type":"local"},"docusaurus-plugin-google-analytics":{"type":"package","name":"@docusaurus/plugin-google-analytics","version":"2.4.0"},"docusaurus-plugin-client-redirects":{"type":"package","name":"@docusaurus/plugin-client-redirects","version":"2.4.0"},"docusaurus-theme-github-codeblock":{"type":"package","name":"@you54f/theme-github-codeblock","version":"0.1.1"},"docusaurus-theme-mermaid":{"type":"package","name":"@docusaurus/theme-mermaid","version":"2.4.0"}}}'),p={siteConfig:i.default,siteMetadata:d,globalData:a,i18n:s,codeTranslations:r},l=o.createContext(p);function c(e){let{children:t}=e;return o.createElement(l.Provider,{value:p},t)}},44763:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var o=n(67294),i=n(10412),a=n(35742),s=n(18780),r=n(7452);function d(e){let{error:t,tryAgain:n}=e;return o.createElement("div",{style:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"flex-start",minHeight:"100vh",width:"100%",maxWidth:"80ch",fontSize:"20px",margin:"0 auto",padding:"1rem"}},o.createElement("h1",{style:{fontSize:"3rem"}},"This page crashed"),o.createElement("button",{type:"button",onClick:n,style:{margin:"1rem 0",fontSize:"2rem",cursor:"pointer",borderRadius:20,padding:"1rem"}},"Try again"),o.createElement(p,{error:t}))}function p(e){let{error:t}=e;const n=(0,s.getErrorCausalChain)(t).map((e=>e.message)).join("\n\nCause:\n");return o.createElement("p",{style:{whiteSpace:"pre-wrap"}},n)}function l(e){let{error:t,tryAgain:n}=e;return o.createElement(u,{fallback:()=>o.createElement(d,{error:t,tryAgain:n})},o.createElement(a.Z,null,o.createElement("title",null,"Page Error")),o.createElement(r.Z,null,o.createElement(d,{error:t,tryAgain:n})))}const c=e=>o.createElement(l,e);class u extends o.Component{constructor(e){super(e),this.state={error:null}}componentDidCatch(e){i.default.canUseDOM&&this.setState({error:e})}render(){const{children:e}=this.props,{error:t}=this.state;if(t){const e={error:t,tryAgain:()=>this.setState({error:null})};return(this.props.fallback??c)(e)}return e??null}}},10412:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});const o="undefined"!=typeof window&&"document"in window&&"createElement"in window.document,i={canUseDOM:o,canUseEventListeners:o&&("addEventListener"in window||"attachEvent"in window),canUseIntersectionObserver:o&&"IntersectionObserver"in window,canUseViewport:o&&"screen"in window}},35742:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var o=n(67294),i=n(70405);function a(e){return o.createElement(i.ql,e)}},39960:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var o=n(87462),i=n(67294),a=n(73727),s=n(18780),r=n(52263),d=n(13919),p=n(10412);const l=i.createContext({collectLink:()=>{}});var c=n(44996);function u(e,t){let{isNavLink:n,to:u,href:m,activeClassName:h,isActive:f,"data-noBrokenLinkCheck":y,autoAddBaseUrl:b=!0,...g}=e;const{siteConfig:{trailingSlash:v,baseUrl:_}}=(0,r.Z)(),{withBaseUrl:k}=(0,c.C)(),w=(0,i.useContext)(l),S=(0,i.useRef)(null);(0,i.useImperativeHandle)(t,(()=>S.current));const T=u||m;const E=(0,d.Z)(T),P=T?.replace("pathname://","");let x=void 0!==P?(R=P,b&&(e=>e.startsWith("/"))(R)?k(R):R):void 0;var R;x&&E&&(x=(0,s.applyTrailingSlash)(x,{trailingSlash:v,baseUrl:_}));const A=(0,i.useRef)(!1),I=n?a.OL:a.rU,O=p.default.canUseIntersectionObserver,U=(0,i.useRef)(),N=()=>{A.current||null==x||(window.docusaurus.preload(x),A.current=!0)};(0,i.useEffect)((()=>(!O&&E&&null!=x&&window.docusaurus.prefetch(x),()=>{O&&U.current&&U.current.disconnect()})),[U,x,O,E]);const L=x?.startsWith("#")??!1,D=!x||!E||L;return D||y||w.collectLink(x),D?i.createElement("a",(0,o.Z)({ref:S,href:x},T&&!E&&{target:"_blank",rel:"noopener noreferrer"},g)):i.createElement(I,(0,o.Z)({},g,{onMouseEnter:N,onTouchStart:N,innerRef:e=>{S.current=e,O&&e&&E&&(U.current=new window.IntersectionObserver((t=>{t.forEach((t=>{e===t.target&&(t.isIntersecting||t.intersectionRatio>0)&&(U.current.unobserve(e),U.current.disconnect(),null!=x&&window.docusaurus.prefetch(x))}))})),U.current.observe(e))},to:x},n&&{isActive:f,activeClassName:h}))}const m=i.forwardRef(u)},95999:(e,t,n)=>{"use strict";n.d(t,{Z:()=>d,I:()=>r});var o=n(67294);function i(e,t){const n=e.split(/(\{\w+\})/).map(((e,n)=>{if(n%2==1){const n=t?.[e.slice(1,-1)];if(void 0!==n)return n}return e}));return n.some((e=>(0,o.isValidElement)(e)))?n.map(((e,t)=>(0,o.isValidElement)(e)?o.cloneElement(e,{key:t}):e)).filter((e=>""!==e)):n.join("")}var a=n(57529);function s(e){let{id:t,message:n}=e;if(void 0===t&&void 0===n)throw new Error("Docusaurus translation declarations must have at least a translation id or a default translation message");return a[t??n]??n??t}function r(e,t){let{message:n,id:o}=e;return i(s({message:n,id:o}),t)}function d(e){let{children:t,id:n,values:a}=e;if(t&&"string"!=typeof t)throw console.warn("Illegal <Translate> children",t),new Error("The Docusaurus <Translate> component only accept simple string values");const r=s({message:t,id:n});return o.createElement(o.Fragment,null,i(r,a))}},29935:(e,t,n)=>{"use strict";n.d(t,{m:()=>o});const o="default"},13919:(e,t,n)=>{"use strict";function o(e){return/^(?:\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!o(e)}n.d(t,{Z:()=>i,b:()=>o})},44996:(e,t,n)=>{"use strict";n.d(t,{C:()=>s,Z:()=>r});var o=n(67294),i=n(52263),a=n(13919);function s(){const{siteConfig:{baseUrl:e,url:t}}=(0,i.Z)(),n=(0,o.useCallback)(((n,o)=>function(e,t,n,o){let{forcePrependBaseUrl:i=!1,absolute:s=!1}=void 0===o?{}:o;if(!n||n.startsWith("#")||(0,a.b)(n))return n;if(i)return t+n.replace(/^\//,"");if(n===t.replace(/\/$/,""))return t;const r=n.startsWith(t)?n:t+n.replace(/^\//,"");return s?e+r:r}(t,e,n,o)),[t,e]);return{withBaseUrl:n}}function r(e,t){void 0===t&&(t={});const{withBaseUrl:n}=s();return n(e,t)}},52263:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var o=n(67294),i=n(58940);function a(){return(0,o.useContext)(i._)}},28084:(e,t,n)=>{"use strict";n.d(t,{OD:()=>a,eZ:()=>s});var o=n(52263),i=n(29935);function a(e,t){void 0===t&&(t={});const n=function(){const{globalData:e}=(0,o.Z)();return e}()[e];if(!n&&t.failfast)throw new Error(`Docusaurus plugin global data not found for "${e}" plugin.`);return n}function s(e,t,n){void 0===t&&(t=i.m),void 0===n&&(n={});const o=a(e),s=o?.[t];if(!s&&n.failfast)throw new Error(`Docusaurus plugin global data not found for "${e}" plugin with id "${t}".`);return s}},72389:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var o=n(67294),i=n(98934);function a(){return(0,o.useContext)(i._)}},99670:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});const o=e=>"object"==typeof e&&!!e&&Object.keys(e).length>0;function i(e){const t={};return function e(n,i){Object.entries(n).forEach((n=>{let[a,s]=n;const r=i?`${i}.${a}`:a;o(s)?e(s,r):t[r]=s}))}(e),t}},30226:(e,t,n)=>{"use strict";n.d(t,{_:()=>i,z:()=>a});var o=n(67294);const i=o.createContext(null);function a(e){let{children:t,value:n}=e;const a=o.useContext(i),s=(0,o.useMemo)((()=>function(e){let{parent:t,value:n}=e;if(!t){if(!n)throw new Error("Unexpected: no Docusaurus route context found");if(!("plugin"in n))throw new Error("Unexpected: Docusaurus topmost route context has no `plugin` attribute");return n}const o={...t.data,...n?.data};return{plugin:t.plugin,data:o}}({parent:a,value:n})),[a,n]);return o.createElement(i.Provider,{value:s},t)}},94104:(e,t,n)=>{"use strict";n.d(t,{Iw:()=>f,gA:()=>c,WS:()=>u,_r:()=>p,Jo:()=>y,zh:()=>l,yW:()=>h,gB:()=>m});var o=n(16550),i=n(28084);const a=e=>e.versions.find((e=>e.isLast));function s(e,t){const n=a(e);return[...e.versions.filter((e=>e!==n)),n].find((e=>!!(0,o.LX)(t,{path:e.path,exact:!1,strict:!1})))}function r(e,t){const n=s(e,t),i=n?.docs.find((e=>!!(0,o.LX)(t,{path:e.path,exact:!0,strict:!1})));return{activeVersion:n,activeDoc:i,alternateDocVersions:i?function(t){const n={};return e.versions.forEach((e=>{e.docs.forEach((o=>{o.id===t&&(n[e.name]=o)}))})),n}(i.id):{}}}const d={},p=()=>(0,i.OD)("docusaurus-plugin-content-docs")??d,l=e=>(0,i.eZ)("docusaurus-plugin-content-docs",e,{failfast:!0});function c(e){void 0===e&&(e={});const t=p(),{pathname:n}=(0,o.TH)();return function(e,t,n){void 0===n&&(n={});const i=Object.entries(e).sort(((e,t)=>t[1].path.localeCompare(e[1].path))).find((e=>{let[,n]=e;return!!(0,o.LX)(t,{path:n.path,exact:!1,strict:!1})})),a=i?{pluginId:i[0],pluginData:i[1]}:void 0;if(!a&&n.failfast)throw new Error(`Can't find active docs plugin for "${t}" pathname, while it was expected to be found. Maybe you tried to use a docs feature that can only be used on a docs-related page? Existing docs plugin paths are: ${Object.values(e).map((e=>e.path)).join(", ")}`);return a}(t,n,e)}function u(e){void 0===e&&(e={});const t=c(e),{pathname:n}=(0,o.TH)();if(!t)return;return{activePlugin:t,activeVersion:s(t.pluginData,n)}}function m(e){return l(e).versions}function h(e){const t=l(e);return a(t)}function f(e){const t=l(e),{pathname:n}=(0,o.TH)();return r(t,n)}function y(e){const t=l(e),{pathname:n}=(0,o.TH)();return function(e,t){const n=a(e);return{latestDocSuggestion:r(e,t).alternateDocVersions[n.name],latestVersionSuggestion:n}}(t,n)}},74367:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={onRouteDidUpdate(e){let{location:t,previousLocation:n}=e;!n||t.pathname===n.pathname&&t.search===n.search&&t.hash===n.hash||(window.ga("set","page",t.pathname+t.search+t.hash),window.ga("send","pageview"))}}},18320:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var o=n(74865),i=n.n(o);i().configure({showSpinner:!1});const a={onRouteUpdate(e){let{location:t,previousLocation:n}=e;if(n&&t.pathname!==n.pathname){const e=window.setTimeout((()=>{i().start()}),200);return()=>window.clearTimeout(e)}},onRouteDidUpdate(){i().done()}}},3310:(e,t,n)=>{"use strict";n.r(t);var o=n(87410),i=n(36809);!function(e){const{themeConfig:{prism:t}}=i.default,{additionalLanguages:o}=t;globalThis.Prism=e,o.forEach((e=>{n(10692)(`./prism-${e}`)})),delete globalThis.Prism}(o.Z)},39471:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var o=n(67294);const i={iconExternalLink:"iconExternalLink_nPIU"};function a(e){let{width:t=13.5,height:n=13.5}=e;return o.createElement("svg",{width:t,height:n,"aria-hidden":"true",viewBox:"0 0 24 24",className:i.iconExternalLink},o.createElement("path",{fill:"currentColor",d:"M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z"}))}},7452:(e,t,n)=>{"use strict";n.d(t,{Z:()=>It});var o=n(67294),i=n(86010),a=n(44763),s=n(10833),r=n(87462),d=n(16550),p=n(95999),l=n(85936);const c="docusaurus_skipToContent_fallback";function u(e){e.setAttribute("tabindex","-1"),e.focus(),e.removeAttribute("tabindex")}function m(){const e=(0,o.useRef)(null),{action:t}=(0,d.k6)(),n=(0,o.useCallback)((e=>{e.preventDefault();const t=document.querySelector("main:first-of-type")??document.getElementById(c);t&&u(t)}),[]);return(0,l.S)((n=>{let{location:o}=n;e.current&&!o.hash&&"PUSH"===t&&u(e.current)})),{containerRef:e,onClick:n}}const h=(0,p.I)({id:"theme.common.skipToMainContent",description:"The skip to content label used for accessibility, allowing to rapidly navigate to main content with keyboard tab/enter navigation",message:"Skip to main content"});function f(e){const t=e.children??h,{containerRef:n,onClick:i}=m();return o.createElement("div",{ref:n,role:"region","aria-label":h},o.createElement("a",(0,r.Z)({},e,{href:`#${c}`,onClick:i}),t))}var y=n(35281),b=n(19727);const g={skipToContent:"skipToContent_fXgn"};function v(){return o.createElement(f,{className:g.skipToContent})}var _=n(86668),k=n(59689);function w(e){let{width:t=21,height:n=21,color:i="currentColor",strokeWidth:a=1.2,className:s,...d}=e;return o.createElement("svg",(0,r.Z)({viewBox:"0 0 15 15",width:t,height:n},d),o.createElement("g",{stroke:i,strokeWidth:a},o.createElement("path",{d:"M.75.75l13.5 13.5M14.25.75L.75 14.25"})))}const S={closeButton:"closeButton_CVFx"};function T(e){return o.createElement("button",(0,r.Z)({type:"button","aria-label":(0,p.I)({id:"theme.AnnouncementBar.closeButtonAriaLabel",message:"Close",description:"The ARIA label for close button of announcement bar"})},e,{className:(0,i.Z)("clean-btn close",S.closeButton,e.className)}),o.createElement(w,{width:14,height:14,strokeWidth:3.1}))}const E={content:"content_knG7"};function P(e){const{announcementBar:t}=(0,_.L)(),{content:n}=t;return o.createElement("div",(0,r.Z)({},e,{className:(0,i.Z)(E.content,e.className),dangerouslySetInnerHTML:{__html:n}}))}const x={announcementBar:"announcementBar_mb4j",announcementBarPlaceholder:"announcementBarPlaceholder_vyr4",announcementBarClose:"announcementBarClose_gvF7",announcementBarContent:"announcementBarContent_xLdY"};function R(){const{announcementBar:e}=(0,_.L)(),{isActive:t,close:n}=(0,k.nT)();if(!t)return null;const{backgroundColor:i,textColor:a,isCloseable:s}=e;return o.createElement("div",{className:x.announcementBar,style:{backgroundColor:i,color:a},role:"banner"},s&&o.createElement("div",{className:x.announcementBarPlaceholder}),o.createElement(P,{className:x.announcementBarContent}),s&&o.createElement(T,{onClick:n,className:x.announcementBarClose}))}var A=n(93163),I=n(12466);var O=n(902),U=n(13102);const N=o.createContext(null);function L(e){let{children:t}=e;const n=function(){const e=(0,A.e)(),t=(0,U.HY)(),[n,i]=(0,o.useState)(!1),a=null!==t.component,s=(0,O.D9)(a);return(0,o.useEffect)((()=>{a&&!s&&i(!0)}),[a,s]),(0,o.useEffect)((()=>{a?e.shown||i(!0):i(!1)}),[e.shown,a]),(0,o.useMemo)((()=>[n,i]),[n])}();return o.createElement(N.Provider,{value:n},t)}function D(e){if(e.component){const t=e.component;return o.createElement(t,e.props)}}function C(){const e=(0,o.useContext)(N);if(!e)throw new O.i6("NavbarSecondaryMenuDisplayProvider");const[t,n]=e,i=(0,o.useCallback)((()=>n(!1)),[n]),a=(0,U.HY)();return(0,o.useMemo)((()=>({shown:t,hide:i,content:D(a)})),[i,a,t])}function F(e){let{header:t,primaryMenu:n,secondaryMenu:a}=e;const{shown:s}=C();return o.createElement("div",{className:"navbar-sidebar"},t,o.createElement("div",{className:(0,i.Z)("navbar-sidebar__items",{"navbar-sidebar__items--show-secondary":s})},o.createElement("div",{className:"navbar-sidebar__item menu"},n),o.createElement("div",{className:"navbar-sidebar__item menu"},a)))}var q=n(92949),j=n(72389);function M(e){return o.createElement("svg",(0,r.Z)({viewBox:"0 0 24 24",width:24,height:24},e),o.createElement("path",{fill:"currentColor",d:"M12,9c1.65,0,3,1.35,3,3s-1.35,3-3,3s-3-1.35-3-3S10.35,9,12,9 M12,7c-2.76,0-5,2.24-5,5s2.24,5,5,5s5-2.24,5-5 S14.76,7,12,7L12,7z M2,13l2,0c0.55,0,1-0.45,1-1s-0.45-1-1-1l-2,0c-0.55,0-1,0.45-1,1S1.45,13,2,13z M20,13l2,0c0.55,0,1-0.45,1-1 s-0.45-1-1-1l-2,0c-0.55,0-1,0.45-1,1S19.45,13,20,13z M11,2v2c0,0.55,0.45,1,1,1s1-0.45,1-1V2c0-0.55-0.45-1-1-1S11,1.45,11,2z M11,20v2c0,0.55,0.45,1,1,1s1-0.45,1-1v-2c0-0.55-0.45-1-1-1C11.45,19,11,19.45,11,20z M5.99,4.58c-0.39-0.39-1.03-0.39-1.41,0 c-0.39,0.39-0.39,1.03,0,1.41l1.06,1.06c0.39,0.39,1.03,0.39,1.41,0s0.39-1.03,0-1.41L5.99,4.58z M18.36,16.95 c-0.39-0.39-1.03-0.39-1.41,0c-0.39,0.39-0.39,1.03,0,1.41l1.06,1.06c0.39,0.39,1.03,0.39,1.41,0c0.39-0.39,0.39-1.03,0-1.41 L18.36,16.95z M19.42,5.99c0.39-0.39,0.39-1.03,0-1.41c-0.39-0.39-1.03-0.39-1.41,0l-1.06,1.06c-0.39,0.39-0.39,1.03,0,1.41 s1.03,0.39,1.41,0L19.42,5.99z M7.05,18.36c0.39-0.39,0.39-1.03,0-1.41c-0.39-0.39-1.03-0.39-1.41,0l-1.06,1.06 c-0.39,0.39-0.39,1.03,0,1.41s1.03,0.39,1.41,0L7.05,18.36z"}))}function G(e){return o.createElement("svg",(0,r.Z)({viewBox:"0 0 24 24",width:24,height:24},e),o.createElement("path",{fill:"currentColor",d:"M9.37,5.51C9.19,6.15,9.1,6.82,9.1,7.5c0,4.08,3.32,7.4,7.4,7.4c0.68,0,1.35-0.09,1.99-0.27C17.45,17.19,14.93,19,12,19 c-3.86,0-7-3.14-7-7C5,9.07,6.81,6.55,9.37,5.51z M12,3c-4.97,0-9,4.03-9,9s4.03,9,9,9s9-4.03,9-9c0-0.46-0.04-0.92-0.1-1.36 c-0.98,1.37-2.58,2.26-4.4,2.26c-2.98,0-5.4-2.42-5.4-5.4c0-1.81,0.89-3.42,2.26-4.4C12.92,3.04,12.46,3,12,3L12,3z"}))}const B={toggle:"toggle_vylO",toggleButton:"toggleButton_gllP",darkToggleIcon:"darkToggleIcon_wfgR",lightToggleIcon:"lightToggleIcon_pyhR",toggleButtonDisabled:"toggleButtonDisabled_aARS"};function z(e){let{className:t,buttonClassName:n,value:a,onChange:s}=e;const r=(0,j.Z)(),d=(0,p.I)({message:"Switch between dark and light mode (currently {mode})",id:"theme.colorToggle.ariaLabel",description:"The ARIA label for the navbar color mode toggle"},{mode:"dark"===a?(0,p.I)({message:"dark mode",id:"theme.colorToggle.ariaLabel.mode.dark",description:"The name for the dark color mode"}):(0,p.I)({message:"light mode",id:"theme.colorToggle.ariaLabel.mode.light",description:"The name for the light color mode"})});return o.createElement("div",{className:(0,i.Z)(B.toggle,t)},o.createElement("button",{className:(0,i.Z)("clean-btn",B.toggleButton,!r&&B.toggleButtonDisabled,n),type:"button",onClick:()=>s("dark"===a?"light":"dark"),disabled:!r,title:d,"aria-label":d,"aria-live":"polite"},o.createElement(M,{className:(0,i.Z)(B.toggleIcon,B.lightToggleIcon)}),o.createElement(G,{className:(0,i.Z)(B.toggleIcon,B.darkToggleIcon)})))}const V=o.memo(z),H={darkNavbarColorModeToggle:"darkNavbarColorModeToggle_X3D1"};function J(e){let{className:t}=e;const n=(0,_.L)().navbar.style,i=(0,_.L)().colorMode.disableSwitch,{colorMode:a,setColorMode:s}=(0,q.I)();return i?null:o.createElement(V,{className:t,buttonClassName:"dark"===n?H.darkNavbarColorModeToggle:void 0,value:a,onChange:s})}var Q=n(21327);function K(){return o.createElement(Q.Z,{className:"navbar__brand",imageClassName:"navbar__logo",titleClassName:"navbar__title text--truncate"})}function Y(){const e=(0,A.e)();return o.createElement("button",{type:"button","aria-label":(0,p.I)({id:"theme.docs.sidebar.closeSidebarButtonAriaLabel",message:"Close navigation bar",description:"The ARIA label for close button of mobile sidebar"}),className:"clean-btn navbar-sidebar__close",onClick:()=>e.toggle()},o.createElement(w,{color:"var(--ifm-color-emphasis-600)"}))}function W(){return o.createElement("div",{className:"navbar-sidebar__brand"},o.createElement(K,null),o.createElement(J,{className:"margin-right--md"}),o.createElement(Y,null))}var $=n(39960),Z=n(44996),X=n(13919),ee=n(98022),te=n(39471);function ne(e){let{activeBasePath:t,activeBaseRegex:n,to:i,href:a,label:s,html:d,isDropdownLink:p,prependBaseUrlToHref:l,...c}=e;const u=(0,Z.Z)(i),m=(0,Z.Z)(t),h=(0,Z.Z)(a,{forcePrependBaseUrl:!0}),f=s&&a&&!(0,X.Z)(a),y=d?{dangerouslySetInnerHTML:{__html:d}}:{children:o.createElement(o.Fragment,null,s,f&&o.createElement(te.Z,p&&{width:12,height:12}))};return a?o.createElement($.Z,(0,r.Z)({href:l?h:a},c,y)):o.createElement($.Z,(0,r.Z)({to:u,isNavLink:!0},(t||n)&&{isActive:(e,t)=>n?(0,ee.F)(n,t.pathname):t.pathname.startsWith(m)},c,y))}function oe(e){let{className:t,isDropdownItem:n=!1,...a}=e;const s=o.createElement(ne,(0,r.Z)({className:(0,i.Z)(n?"dropdown__link":"navbar__item navbar__link",t),isDropdownLink:n},a));return n?o.createElement("li",null,s):s}function ie(e){let{className:t,isDropdownItem:n,...a}=e;return o.createElement("li",{className:"menu__list-item"},o.createElement(ne,(0,r.Z)({className:(0,i.Z)("menu__link",t)},a)))}function ae(e){let{mobile:t=!1,position:n,...i}=e;const a=t?ie:oe;return o.createElement(a,(0,r.Z)({},i,{activeClassName:i.activeClassName??(t?"menu__link--active":"navbar__link--active")}))}var se=n(86043),re=n(48596),de=n(52263);function pe(e,t){return e.some((e=>function(e,t){return!!(0,re.Mg)(e.to,t)||!!(0,ee.F)(e.activeBaseRegex,t)||!(!e.activeBasePath||!t.startsWith(e.activeBasePath))}(e,t)))}function le(e){let{items:t,position:n,className:a,onClick:s,...d}=e;const p=(0,o.useRef)(null),[l,c]=(0,o.useState)(!1);return(0,o.useEffect)((()=>{const e=e=>{p.current&&!p.current.contains(e.target)&&c(!1)};return document.addEventListener("mousedown",e),document.addEventListener("touchstart",e),document.addEventListener("focusin",e),()=>{document.removeEventListener("mousedown",e),document.removeEventListener("touchstart",e),document.removeEventListener("focusin",e)}}),[p]),o.createElement("div",{ref:p,className:(0,i.Z)("navbar__item","dropdown","dropdown--hoverable",{"dropdown--right":"right"===n,"dropdown--show":l})},o.createElement(ne,(0,r.Z)({"aria-haspopup":"true","aria-expanded":l,role:"button",href:d.to?void 0:"#",className:(0,i.Z)("navbar__link",a)},d,{onClick:d.to?void 0:e=>e.preventDefault(),onKeyDown:e=>{"Enter"===e.key&&(e.preventDefault(),c(!l))}}),d.children??d.label),o.createElement("ul",{className:"dropdown__menu"},t.map(((e,t)=>o.createElement(ze,(0,r.Z)({isDropdownItem:!0,activeClassName:"dropdown__link--active"},e,{key:t}))))))}function ce(e){let{items:t,className:n,position:a,onClick:s,...p}=e;const l=function(){const{siteConfig:{baseUrl:e}}=(0,de.Z)(),{pathname:t}=(0,d.TH)();return t.replace(e,"/")}(),c=pe(t,l),{collapsed:u,toggleCollapsed:m,setCollapsed:h}=(0,se.u)({initialState:()=>!c});return(0,o.useEffect)((()=>{c&&h(!c)}),[l,c,h]),o.createElement("li",{className:(0,i.Z)("menu__list-item",{"menu__list-item--collapsed":u})},o.createElement(ne,(0,r.Z)({role:"button",className:(0,i.Z)("menu__link menu__link--sublist menu__link--sublist-caret",n)},p,{onClick:e=>{e.preventDefault(),m()}}),p.children??p.label),o.createElement(se.z,{lazy:!0,as:"ul",className:"menu__list",collapsed:u},t.map(((e,t)=>o.createElement(ze,(0,r.Z)({mobile:!0,isDropdownItem:!0,onClick:s,activeClassName:"menu__link--active"},e,{key:t}))))))}function ue(e){let{mobile:t=!1,...n}=e;const i=t?ce:le;return o.createElement(i,n)}var me=n(94711);function he(e){let{width:t=20,height:n=20,...i}=e;return o.createElement("svg",(0,r.Z)({viewBox:"0 0 24 24",width:t,height:n,"aria-hidden":!0},i),o.createElement("path",{fill:"currentColor",d:"M12.87 15.07l-2.54-2.51.03-.03c1.74-1.94 2.98-4.17 3.71-6.53H17V4h-7V2H8v2H1v1.99h11.17C11.5 7.92 10.44 9.75 9 11.35 8.07 10.32 7.3 9.19 6.69 8h-2c.73 1.63 1.73 3.17 2.98 4.56l-5.09 5.02L4 19l5-5 3.11 3.11.76-2.04zM18.5 10h-2L12 22h2l1.12-3h4.75L21 22h2l-4.5-12zm-2.62 7l1.62-4.33L19.12 17h-3.24z"}))}const fe="iconLanguage_nlXk";function ye(){return o.createElement("svg",{width:"15",height:"15",className:"DocSearch-Control-Key-Icon"},o.createElement("path",{d:"M4.505 4.496h2M5.505 5.496v5M8.216 4.496l.055 5.993M10 7.5c.333.333.5.667.5 1v2M12.326 4.5v5.996M8.384 4.496c1.674 0 2.116 0 2.116 1.5s-.442 1.5-2.116 1.5M3.205 9.303c-.09.448-.277 1.21-1.241 1.203C1 10.5.5 9.513.5 8V7c0-1.57.5-2.5 1.464-2.494.964.006 1.134.598 1.24 1.342M12.553 10.5h1.953",strokeWidth:"1.2",stroke:"currentColor",fill:"none",strokeLinecap:"square"}))}var be=n(20830),ge=["translations"];function ve(){return ve=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},ve.apply(this,arguments)}function _e(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var o,i,a=[],s=!0,r=!1;try{for(n=n.call(e);!(s=(o=n.next()).done)&&(a.push(o.value),!t||a.length!==t);s=!0);}catch(d){r=!0,i=d}finally{try{s||null==n.return||n.return()}finally{if(r)throw i}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ke(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ke(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ke(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function we(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var Se="Ctrl";var Te=o.forwardRef((function(e,t){var n=e.translations,i=void 0===n?{}:n,a=we(e,ge),s=i.buttonText,r=void 0===s?"Search":s,d=i.buttonAriaLabel,p=void 0===d?"Search":d,l=_e((0,o.useState)(null),2),c=l[0],u=l[1];return(0,o.useEffect)((function(){"undefined"!=typeof navigator&&(/(Mac|iPhone|iPod|iPad)/i.test(navigator.platform)?u("\u2318"):u(Se))}),[]),o.createElement("button",ve({type:"button",className:"DocSearch DocSearch-Button","aria-label":p},a,{ref:t}),o.createElement("span",{className:"DocSearch-Button-Container"},o.createElement(be.W,null),o.createElement("span",{className:"DocSearch-Button-Placeholder"},r)),o.createElement("span",{className:"DocSearch-Button-Keys"},null!==c&&o.createElement(o.Fragment,null,o.createElement("kbd",{className:"DocSearch-Button-Key"},c===Se?o.createElement(ye,null):c),o.createElement("kbd",{className:"DocSearch-Button-Key"},"K"))))})),Ee=n(35742),Pe=n(66177),xe=n(239),Re=n(43320);var Ae=n(73935);const Ie={button:{buttonText:(0,p.I)({id:"theme.SearchBar.label",message:"Search",description:"The ARIA label and placeholder for search button"}),buttonAriaLabel:(0,p.I)({id:"theme.SearchBar.label",message:"Search",description:"The ARIA label and placeholder for search button"})},modal:{searchBox:{resetButtonTitle:(0,p.I)({id:"theme.SearchModal.searchBox.resetButtonTitle",message:"Clear the query",description:"The label and ARIA label for search box reset button"}),resetButtonAriaLabel:(0,p.I)({id:"theme.SearchModal.searchBox.resetButtonTitle",message:"Clear the query",description:"The label and ARIA label for search box reset button"}),cancelButtonText:(0,p.I)({id:"theme.SearchModal.searchBox.cancelButtonText",message:"Cancel",description:"The label and ARIA label for search box cancel button"}),cancelButtonAriaLabel:(0,p.I)({id:"theme.SearchModal.searchBox.cancelButtonText",message:"Cancel",description:"The label and ARIA label for search box cancel button"})},startScreen:{recentSearchesTitle:(0,p.I)({id:"theme.SearchModal.startScreen.recentSearchesTitle",message:"Recent",description:"The title for recent searches"}),noRecentSearchesText:(0,p.I)({id:"theme.SearchModal.startScreen.noRecentSearchesText",message:"No recent searches",description:"The text when no recent searches"}),saveRecentSearchButtonTitle:(0,p.I)({id:"theme.SearchModal.startScreen.saveRecentSearchButtonTitle",message:"Save this search",description:"The label for save recent search button"}),removeRecentSearchButtonTitle:(0,p.I)({id:"theme.SearchModal.startScreen.removeRecentSearchButtonTitle",message:"Remove this search from history",description:"The label for remove recent search button"}),favoriteSearchesTitle:(0,p.I)({id:"theme.SearchModal.startScreen.favoriteSearchesTitle",message:"Favorite",description:"The title for favorite searches"}),removeFavoriteSearchButtonTitle:(0,p.I)({id:"theme.SearchModal.startScreen.removeFavoriteSearchButtonTitle",message:"Remove this search from favorites",description:"The label for remove favorite search button"})},errorScreen:{titleText:(0,p.I)({id:"theme.SearchModal.errorScreen.titleText",message:"Unable to fetch results",description:"The title for error screen of search modal"}),helpText:(0,p.I)({id:"theme.SearchModal.errorScreen.helpText",message:"You might want to check your network connection.",description:"The help text for error screen of search modal"})},footer:{selectText:(0,p.I)({id:"theme.SearchModal.footer.selectText",message:"to select",description:"The explanatory text of the action for the enter key"}),selectKeyAriaLabel:(0,p.I)({id:"theme.SearchModal.footer.selectKeyAriaLabel",message:"Enter key",description:"The ARIA label for the Enter key button that makes the selection"}),navigateText:(0,p.I)({id:"theme.SearchModal.footer.navigateText",message:"to navigate",description:"The explanatory text of the action for the Arrow up and Arrow down key"}),navigateUpKeyAriaLabel:(0,p.I)({id:"theme.SearchModal.footer.navigateUpKeyAriaLabel",message:"Arrow up",description:"The ARIA label for the Arrow up key button that makes the navigation"}),navigateDownKeyAriaLabel:(0,p.I)({id:"theme.SearchModal.footer.navigateDownKeyAriaLabel",message:"Arrow down",description:"The ARIA label for the Arrow down key button that makes the navigation"}),closeText:(0,p.I)({id:"theme.SearchModal.footer.closeText",message:"to close",description:"The explanatory text of the action for Escape key"}),closeKeyAriaLabel:(0,p.I)({id:"theme.SearchModal.footer.closeKeyAriaLabel",message:"Escape key",description:"The ARIA label for the Escape key button that close the modal"}),searchByText:(0,p.I)({id:"theme.SearchModal.footer.searchByText",message:"Search by",description:"The text explain that the search is making by Algolia"})},noResultsScreen:{noResultsText:(0,p.I)({id:"theme.SearchModal.noResultsScreen.noResultsText",message:"No results for",description:"The text explains that there are no results for the following search"}),suggestedQueryText:(0,p.I)({id:"theme.SearchModal.noResultsScreen.suggestedQueryText",message:"Try searching for",description:"The text for the suggested query when no results are found for the following search"}),reportMissingResultsText:(0,p.I)({id:"theme.SearchModal.noResultsScreen.reportMissingResultsText",message:"Believe this query should return results?",description:"The text for the question where the user thinks there are missing results"}),reportMissingResultsLinkText:(0,p.I)({id:"theme.SearchModal.noResultsScreen.reportMissingResultsLinkText",message:"Let us know.",description:"The text for the link to report missing results"})}},placeholder:(0,p.I)({id:"theme.SearchModal.placeholder",message:"Search docs",description:"The placeholder of the input of the DocSearch pop-up modal"})};let Oe=null;function Ue(e){let{hit:t,children:n}=e;return o.createElement($.Z,{to:t.url},n)}function Ne(e){let{state:t,onClose:n}=e;const i=(0,Pe.M)();return o.createElement($.Z,{to:i(t.query),onClick:n},o.createElement(p.Z,{id:"theme.SearchBar.seeAll",values:{count:t.context.nbHits}},"See all {count} results"))}function Le(e){let{contextualSearch:t,externalUrlRegex:i,...a}=e;const{siteMetadata:s}=(0,de.Z)(),p=(0,xe.l)(),l=function(){const{locale:e,tags:t}=(0,Re._q)();return[`language:${e}`,t.map((e=>`docusaurus_tag:${e}`))]}(),c=a.searchParameters?.facetFilters??[],u=t?function(e,t){const n=e=>"string"==typeof e?[e]:e;return[...n(e),...n(t)]}(l,c):c,m={...a.searchParameters,facetFilters:u},h=(0,d.k6)(),f=(0,o.useRef)(null),y=(0,o.useRef)(null),[b,g]=(0,o.useState)(!1),[v,_]=(0,o.useState)(void 0),k=(0,o.useCallback)((()=>Oe?Promise.resolve():Promise.all([n.e(99724).then(n.bind(n,99724)),Promise.all([n.e(40532),n.e(46945)]).then(n.bind(n,46945)),Promise.all([n.e(40532),n.e(18894)]).then(n.bind(n,18894))]).then((e=>{let[{DocSearchModal:t}]=e;Oe=t}))),[]),w=(0,o.useCallback)((()=>{k().then((()=>{f.current=document.createElement("div"),document.body.insertBefore(f.current,document.body.firstChild),g(!0)}))}),[k,g]),S=(0,o.useCallback)((()=>{g(!1),f.current?.remove()}),[g]),T=(0,o.useCallback)((e=>{k().then((()=>{g(!0),_(e.key)}))}),[k,g,_]),E=(0,o.useRef)({navigate(e){let{itemUrl:t}=e;(0,ee.F)(i,t)?window.location.href=t:h.push(t)}}).current,P=(0,o.useRef)((e=>a.transformItems?a.transformItems(e):e.map((e=>({...e,url:p(e.url)}))))).current,x=(0,o.useMemo)((()=>e=>o.createElement(Ne,(0,r.Z)({},e,{onClose:S}))),[S]),R=(0,o.useCallback)((e=>(e.addAlgoliaAgent("docusaurus",s.docusaurusVersion),e)),[s.docusaurusVersion]);return function(e){var t=e.isOpen,n=e.onOpen,i=e.onClose,a=e.onInput,s=e.searchButtonRef;o.useEffect((function(){function e(e){(27===e.keyCode&&t||"k"===e.key.toLowerCase()&&(e.metaKey||e.ctrlKey)||!function(e){var t=e.target,n=t.tagName;return t.isContentEditable||"INPUT"===n||"SELECT"===n||"TEXTAREA"===n}(e)&&"/"===e.key&&!t)&&(e.preventDefault(),t?i():document.body.classList.contains("DocSearch--active")||document.body.classList.contains("DocSearch--active")||n()),s&&s.current===document.activeElement&&a&&/[a-zA-Z0-9]/.test(String.fromCharCode(e.keyCode))&&a(e)}return window.addEventListener("keydown",e),function(){window.removeEventListener("keydown",e)}}),[t,n,i,a,s])}({isOpen:b,onOpen:w,onClose:S,onInput:T,searchButtonRef:y}),o.createElement(o.Fragment,null,o.createElement(Ee.Z,null,o.createElement("link",{rel:"preconnect",href:`https://${a.appId}-dsn.algolia.net`,crossOrigin:"anonymous"})),o.createElement(Te,{onTouchStart:k,onFocus:k,onMouseOver:k,onClick:w,ref:y,translations:Ie.button}),b&&Oe&&f.current&&(0,Ae.createPortal)(o.createElement(Oe,(0,r.Z)({onClose:S,initialScrollY:window.scrollY,initialQuery:v,navigator:E,transformItems:P,hitComponent:Ue,transformSearchClient:R},a.searchPagePath&&{resultsFooterComponent:x},a,{searchParameters:m,placeholder:Ie.placeholder,translations:Ie.modal})),f.current))}function De(){const{siteConfig:e}=(0,de.Z)();return o.createElement(Le,e.themeConfig.algolia)}const Ce={searchBox:"searchBox_ZlJk"};function Fe(e){let{children:t,className:n}=e;return o.createElement("div",{className:(0,i.Z)(n,Ce.searchBox)},t)}var qe=n(94104),je=n(52802);var Me=n(60373);const Ge=e=>e.docs.find((t=>t.id===e.mainDocId));const Be={default:ae,localeDropdown:function(e){let{mobile:t,dropdownItemsBefore:n,dropdownItemsAfter:i,...a}=e;const{i18n:{currentLocale:s,locales:l,localeConfigs:c}}=(0,de.Z)(),u=(0,me.l)(),{search:m,hash:h}=(0,d.TH)(),f=[...n,...l.map((e=>{const n=`${`pathname://${u.createUrl({locale:e,fullyQualified:!1})}`}${m}${h}`;return{label:c[e].label,lang:c[e].htmlLang,to:n,target:"_self",autoAddBaseUrl:!1,className:e===s?t?"menu__link--active":"dropdown__link--active":""}})),...i],y=t?(0,p.I)({message:"Languages",id:"theme.navbar.mobileLanguageDropdown.label",description:"The label for the mobile language switcher dropdown"}):c[s].label;return o.createElement(ue,(0,r.Z)({},a,{mobile:t,label:o.createElement(o.Fragment,null,o.createElement(he,{className:fe}),y),items:f}))},search:function(e){let{mobile:t,className:n}=e;return t?null:o.createElement(Fe,{className:n},o.createElement(De,null))},dropdown:ue,html:function(e){let{value:t,className:n,mobile:a=!1,isDropdownItem:s=!1}=e;const r=s?"li":"div";return o.createElement(r,{className:(0,i.Z)({navbar__item:!a&&!s,"menu__list-item":a},n),dangerouslySetInnerHTML:{__html:t}})},doc:function(e){let{docId:t,label:n,docsPluginId:i,...a}=e;const{activeDoc:s}=(0,qe.Iw)(i),d=(0,je.vY)(t,i);return null===d?null:o.createElement(ae,(0,r.Z)({exact:!0},a,{isActive:()=>s?.path===d.path||!!s?.sidebar&&s.sidebar===d.sidebar,label:n??d.id,to:d.path}))},docSidebar:function(e){let{sidebarId:t,label:n,docsPluginId:i,...a}=e;const{activeDoc:s}=(0,qe.Iw)(i),d=(0,je.oz)(t,i).link;if(!d)throw new Error(`DocSidebarNavbarItem: Sidebar with ID "${t}" doesn't have anything to be linked to.`);return o.createElement(ae,(0,r.Z)({exact:!0},a,{isActive:()=>s?.sidebar===t,label:n??d.label,to:d.path}))},docsVersion:function(e){let{label:t,to:n,docsPluginId:i,...a}=e;const s=(0,je.lO)(i)[0],d=t??s.label,p=n??(e=>e.docs.find((t=>t.id===e.mainDocId)))(s).path;return o.createElement(ae,(0,r.Z)({},a,{label:d,to:p}))},docsVersionDropdown:function(e){let{mobile:t,docsPluginId:n,dropdownActiveClassDisabled:i,dropdownItemsBefore:a,dropdownItemsAfter:s,...l}=e;const{search:c,hash:u}=(0,d.TH)(),m=(0,qe.Iw)(n),h=(0,qe.gB)(n),{savePreferredVersionName:f}=(0,Me.J)(n),y=[...a,...h.map((e=>{const t=m.alternateDocVersions[e.name]??Ge(e);return{label:e.label,to:`${t.path}${c}${u}`,isActive:()=>e===m.activeVersion,onClick:()=>f(e.name)}})),...s],b=(0,je.lO)(n)[0],g=t&&y.length>1?(0,p.I)({id:"theme.navbar.mobileVersionsDropdown.label",message:"Versions",description:"The label for the navbar versions dropdown on mobile view"}):b.label,v=t&&y.length>1?void 0:Ge(b).path;return y.length<=1?o.createElement(ae,(0,r.Z)({},l,{mobile:t,label:g,to:v,isActive:i?()=>!1:void 0})):o.createElement(ue,(0,r.Z)({},l,{mobile:t,label:g,to:v,items:y,isActive:i?()=>!1:void 0}))}};function ze(e){let{type:t,...n}=e;const i=function(e,t){return e&&"default"!==e?e:"items"in t?"dropdown":"default"}(t,n),a=Be[i];if(!a)throw new Error(`No NavbarItem component found for type "${t}".`);return o.createElement(a,n)}function Ve(){const e=(0,A.e)(),t=(0,_.L)().navbar.items;return o.createElement("ul",{className:"menu__list"},t.map(((t,n)=>o.createElement(ze,(0,r.Z)({mobile:!0},t,{onClick:()=>e.toggle(),key:n})))))}function He(e){return o.createElement("button",(0,r.Z)({},e,{type:"button",className:"clean-btn navbar-sidebar__back"}),o.createElement(p.Z,{id:"theme.navbar.mobileSidebarSecondaryMenu.backButtonLabel",description:"The label of the back button to return to main menu, inside the mobile navbar sidebar secondary menu (notably used to display the docs sidebar)"},"\u2190 Back to main menu"))}function Je(){const e=0===(0,_.L)().navbar.items.length,t=C();return o.createElement(o.Fragment,null,!e&&o.createElement(He,{onClick:()=>t.hide()}),t.content)}function Qe(){const e=(0,A.e)();var t;return void 0===(t=e.shown)&&(t=!0),(0,o.useEffect)((()=>(document.body.style.overflow=t?"hidden":"visible",()=>{document.body.style.overflow="visible"})),[t]),e.shouldRender?o.createElement(F,{header:o.createElement(W,null),primaryMenu:o.createElement(Ve,null),secondaryMenu:o.createElement(Je,null)}):null}const Ke={navbarHideable:"navbarHideable_m1mJ",navbarHidden:"navbarHidden_jGov"};function Ye(e){return o.createElement("div",(0,r.Z)({role:"presentation"},e,{className:(0,i.Z)("navbar-sidebar__backdrop",e.className)}))}function We(e){let{children:t}=e;const{navbar:{hideOnScroll:n,style:a}}=(0,_.L)(),s=(0,A.e)(),{navbarRef:r,isNavbarVisible:d}=function(e){const[t,n]=(0,o.useState)(e),i=(0,o.useRef)(!1),a=(0,o.useRef)(0),s=(0,o.useCallback)((e=>{null!==e&&(a.current=e.getBoundingClientRect().height)}),[]);return(0,I.RF)(((t,o)=>{let{scrollY:s}=t;if(!e)return;if(s<a.current)return void n(!0);if(i.current)return void(i.current=!1);const r=o?.scrollY,d=document.documentElement.scrollHeight-a.current,p=window.innerHeight;r&&s>=r?n(!1):s+p<d&&n(!0)})),(0,l.S)((t=>{if(!e)return;const o=t.location.hash;if(o?document.getElementById(o.substring(1)):void 0)return i.current=!0,void n(!1);n(!0)})),{navbarRef:s,isNavbarVisible:t}}(n);return o.createElement("nav",{ref:r,"aria-label":(0,p.I)({id:"theme.NavBar.navAriaLabel",message:"Main",description:"The ARIA label for the main navigation"}),className:(0,i.Z)("navbar","navbar--fixed-top",n&&[Ke.navbarHideable,!d&&Ke.navbarHidden],{"navbar--dark":"dark"===a,"navbar--primary":"primary"===a,"navbar-sidebar--show":s.shown})},t,o.createElement(Ye,{onClick:s.toggle}),o.createElement(Qe,null))}var $e=n(18780);const Ze={errorBoundaryError:"errorBoundaryError_a6uf"};function Xe(e){return o.createElement("button",(0,r.Z)({type:"button"},e),o.createElement(p.Z,{id:"theme.ErrorPageContent.tryAgain",description:"The label of the button to try again rendering when the React error boundary captures an error"},"Try again"))}function et(e){let{error:t}=e;const n=(0,$e.getErrorCausalChain)(t).map((e=>e.message)).join("\n\nCause:\n");return o.createElement("p",{className:Ze.errorBoundaryError},n)}class tt extends o.Component{componentDidCatch(e,t){throw this.props.onError(e,t)}render(){return this.props.children}}const nt="right";function ot(e){let{width:t=30,height:n=30,className:i,...a}=e;return o.createElement("svg",(0,r.Z)({className:i,width:t,height:n,viewBox:"0 0 30 30","aria-hidden":"true"},a),o.createElement("path",{stroke:"currentColor",strokeLinecap:"round",strokeMiterlimit:"10",strokeWidth:"2",d:"M4 7h22M4 15h22M4 23h22"}))}function it(){const{toggle:e,shown:t}=(0,A.e)();return o.createElement("button",{onClick:e,"aria-label":(0,p.I)({id:"theme.docs.sidebar.toggleSidebarButtonAriaLabel",message:"Toggle navigation bar",description:"The ARIA label for hamburger menu button of mobile navigation"}),"aria-expanded":t,className:"navbar__toggle clean-btn",type:"button"},o.createElement(ot,null))}const at={colorModeToggle:"colorModeToggle_DEke"};function st(e){let{items:t}=e;return o.createElement(o.Fragment,null,t.map(((e,t)=>o.createElement(tt,{key:t,onError:t=>new Error(`A theme navbar item failed to render.\nPlease double-check the following navbar item (themeConfig.navbar.items) of your Docusaurus config:\n${JSON.stringify(e,null,2)}`,{cause:t})},o.createElement(ze,e)))))}function rt(e){let{left:t,right:n}=e;return o.createElement("div",{className:"navbar__inner"},o.createElement("div",{className:"navbar__items"},t),o.createElement("div",{className:"navbar__items navbar__items--right"},n))}function dt(){const e=(0,A.e)(),t=(0,_.L)().navbar.items,[n,i]=function(e){function t(e){return"left"===(e.position??nt)}return[e.filter(t),e.filter((e=>!t(e)))]}(t),a=t.find((e=>"search"===e.type));return o.createElement(rt,{left:o.createElement(o.Fragment,null,!e.disabled&&o.createElement(it,null),o.createElement(K,null),o.createElement(st,{items:n})),right:o.createElement(o.Fragment,null,o.createElement(st,{items:i}),o.createElement(J,{className:at.colorModeToggle}),!a&&o.createElement(Fe,null,o.createElement(De,null)))})}function pt(){return o.createElement(We,null,o.createElement(dt,null))}function lt(e){let{item:t}=e;const{to:n,href:i,label:a,prependBaseUrlToHref:s,...d}=t,p=(0,Z.Z)(n),l=(0,Z.Z)(i,{forcePrependBaseUrl:!0});return o.createElement($.Z,(0,r.Z)({className:"footer__link-item"},i?{href:s?l:i}:{to:p},d),a,i&&!(0,X.Z)(i)&&o.createElement(te.Z,null))}function ct(e){let{item:t}=e;return t.html?o.createElement("li",{className:"footer__item",dangerouslySetInnerHTML:{__html:t.html}}):o.createElement("li",{key:t.href??t.to,className:"footer__item"},o.createElement(lt,{item:t}))}function ut(e){let{column:t}=e;return o.createElement("div",{className:"col footer__col"},o.createElement("div",{className:"footer__title"},t.title),o.createElement("ul",{className:"footer__items clean-list"},t.items.map(((e,t)=>o.createElement(ct,{key:t,item:e})))))}function mt(e){let{columns:t}=e;return o.createElement("div",{className:"row footer__links"},t.map(((e,t)=>o.createElement(ut,{key:t,column:e}))))}function ht(){return o.createElement("span",{className:"footer__link-separator"},"\xb7")}function ft(e){let{item:t}=e;return t.html?o.createElement("span",{className:"footer__link-item",dangerouslySetInnerHTML:{__html:t.html}}):o.createElement(lt,{item:t})}function yt(e){let{links:t}=e;return o.createElement("div",{className:"footer__links text--center"},o.createElement("div",{className:"footer__links"},t.map(((e,n)=>o.createElement(o.Fragment,{key:n},o.createElement(ft,{item:e}),t.length!==n+1&&o.createElement(ht,null))))))}function bt(e){let{links:t}=e;return function(e){return"title"in e[0]}(t)?o.createElement(mt,{columns:t}):o.createElement(yt,{links:t})}var gt=n(50941);const vt={footerLogoLink:"footerLogoLink_BH7S"};function _t(e){let{logo:t}=e;const{withBaseUrl:n}=(0,Z.C)(),a={light:n(t.src),dark:n(t.srcDark??t.src)};return o.createElement(gt.Z,{className:(0,i.Z)("footer__logo",t.className),alt:t.alt,sources:a,width:t.width,height:t.height,style:t.style})}function kt(e){let{logo:t}=e;return t.href?o.createElement($.Z,{href:t.href,className:vt.footerLogoLink,target:t.target},o.createElement(_t,{logo:t})):o.createElement(_t,{logo:t})}function wt(e){let{copyright:t}=e;return o.createElement("div",{className:"footer__copyright",dangerouslySetInnerHTML:{__html:t}})}function St(e){let{style:t,links:n,logo:a,copyright:s}=e;return o.createElement("footer",{className:(0,i.Z)("footer",{"footer--dark":"dark"===t})},o.createElement("div",{className:"container container-fluid"},n,(a||s)&&o.createElement("div",{className:"footer__bottom text--center"},a&&o.createElement("div",{className:"margin-bottom--sm"},a),s)))}function Tt(){const{footer:e}=(0,_.L)();if(!e)return null;const{copyright:t,links:n,logo:i,style:a}=e;return o.createElement(St,{style:a,links:n&&n.length>0&&o.createElement(bt,{links:n}),logo:i&&o.createElement(kt,{logo:i}),copyright:t&&o.createElement(wt,{copyright:t})})}const Et=o.memo(Tt),Pt=(0,O.Qc)([q.S,k.pl,I.OC,Me.L5,s.VC,function(e){let{children:t}=e;return o.createElement(U.n2,null,o.createElement(A.M,null,o.createElement(L,null,t)))}]);function xt(e){let{children:t}=e;return o.createElement(Pt,null,t)}function Rt(e){let{error:t,tryAgain:n}=e;return o.createElement("main",{className:"container margin-vert--xl"},o.createElement("div",{className:"row"},o.createElement("div",{className:"col col--6 col--offset-3"},o.createElement("h1",{className:"hero__title"},o.createElement(p.Z,{id:"theme.ErrorPageContent.title",description:"The title of the fallback page when the page crashed"},"This page crashed.")),o.createElement("div",{className:"margin-vert--lg"},o.createElement(Xe,{onClick:n,className:"button button--primary shadow--lw"})),o.createElement("hr",null),o.createElement("div",{className:"margin-vert--md"},o.createElement(et,{error:t})))))}const At={mainWrapper:"mainWrapper_z2l0"};function It(e){const{children:t,noFooter:n,wrapperClassName:r,title:d,description:p}=e;return(0,b.t)(),o.createElement(xt,null,o.createElement(s.d,{title:d,description:p}),o.createElement(v,null),o.createElement(R,null),o.createElement(pt,null),o.createElement("div",{id:c,className:(0,i.Z)(y.k.wrapper.main,At.mainWrapper,r)},o.createElement(a.Z,{fallback:e=>o.createElement(Rt,e)},t)),!n&&o.createElement(Et,null))}},21327:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var o=n(87462),i=n(67294),a=n(39960),s=n(44996),r=n(52263),d=n(86668),p=n(50941);function l(e){let{logo:t,alt:n,imageClassName:o}=e;const a={light:(0,s.Z)(t.src),dark:(0,s.Z)(t.srcDark||t.src)},r=i.createElement(p.Z,{className:t.className,sources:a,height:t.height,width:t.width,alt:n,style:t.style});return o?i.createElement("div",{className:o},r):r}function c(e){const{siteConfig:{title:t}}=(0,r.Z)(),{navbar:{title:n,logo:p}}=(0,d.L)(),{imageClassName:c,titleClassName:u,...m}=e,h=(0,s.Z)(p?.href||"/"),f=n?"":t,y=p?.alt??f;return i.createElement(a.Z,(0,o.Z)({to:h},m,p?.target&&{target:p.target}),p&&i.createElement(l,{logo:p,alt:y,imageClassName:c}),null!=n&&i.createElement("b",{className:u},n))}},90197:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var o=n(67294),i=n(35742);function a(e){let{locale:t,version:n,tag:a}=e;const s=t;return o.createElement(i.Z,null,t&&o.createElement("meta",{name:"docusaurus_locale",content:t}),n&&o.createElement("meta",{name:"docusaurus_version",content:n}),a&&o.createElement("meta",{name:"docusaurus_tag",content:a}),s&&o.createElement("meta",{name:"docsearch:language",content:s}),n&&o.createElement("meta",{name:"docsearch:version",content:n}),a&&o.createElement("meta",{name:"docsearch:docusaurus_tag",content:a}))}},50941:(e,t,n)=>{"use strict";n.d(t,{Z:()=>p});var o=n(87462),i=n(67294),a=n(86010),s=n(72389),r=n(92949);const d={themedImage:"themedImage_ToTc","themedImage--light":"themedImage--light_HNdA","themedImage--dark":"themedImage--dark_i4oU"};function p(e){const t=(0,s.Z)(),{colorMode:n}=(0,r.I)(),{sources:p,className:l,alt:c,...u}=e,m=t?"dark"===n?["dark"]:["light"]:["light","dark"];return i.createElement(i.Fragment,null,m.map((e=>i.createElement("img",(0,o.Z)({key:e,src:p[e],alt:c,className:(0,a.Z)(d.themedImage,d[`themedImage--${e}`],l)},u)))))}},86043:(e,t,n)=>{"use strict";n.d(t,{u:()=>r,z:()=>y});var o=n(87462),i=n(67294),a=n(10412);const s="ease-in-out";function r(e){let{initialState:t}=e;const[n,o]=(0,i.useState)(t??!1),a=(0,i.useCallback)((()=>{o((e=>!e))}),[]);return{collapsed:n,setCollapsed:o,toggleCollapsed:a}}const d={display:"none",overflow:"hidden",height:"0px"},p={display:"block",overflow:"visible",height:"auto"};function l(e,t){const n=t?d:p;e.style.display=n.display,e.style.overflow=n.overflow,e.style.height=n.height}function c(e){if(window.matchMedia("(prefers-reduced-motion: reduce)").matches)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function u(e){let{collapsibleRef:t,collapsed:n,animation:o}=e;const a=(0,i.useRef)(!1);(0,i.useEffect)((()=>{const e=t.current;function i(){const t=function(){const t=e.scrollHeight;return{transition:`height ${o?.duration??c(t)}ms ${o?.easing??s}`,height:`${t}px`}}();e.style.transition=t.transition,e.style.height=t.height}if(!a.current)return l(e,n),void(a.current=!0);return e.style.willChange="height",function(){const t=requestAnimationFrame((()=>{n?(i(),requestAnimationFrame((()=>{e.style.height=d.height,e.style.overflow=d.overflow}))):(e.style.display="block",requestAnimationFrame((()=>{i()})))}));return()=>cancelAnimationFrame(t)}()}),[t,n,o])}function m(e){if(!a.default.canUseDOM)return e?d:p}function h(e){let{as:t="div",collapsed:n,children:o,animation:a,onCollapseTransitionEnd:s,className:r,disableSSRStyle:d}=e;const p=(0,i.useRef)(null);return u({collapsibleRef:p,collapsed:n,animation:a}),i.createElement(t,{ref:p,style:d?void 0:m(n),onTransitionEnd:e=>{"height"===e.propertyName&&(l(p.current,n),s?.(n))},className:r},o)}function f(e){let{collapsed:t,...n}=e;const[a,s]=(0,i.useState)(!t),[r,d]=(0,i.useState)(t);return(0,i.useLayoutEffect)((()=>{t||s(!0)}),[t]),(0,i.useLayoutEffect)((()=>{a&&d(t)}),[a,t]),a?i.createElement(h,(0,o.Z)({},n,{collapsed:r})):null}function y(e){let{lazy:t,...n}=e;const o=t?f:h;return i.createElement(o,n)}},59689:(e,t,n)=>{"use strict";n.d(t,{nT:()=>h,pl:()=>m});var o=n(67294),i=n(72389),a=n(50012),s=n(902),r=n(86668);const d=(0,a.WA)("docusaurus.announcement.dismiss"),p=(0,a.WA)("docusaurus.announcement.id"),l=()=>"true"===d.get(),c=e=>d.set(String(e)),u=o.createContext(null);function m(e){let{children:t}=e;const n=function(){const{announcementBar:e}=(0,r.L)(),t=(0,i.Z)(),[n,a]=(0,o.useState)((()=>!!t&&l()));(0,o.useEffect)((()=>{a(l())}),[]);const s=(0,o.useCallback)((()=>{c(!0),a(!0)}),[]);return(0,o.useEffect)((()=>{if(!e)return;const{id:t}=e;let n=p.get();"annoucement-bar"===n&&(n="announcement-bar");const o=t!==n;p.set(t),o&&c(!1),!o&&l()||a(!1)}),[e]),(0,o.useMemo)((()=>({isActive:!!e&&!n,close:s})),[e,n,s])}();return o.createElement(u.Provider,{value:n},t)}function h(){const e=(0,o.useContext)(u);if(!e)throw new s.i6("AnnouncementBarProvider");return e}},92949:(e,t,n)=>{"use strict";n.d(t,{I:()=>y,S:()=>f});var o=n(67294),i=n(10412),a=n(902),s=n(50012),r=n(86668);const d=o.createContext(void 0),p="theme",l=(0,s.WA)(p),c={light:"light",dark:"dark"},u=e=>e===c.dark?c.dark:c.light,m=e=>i.default.canUseDOM?u(document.documentElement.getAttribute("data-theme")):u(e),h=e=>{l.set(u(e))};function f(e){let{children:t}=e;const n=function(){const{colorMode:{defaultMode:e,disableSwitch:t,respectPrefersColorScheme:n}}=(0,r.L)(),[i,a]=(0,o.useState)(m(e));(0,o.useEffect)((()=>{t&&l.del()}),[t]);const s=(0,o.useCallback)((function(t,o){void 0===o&&(o={});const{persist:i=!0}=o;t?(a(t),i&&h(t)):(a(n?window.matchMedia("(prefers-color-scheme: dark)").matches?c.dark:c.light:e),l.del())}),[n,e]);(0,o.useEffect)((()=>{document.documentElement.setAttribute("data-theme",u(i))}),[i]),(0,o.useEffect)((()=>{if(t)return;const e=e=>{if(e.key!==p)return;const t=l.get();null!==t&&s(u(t))};return window.addEventListener("storage",e),()=>window.removeEventListener("storage",e)}),[t,s]);const d=(0,o.useRef)(!1);return(0,o.useEffect)((()=>{if(t&&!n)return;const e=window.matchMedia("(prefers-color-scheme: dark)"),o=()=>{window.matchMedia("print").matches||d.current?d.current=window.matchMedia("print").matches:s(null)};return e.addListener(o),()=>e.removeListener(o)}),[s,t,n]),(0,o.useMemo)((()=>({colorMode:i,setColorMode:s,get isDarkTheme(){return i===c.dark},setLightTheme(){s(c.light)},setDarkTheme(){s(c.dark)}})),[i,s])}();return o.createElement(d.Provider,{value:n},t)}function y(){const e=(0,o.useContext)(d);if(null==e)throw new a.i6("ColorModeProvider","Please see https://docusaurus.io/docs/api/themes/configuration#use-color-mode.");return e}},60373:(e,t,n)=>{"use strict";n.d(t,{J:()=>g,L5:()=>y,Oh:()=>v});var o=n(67294),i=n(94104),a=n(29935),s=n(86668),r=n(52802),d=n(902),p=n(50012);const l=e=>`docs-preferred-version-${e}`,c={save:(e,t,n)=>{(0,p.WA)(l(e),{persistence:t}).set(n)},read:(e,t)=>(0,p.WA)(l(e),{persistence:t}).get(),clear:(e,t)=>{(0,p.WA)(l(e),{persistence:t}).del()}},u=e=>Object.fromEntries(e.map((e=>[e,{preferredVersionName:null}])));const m=o.createContext(null);function h(){const e=(0,i._r)(),t=(0,s.L)().docs.versionPersistence,n=(0,o.useMemo)((()=>Object.keys(e)),[e]),[a,r]=(0,o.useState)((()=>u(n)));(0,o.useEffect)((()=>{r(function(e){let{pluginIds:t,versionPersistence:n,allDocsData:o}=e;function i(e){const t=c.read(e,n);return o[e].versions.some((e=>e.name===t))?{preferredVersionName:t}:(c.clear(e,n),{preferredVersionName:null})}return Object.fromEntries(t.map((e=>[e,i(e)])))}({allDocsData:e,versionPersistence:t,pluginIds:n}))}),[e,t,n]);return[a,(0,o.useMemo)((()=>({savePreferredVersion:function(e,n){c.save(e,t,n),r((t=>({...t,[e]:{preferredVersionName:n}})))}})),[t])]}function f(e){let{children:t}=e;const n=h();return o.createElement(m.Provider,{value:n},t)}function y(e){let{children:t}=e;return r.cE?o.createElement(f,null,t):o.createElement(o.Fragment,null,t)}function b(){const e=(0,o.useContext)(m);if(!e)throw new d.i6("DocsPreferredVersionContextProvider");return e}function g(e){void 0===e&&(e=a.m);const t=(0,i.zh)(e),[n,s]=b(),{preferredVersionName:r}=n[e];return{preferredVersion:t.versions.find((e=>e.name===r))??null,savePreferredVersionName:(0,o.useCallback)((t=>{s.savePreferredVersion(e,t)}),[s,e])}}function v(){const e=(0,i._r)(),[t]=b();function n(n){const o=e[n],{preferredVersionName:i}=t[n];return o.versions.find((e=>e.name===i))??null}const o=Object.keys(e);return Object.fromEntries(o.map((e=>[e,n(e)])))}},1116:(e,t,n)=>{"use strict";n.d(t,{V:()=>d,b:()=>r});var o=n(67294),i=n(902);const a=Symbol("EmptyContext"),s=o.createContext(a);function r(e){let{children:t,name:n,items:i}=e;const a=(0,o.useMemo)((()=>n&&i?{name:n,items:i}:null),[n,i]);return o.createElement(s.Provider,{value:a},t)}function d(){const e=(0,o.useContext)(s);if(e===a)throw new i.i6("DocsSidebarProvider");return e}},93163:(e,t,n)=>{"use strict";n.d(t,{M:()=>c,e:()=>u});var o=n(67294),i=n(13102),a=n(87524),s=n(91980),r=n(86668),d=n(902);const p=o.createContext(void 0);function l(){const e=function(){const e=(0,i.HY)(),{items:t}=(0,r.L)().navbar;return 0===t.length&&!e.component}(),t=(0,a.i)(),n=!e&&"mobile"===t,[d,p]=(0,o.useState)(!1);(0,s.Rb)((()=>{if(d)return p(!1),!1}));const l=(0,o.useCallback)((()=>{p((e=>!e))}),[]);return(0,o.useEffect)((()=>{"desktop"===t&&p(!1)}),[t]),(0,o.useMemo)((()=>({disabled:e,shouldRender:n,toggle:l,shown:d})),[e,n,l,d])}function c(e){let{children:t}=e;const n=l();return o.createElement(p.Provider,{value:n},t)}function u(){const e=o.useContext(p);if(void 0===e)throw new d.i6("NavbarMobileSidebarProvider");return e}},13102:(e,t,n)=>{"use strict";n.d(t,{HY:()=>r,Zo:()=>d,n2:()=>s});var o=n(67294),i=n(902);const a=o.createContext(null);function s(e){let{children:t}=e;const n=(0,o.useState)({component:null,props:null});return o.createElement(a.Provider,{value:n},t)}function r(){const e=(0,o.useContext)(a);if(!e)throw new i.i6("NavbarSecondaryMenuContentProvider");return e[0]}function d(e){let{component:t,props:n}=e;const s=(0,o.useContext)(a);if(!s)throw new i.i6("NavbarSecondaryMenuContentProvider");const[,r]=s,d=(0,i.Ql)(n);return(0,o.useEffect)((()=>{r({component:t,props:d})}),[r,t,d]),(0,o.useEffect)((()=>()=>r({component:null,props:null})),[r]),null}},19727:(e,t,n)=>{"use strict";n.d(t,{h:()=>i,t:()=>a});var o=n(67294);const i="navigation-with-keyboard";function a(){(0,o.useEffect)((()=>{function e(e){"keydown"===e.type&&"Tab"===e.key&&document.body.classList.add(i),"mousedown"===e.type&&document.body.classList.remove(i)}return document.addEventListener("keydown",e),document.addEventListener("mousedown",e),()=>{document.body.classList.remove(i),document.removeEventListener("keydown",e),document.removeEventListener("mousedown",e)}}),[])}},66177:(e,t,n)=>{"use strict";n.d(t,{K:()=>r,M:()=>d});var o=n(67294),i=n(52263),a=n(91980);const s="q";function r(){return(0,a.Nc)(s)}function d(){const{siteConfig:{baseUrl:e,themeConfig:t}}=(0,i.Z)(),{algolia:{searchPagePath:n}}=t;return(0,o.useCallback)((t=>`${e}${n}?${s}=${encodeURIComponent(t)}`),[e,n])}},87524:(e,t,n)=>{"use strict";n.d(t,{i:()=>p});var o=n(67294),i=n(10412);const a={desktop:"desktop",mobile:"mobile",ssr:"ssr"},s=996;function r(){return i.default.canUseDOM?window.innerWidth>s?a.desktop:a.mobile:a.ssr}const d=!1;function p(){const[e,t]=(0,o.useState)((()=>d?"ssr":r()));return(0,o.useEffect)((()=>{function e(){t(r())}const n=d?window.setTimeout(e,1e3):void 0;return window.addEventListener("resize",e),()=>{window.removeEventListener("resize",e),clearTimeout(n)}}),[]),e}},35281:(e,t,n)=>{"use strict";n.d(t,{k:()=>o});const o={page:{blogListPage:"blog-list-page",blogPostPage:"blog-post-page",blogTagsListPage:"blog-tags-list-page",blogTagPostListPage:"blog-tags-post-list-page",docsDocPage:"docs-doc-page",docsTagsListPage:"docs-tags-list-page",docsTagDocListPage:"docs-tags-doc-list-page",mdxPage:"mdx-page"},wrapper:{main:"main-wrapper",blogPages:"blog-wrapper",docsPages:"docs-wrapper",mdxPages:"mdx-wrapper"},common:{editThisPage:"theme-edit-this-page",lastUpdated:"theme-last-updated",backToTopButton:"theme-back-to-top-button",codeBlock:"theme-code-block",admonition:"theme-admonition",admonitionType:e=>`theme-admonition-${e}`},layout:{},docs:{docVersionBanner:"theme-doc-version-banner",docVersionBadge:"theme-doc-version-badge",docBreadcrumbs:"theme-doc-breadcrumbs",docMarkdown:"theme-doc-markdown",docTocMobile:"theme-doc-toc-mobile",docTocDesktop:"theme-doc-toc-desktop",docFooter:"theme-doc-footer",docFooterTagsRow:"theme-doc-footer-tags-row",docFooterEditMetaRow:"theme-doc-footer-edit-meta-row",docSidebarContainer:"theme-doc-sidebar-container",docSidebarMenu:"theme-doc-sidebar-menu",docSidebarItemCategory:"theme-doc-sidebar-item-category",docSidebarItemLink:"theme-doc-sidebar-item-link",docSidebarItemCategoryLevel:e=>`theme-doc-sidebar-item-category-level-${e}`,docSidebarItemLinkLevel:e=>`theme-doc-sidebar-item-link-level-${e}`},blog:{}}},52802:(e,t,n)=>{"use strict";n.d(t,{Wl:()=>u,_F:()=>f,cE:()=>c,hI:()=>k,lO:()=>g,vY:()=>_,oz:()=>v,s1:()=>b});var o=n(67294),i=n(16550),a=n(18790),s=n(94104),r=n(60373),d=n(1116);function p(e){return Array.from(new Set(e))}var l=n(48596);const c=!!s._r;function u(e){if(e.href)return e.href;for(const t of e.items){if("link"===t.type)return t.href;if("category"===t.type){const e=u(t);if(e)return e}}}const m=(e,t)=>void 0!==e&&(0,l.Mg)(e,t),h=(e,t)=>e.some((e=>f(e,t)));function f(e,t){return"link"===e.type?m(e.href,t):"category"===e.type&&(m(e.href,t)||h(e.items,t))}function y(e){let{sidebarItems:t,pathname:n,onlyCategories:o=!1}=e;const i=[];return function e(t){for(const a of t)if("category"===a.type&&((0,l.Mg)(a.href,n)||e(a.items))||"link"===a.type&&(0,l.Mg)(a.href,n)){return o&&"category"!==a.type||i.unshift(a),!0}return!1}(t),i}function b(){const e=(0,d.V)(),{pathname:t}=(0,i.TH)(),n=(0,s.gA)()?.pluginData.breadcrumbs;return!1!==n&&e?y({sidebarItems:e.items,pathname:t}):null}function g(e){const{activeVersion:t}=(0,s.Iw)(e),{preferredVersion:n}=(0,r.J)(e),i=(0,s.yW)(e);return(0,o.useMemo)((()=>p([t,n,i].filter(Boolean))),[t,n,i])}function v(e,t){const n=g(t);return(0,o.useMemo)((()=>{const t=n.flatMap((e=>e.sidebars?Object.entries(e.sidebars):[])),o=t.find((t=>t[0]===e));if(!o)throw new Error(`Can't find any sidebar with id "${e}" in version${n.length>1?"s":""} ${n.map((e=>e.name)).join(", ")}".\nAvailable sidebar ids are:\n- ${Object.keys(t).join("\n- ")}`);return o[1]}),[e,n])}function _(e,t){const n=g(t);return(0,o.useMemo)((()=>{const t=n.flatMap((e=>e.docs)),o=t.find((t=>t.id===e));if(!o){if(n.flatMap((e=>e.draftIds)).includes(e))return null;throw new Error(`Couldn't find any doc with id "${e}" in version${n.length>1?"s":""} "${n.map((e=>e.name)).join(", ")}".\nAvailable doc ids are:\n- ${p(t.map((e=>e.id))).join("\n- ")}`)}return o}),[e,n])}function k(e){let{route:t,versionMetadata:n}=e;const o=(0,i.TH)(),s=t.routes,r=s.find((e=>(0,i.LX)(o.pathname,e)));if(!r)return null;const d=r.sidebar,p=d?n.docsSidebars[d]:void 0;return{docElement:(0,a.H)(s),sidebarName:d,sidebarItems:p}}},82128:(e,t,n)=>{"use strict";n.d(t,{p:()=>i});var o=n(52263);function i(e){const{siteConfig:t}=(0,o.Z)(),{title:n,titleDelimiter:i}=t;return e?.trim().length?`${e.trim()} ${i} ${n}`:n}},91980:(e,t,n)=>{"use strict";n.d(t,{Nc:()=>p,Rb:()=>r});var o=n(67294),i=n(16550),a=n(61688),s=n(902);function r(e){!function(e){const t=(0,i.k6)(),n=(0,s.zX)(e);(0,o.useEffect)((()=>t.block(((e,t)=>n(e,t)))),[t,n])}(((t,n)=>{if("POP"===n)return e(t,n)}))}function d(e){return function(e){const t=(0,i.k6)();return(0,a.useSyncExternalStore)(t.listen,(()=>e(t)),(()=>e(t)))}((t=>null===e?null:new URLSearchParams(t.location.search).get(e)))}function p(e){const t=d(e)??"",n=function(){const e=(0,i.k6)();return(0,o.useCallback)(((t,n,o)=>{const i=new URLSearchParams(e.location.search);n?i.set(t,n):i.delete(t),(o?.push?e.push:e.replace)({search:i.toString()})}),[e])}();return[t,(0,o.useCallback)(((t,o)=>{n(e,t,o)}),[n,e])]}},10833:(e,t,n)=>{"use strict";n.d(t,{FG:()=>u,d:()=>l,VC:()=>m});var o=n(67294),i=n(86010),a=n(35742),s=n(30226);function r(){const e=o.useContext(s._);if(!e)throw new Error("Unexpected: no Docusaurus route context found");return e}var d=n(44996),p=n(82128);function l(e){let{title:t,description:n,keywords:i,image:s,children:r}=e;const l=(0,p.p)(t),{withBaseUrl:c}=(0,d.C)(),u=s?c(s,{absolute:!0}):void 0;return o.createElement(a.Z,null,t&&o.createElement("title",null,l),t&&o.createElement("meta",{property:"og:title",content:l}),n&&o.createElement("meta",{name:"description",content:n}),n&&o.createElement("meta",{property:"og:description",content:n}),i&&o.createElement("meta",{name:"keywords",content:Array.isArray(i)?i.join(","):i}),u&&o.createElement("meta",{property:"og:image",content:u}),u&&o.createElement("meta",{name:"twitter:image",content:u}),r)}const c=o.createContext(void 0);function u(e){let{className:t,children:n}=e;const s=o.useContext(c),r=(0,i.Z)(s,t);return o.createElement(c.Provider,{value:r},o.createElement(a.Z,null,o.createElement("html",{className:r})),n)}function m(e){let{children:t}=e;const n=r(),a=`plugin-${n.plugin.name.replace(/docusaurus-(?:plugin|theme)-(?:content-)?/gi,"")}`;const s=`plugin-id-${n.plugin.id}`;return o.createElement(u,{className:(0,i.Z)(a,s)},t)}},902:(e,t,n)=>{"use strict";n.d(t,{D9:()=>s,Qc:()=>p,Ql:()=>d,i6:()=>r,zX:()=>a});var o=n(67294);const i=n(10412).default.canUseDOM?o.useLayoutEffect:o.useEffect;function a(e){const t=(0,o.useRef)(e);return i((()=>{t.current=e}),[e]),(0,o.useCallback)((function(){return t.current(...arguments)}),[])}function s(e){const t=(0,o.useRef)();return i((()=>{t.current=e})),t.current}class r extends Error{constructor(e,t){super(),this.name="ReactContextError",this.message=`Hook ${this.stack?.split("\n")[1]?.match(/at (?:\w+\.)?(?<name>\w+)/)?.groups.name??""} is called outside the <${e}>. ${t??""}`}}function d(e){const t=Object.entries(e);return t.sort(((e,t)=>e[0].localeCompare(t[0]))),(0,o.useMemo)((()=>e),t.flat())}function p(e){return t=>{let{children:n}=t;return o.createElement(o.Fragment,null,e.reduceRight(((e,t)=>o.createElement(t,null,e)),n))}}},98022:(e,t,n)=>{"use strict";function o(e,t){return void 0!==e&&void 0!==t&&new RegExp(e,"gi").test(t)}n.d(t,{F:()=>o})},48596:(e,t,n)=>{"use strict";n.d(t,{Mg:()=>s,Ns:()=>r});var o=n(67294),i=n(723),a=n(52263);function s(e,t){const n=e=>(!e||e.endsWith("/")?e:`${e}/`)?.toLowerCase();return n(e)===n(t)}function r(){const{baseUrl:e}=(0,a.Z)().siteConfig;return(0,o.useMemo)((()=>function(e){let{baseUrl:t,routes:n}=e;function o(e){return e.path===t&&!0===e.exact}function i(e){return e.path===t&&!e.exact}return function e(t){if(0===t.length)return;return t.find(o)||e(t.filter(i).flatMap((e=>e.routes??[])))}(n)}({routes:i.Z,baseUrl:e})),[e])}},12466:(e,t,n)=>{"use strict";n.d(t,{Ct:()=>u,OC:()=>d,RF:()=>c});var o=n(67294),i=n(10412),a=n(72389),s=n(902);const r=o.createContext(void 0);function d(e){let{children:t}=e;const n=function(){const e=(0,o.useRef)(!0);return(0,o.useMemo)((()=>({scrollEventsEnabledRef:e,enableScrollEvents:()=>{e.current=!0},disableScrollEvents:()=>{e.current=!1}})),[])}();return o.createElement(r.Provider,{value:n},t)}function p(){const e=(0,o.useContext)(r);if(null==e)throw new s.i6("ScrollControllerProvider");return e}const l=()=>i.default.canUseDOM?{scrollX:window.pageXOffset,scrollY:window.pageYOffset}:null;function c(e,t){void 0===t&&(t=[]);const{scrollEventsEnabledRef:n}=p(),i=(0,o.useRef)(l()),a=(0,s.zX)(e);(0,o.useEffect)((()=>{const e=()=>{if(!n.current)return;const e=l();a(e,i.current),i.current=e},t={passive:!0};return e(),window.addEventListener("scroll",e,t),()=>window.removeEventListener("scroll",e,t)}),[a,n,...t])}function u(){const e=(0,o.useRef)(null),t=(0,a.Z)()&&"smooth"===getComputedStyle(document.documentElement).scrollBehavior;return{startScroll:n=>{e.current=t?function(e){return window.scrollTo({top:e,behavior:"smooth"}),()=>{}}(n):function(e){let t=null;const n=document.documentElement.scrollTop>e;return function o(){const i=document.documentElement.scrollTop;(n&&i>e||!n&&i<e)&&(t=requestAnimationFrame(o),window.scrollTo(0,Math.floor(.85*(i-e))+e))}(),()=>t&&cancelAnimationFrame(t)}(n)},cancelScroll:()=>e.current?.()}}},43320:(e,t,n)=>{"use strict";n.d(t,{HX:()=>s,_q:()=>d,os:()=>r});var o=n(94104),i=n(52263),a=n(60373);const s="default";function r(e,t){return`docs-${e}-${t}`}function d(){const{i18n:e}=(0,i.Z)(),t=(0,o._r)(),n=(0,o.WS)(),d=(0,a.Oh)();const p=[s,...Object.keys(t).map((function(e){const o=n?.activePlugin.pluginId===e?n.activeVersion:void 0,i=d[e],a=t[e].versions.find((e=>e.isLast));return r(e,(o??i??a).name)}))];return{locale:e.currentLocale,tags:p}}},50012:(e,t,n)=>{"use strict";n.d(t,{WA:()=>d});n(67294),n(61688);const o="localStorage";function i(e){let{key:t,oldValue:n,newValue:o,storage:i}=e;if(n===o)return;const a=document.createEvent("StorageEvent");a.initStorageEvent("storage",!1,!1,t,n,o,window.location.href,i),window.dispatchEvent(a)}function a(e){if(void 0===e&&(e=o),"undefined"==typeof window)throw new Error("Browser storage is not available on Node.js/Docusaurus SSR process.");if("none"===e)return null;try{return window[e]}catch(n){return t=n,s||(console.warn("Docusaurus browser storage is not available.\nPossible reasons: running Docusaurus in an iframe, in an incognito browser session, or using too strict browser privacy settings.",t),s=!0),null}var t}let s=!1;const r={get:()=>null,set:()=>{},del:()=>{},listen:()=>()=>{}};function d(e,t){if("undefined"==typeof window)return function(e){function t(){throw new Error(`Illegal storage API usage for storage key "${e}".\nDocusaurus storage APIs are not supposed to be called on the server-rendering process.\nPlease only call storage APIs in effects and event handlers.`)}return{get:t,set:t,del:t,listen:t}}(e);const n=a(t?.persistence);return null===n?r:{get:()=>{try{return n.getItem(e)}catch(t){return console.error(`Docusaurus storage error, can't get key=${e}`,t),null}},set:t=>{try{const o=n.getItem(e);n.setItem(e,t),i({key:e,oldValue:o,newValue:t,storage:n})}catch(o){console.error(`Docusaurus storage error, can't set ${e}=${t}`,o)}},del:()=>{try{const t=n.getItem(e);n.removeItem(e),i({key:e,oldValue:t,newValue:null,storage:n})}catch(t){console.error(`Docusaurus storage error, can't delete key=${e}`,t)}},listen:t=>{try{const o=o=>{o.storageArea===n&&o.key===e&&t(o)};return window.addEventListener("storage",o),()=>window.removeEventListener("storage",o)}catch(o){return console.error(`Docusaurus storage error, can't listen for changes of key=${e}`,o),()=>{}}}}}},94711:(e,t,n)=>{"use strict";n.d(t,{l:()=>a});var o=n(52263),i=n(16550);function a(){const{siteConfig:{baseUrl:e,url:t},i18n:{defaultLocale:n,currentLocale:a}}=(0,o.Z)(),{pathname:s}=(0,i.TH)(),r=a===n?e:e.replace(`/${a}/`,"/"),d=s.replace(e,"");return{createUrl:function(e){let{locale:o,fullyQualified:i}=e;return`${i?t:""}${function(e){return e===n?`${r}`:`${r}${e}/`}(o)}${d}`}}}},85936:(e,t,n)=>{"use strict";n.d(t,{S:()=>s});var o=n(67294),i=n(16550),a=n(902);function s(e){const t=(0,i.TH)(),n=(0,a.D9)(t),s=(0,a.zX)(e);(0,o.useEffect)((()=>{n&&t!==n&&s({location:t,previousLocation:n})}),[s,t,n])}},86668:(e,t,n)=>{"use strict";n.d(t,{L:()=>i});var o=n(52263);function i(){return(0,o.Z)().siteConfig.themeConfig}},6278:(e,t,n)=>{"use strict";n.d(t,{L:()=>i});var o=n(52263);function i(){const{siteConfig:{themeConfig:e}}=(0,o.Z)();return e}},239:(e,t,n)=>{"use strict";n.d(t,{l:()=>r});var o=n(67294),i=n(98022),a=n(44996),s=n(6278);function r(){const{withBaseUrl:e}=(0,a.C)(),{algolia:{externalUrlRegex:t,replaceSearchResultPathname:n}}=(0,s.L)();return(0,o.useCallback)((o=>{const a=new URL(o);if((0,i.F)(t,a.href))return o;const s=`${a.pathname+a.hash}`;return e(function(e,t){return t?e.replaceAll(new RegExp(t.from,"g"),t.to):e}(s,n))}),[e,t,n])}},8802:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){const{trailingSlash:n,baseUrl:o}=t;if(e.startsWith("#"))return e;if(void 0===n)return e;const[i]=e.split(/[#?]/),a="/"===i||i===o?i:(s=i,n?function(e){return e.endsWith("/")?e:`${e}/`}(s):function(e){return e.endsWith("/")?e.slice(0,-1):e}(s));var s;return e.replace(i,a)}},54143:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getErrorCausalChain=void 0,t.getErrorCausalChain=function e(t){return t.cause?[t,...e(t.cause)]:[t]}},18780:function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getErrorCausalChain=t.applyTrailingSlash=t.blogPostContainerID=void 0,t.blogPostContainerID="post-content";var i=n(8802);Object.defineProperty(t,"applyTrailingSlash",{enumerable:!0,get:function(){return o(i).default}});var a=n(54143);Object.defineProperty(t,"getErrorCausalChain",{enumerable:!0,get:function(){return a.getErrorCausalChain}})},4750:function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});o(n(10412)).default.canUseDOM&&(window.Prism=window.Prism||{},window.Prism.manual=!0)},86010:(e,t,n)=>{"use strict";function o(e){var t,n,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=o(e[t]))&&(i&&(i+=" "),i+=n);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}n.d(t,{Z:()=>i});const i=function(){for(var e,t,n=0,i="";n<arguments.length;)(e=arguments[n++])&&(t=o(e))&&(i&&(i+=" "),i+=t);return i}},99318:(e,t,n)=>{"use strict";n.d(t,{lX:()=>_,q_:()=>P,ob:()=>m,PP:()=>R,Ep:()=>u});var o=n(87462);function i(e){return"/"===e.charAt(0)}function a(e,t){for(var n=t,o=n+1,i=e.length;o<i;n+=1,o+=1)e[n]=e[o];e.pop()}const s=function(e,t){void 0===t&&(t="");var n,o=e&&e.split("/")||[],s=t&&t.split("/")||[],r=e&&i(e),d=t&&i(t),p=r||d;if(e&&i(e)?s=o:o.length&&(s.pop(),s=s.concat(o)),!s.length)return"/";if(s.length){var l=s[s.length-1];n="."===l||".."===l||""===l}else n=!1;for(var c=0,u=s.length;u>=0;u--){var m=s[u];"."===m?a(s,u):".."===m?(a(s,u),c++):c&&(a(s,u),c--)}if(!p)for(;c--;c)s.unshift("..");!p||""===s[0]||s[0]&&i(s[0])||s.unshift("");var h=s.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h};var r=n(38776);function d(e){return"/"===e.charAt(0)?e:"/"+e}function p(e){return"/"===e.charAt(0)?e.substr(1):e}function l(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function c(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function u(e){var t=e.pathname,n=e.search,o=e.hash,i=t||"/";return n&&"?"!==n&&(i+="?"===n.charAt(0)?n:"?"+n),o&&"#"!==o&&(i+="#"===o.charAt(0)?o:"#"+o),i}function m(e,t,n,i){var a;"string"==typeof e?(a=function(e){var t=e||"/",n="",o="",i=t.indexOf("#");-1!==i&&(o=t.substr(i),t=t.substr(0,i));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===o?"":o}}(e),a.state=t):(void 0===(a=(0,o.Z)({},e)).pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==t&&void 0===a.state&&(a.state=t));try{a.pathname=decodeURI(a.pathname)}catch(r){throw r instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):r}return n&&(a.key=n),i?a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=s(a.pathname,i.pathname)):a.pathname=i.pathname:a.pathname||(a.pathname="/"),a}function h(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,o,i){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof o?o(a,i):i(!0):i(!1!==a)}else i(!0)},appendListener:function(e){var n=!0;function o(){n&&e.apply(void 0,arguments)}return t.push(o),function(){n=!1,t=t.filter((function(e){return e!==o}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];t.forEach((function(e){return e.apply(void 0,n)}))}}}var f=!("undefined"==typeof window||!window.document||!window.document.createElement);function y(e,t){t(window.confirm(e))}var b="popstate",g="hashchange";function v(){try{return window.history.state||{}}catch(e){return{}}}function _(e){void 0===e&&(e={}),f||(0,r.Z)(!1);var t,n=window.history,i=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,a=!(-1===window.navigator.userAgent.indexOf("Trident")),s=e,p=s.forceRefresh,_=void 0!==p&&p,k=s.getUserConfirmation,w=void 0===k?y:k,S=s.keyLength,T=void 0===S?6:S,E=e.basename?c(d(e.basename)):"";function P(e){var t=e||{},n=t.key,o=t.state,i=window.location,a=i.pathname+i.search+i.hash;return E&&(a=l(a,E)),m(a,o,n)}function x(){return Math.random().toString(36).substr(2,T)}var R=h();function A(e){(0,o.Z)(G,e),G.length=n.length,R.notifyListeners(G.location,G.action)}function I(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||N(P(e.state))}function O(){N(P(v()))}var U=!1;function N(e){if(U)U=!1,A();else{R.confirmTransitionTo(e,"POP",w,(function(t){t?A({action:"POP",location:e}):function(e){var t=G.location,n=D.indexOf(t.key);-1===n&&(n=0);var o=D.indexOf(e.key);-1===o&&(o=0);var i=n-o;i&&(U=!0,F(i))}(e)}))}}var L=P(v()),D=[L.key];function C(e){return E+u(e)}function F(e){n.go(e)}var q=0;function j(e){1===(q+=e)&&1===e?(window.addEventListener(b,I),a&&window.addEventListener(g,O)):0===q&&(window.removeEventListener(b,I),a&&window.removeEventListener(g,O))}var M=!1;var G={length:n.length,action:"POP",location:L,createHref:C,push:function(e,t){var o="PUSH",a=m(e,t,x(),G.location);R.confirmTransitionTo(a,o,w,(function(e){if(e){var t=C(a),s=a.key,r=a.state;if(i)if(n.pushState({key:s,state:r},null,t),_)window.location.href=t;else{var d=D.indexOf(G.location.key),p=D.slice(0,d+1);p.push(a.key),D=p,A({action:o,location:a})}else window.location.href=t}}))},replace:function(e,t){var o="REPLACE",a=m(e,t,x(),G.location);R.confirmTransitionTo(a,o,w,(function(e){if(e){var t=C(a),s=a.key,r=a.state;if(i)if(n.replaceState({key:s,state:r},null,t),_)window.location.replace(t);else{var d=D.indexOf(G.location.key);-1!==d&&(D[d]=a.key),A({action:o,location:a})}else window.location.replace(t)}}))},go:F,goBack:function(){F(-1)},goForward:function(){F(1)},block:function(e){void 0===e&&(e=!1);var t=R.setPrompt(e);return M||(j(1),M=!0),function(){return M&&(M=!1,j(-1)),t()}},listen:function(e){var t=R.appendListener(e);return j(1),function(){j(-1),t()}}};return G}var k="hashchange",w={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+p(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:p,decodePath:d},slash:{encodePath:d,decodePath:d}};function S(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function T(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function E(e){window.location.replace(S(window.location.href)+"#"+e)}function P(e){void 0===e&&(e={}),f||(0,r.Z)(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),i=n.getUserConfirmation,a=void 0===i?y:i,s=n.hashType,p=void 0===s?"slash":s,b=e.basename?c(d(e.basename)):"",g=w[p],v=g.encodePath,_=g.decodePath;function P(){var e=_(T());return b&&(e=l(e,b)),m(e)}var x=h();function R(e){(0,o.Z)(M,e),M.length=t.length,x.notifyListeners(M.location,M.action)}var A=!1,I=null;function O(){var e,t,n=T(),o=v(n);if(n!==o)E(o);else{var i=P(),s=M.location;if(!A&&(t=i,(e=s).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(I===u(i))return;I=null,function(e){if(A)A=!1,R();else{var t="POP";x.confirmTransitionTo(e,t,a,(function(n){n?R({action:t,location:e}):function(e){var t=M.location,n=D.lastIndexOf(u(t));-1===n&&(n=0);var o=D.lastIndexOf(u(e));-1===o&&(o=0);var i=n-o;i&&(A=!0,C(i))}(e)}))}}(i)}}var U=T(),N=v(U);U!==N&&E(N);var L=P(),D=[u(L)];function C(e){t.go(e)}var F=0;function q(e){1===(F+=e)&&1===e?window.addEventListener(k,O):0===F&&window.removeEventListener(k,O)}var j=!1;var M={length:t.length,action:"POP",location:L,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=S(window.location.href)),n+"#"+v(b+u(e))},push:function(e,t){var n="PUSH",o=m(e,void 0,void 0,M.location);x.confirmTransitionTo(o,n,a,(function(e){if(e){var t=u(o),i=v(b+t);if(T()!==i){I=t,function(e){window.location.hash=e}(i);var a=D.lastIndexOf(u(M.location)),s=D.slice(0,a+1);s.push(t),D=s,R({action:n,location:o})}else R()}}))},replace:function(e,t){var n="REPLACE",o=m(e,void 0,void 0,M.location);x.confirmTransitionTo(o,n,a,(function(e){if(e){var t=u(o),i=v(b+t);T()!==i&&(I=t,E(i));var a=D.indexOf(u(M.location));-1!==a&&(D[a]=t),R({action:n,location:o})}}))},go:C,goBack:function(){C(-1)},goForward:function(){C(1)},block:function(e){void 0===e&&(e=!1);var t=x.setPrompt(e);return j||(q(1),j=!0),function(){return j&&(j=!1,q(-1)),t()}},listen:function(e){var t=x.appendListener(e);return q(1),function(){q(-1),t()}}};return M}function x(e,t,n){return Math.min(Math.max(e,t),n)}function R(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,i=t.initialEntries,a=void 0===i?["/"]:i,s=t.initialIndex,r=void 0===s?0:s,d=t.keyLength,p=void 0===d?6:d,l=h();function c(e){(0,o.Z)(_,e),_.length=_.entries.length,l.notifyListeners(_.location,_.action)}function f(){return Math.random().toString(36).substr(2,p)}var y=x(r,0,a.length-1),b=a.map((function(e){return m(e,void 0,"string"==typeof e?f():e.key||f())})),g=u;function v(e){var t=x(_.index+e,0,_.entries.length-1),o=_.entries[t];l.confirmTransitionTo(o,"POP",n,(function(e){e?c({action:"POP",location:o,index:t}):c()}))}var _={length:b.length,action:"POP",location:b[y],index:y,entries:b,createHref:g,push:function(e,t){var o="PUSH",i=m(e,t,f(),_.location);l.confirmTransitionTo(i,o,n,(function(e){if(e){var t=_.index+1,n=_.entries.slice(0);n.length>t?n.splice(t,n.length-t,i):n.push(i),c({action:o,location:i,index:t,entries:n})}}))},replace:function(e,t){var o="REPLACE",i=m(e,t,f(),_.location);l.confirmTransitionTo(i,o,n,(function(e){e&&(_.entries[_.index]=i,c({action:o,location:i}))}))},go:v,goBack:function(){v(-1)},goForward:function(){v(1)},canGo:function(e){var t=_.index+e;return t>=0&&t<_.entries.length},block:function(e){return void 0===e&&(e=!1),l.setPrompt(e)},listen:function(e){return l.appendListener(e)}};return _}},8679:(e,t,n)=>{"use strict";var o=n(59864),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},s={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},r={};function d(e){return o.isMemo(e)?s:r[e.$$typeof]||i}r[o.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},r[o.Memo]=s;var p=Object.defineProperty,l=Object.getOwnPropertyNames,c=Object.getOwnPropertySymbols,u=Object.getOwnPropertyDescriptor,m=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,o){if("string"!=typeof n){if(h){var i=m(n);i&&i!==h&&e(t,i,o)}var s=l(n);c&&(s=s.concat(c(n)));for(var r=d(t),f=d(n),y=0;y<s.length;++y){var b=s[y];if(!(a[b]||o&&o[b]||f&&f[b]||r&&r[b])){var g=u(n,b);try{p(t,b,g)}catch(v){}}}}return t}},41143:e=>{"use strict";e.exports=function(e,t,n,o,i,a,s,r){if(!e){var d;if(void 0===t)d=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var p=[n,o,i,a,s,r],l=0;(d=new Error(t.replace(/%s/g,(function(){return p[l++]})))).name="Invariant Violation"}throw d.framesToPop=1,d}}},5826:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},41304:(e,t,n)=>{"use strict";n.r(t)},32497:(e,t,n)=>{"use strict";n.r(t)},52295:(e,t,n)=>{"use strict";n.r(t)},74865:function(e,t,n){var o,i;o=function(){var e,t,n={version:"0.2.0"},o=n.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function i(e,t,n){return e<t?t:e>n?n:e}function a(e){return 100*(-1+e)}function s(e,t,n){var i;return(i="translate3d"===o.positionUsing?{transform:"translate3d("+a(e)+"%,0,0)"}:"translate"===o.positionUsing?{transform:"translate("+a(e)+"%,0)"}:{"margin-left":a(e)+"%"}).transition="all "+t+"ms "+n,i}n.configure=function(e){var t,n;for(t in e)void 0!==(n=e[t])&&e.hasOwnProperty(t)&&(o[t]=n);return this},n.status=null,n.set=function(e){var t=n.isStarted();e=i(e,o.minimum,1),n.status=1===e?null:e;var a=n.render(!t),p=a.querySelector(o.barSelector),l=o.speed,c=o.easing;return a.offsetWidth,r((function(t){""===o.positionUsing&&(o.positionUsing=n.getPositioningCSS()),d(p,s(e,l,c)),1===e?(d(a,{transition:"none",opacity:1}),a.offsetWidth,setTimeout((function(){d(a,{transition:"all "+l+"ms linear",opacity:0}),setTimeout((function(){n.remove(),t()}),l)}),l)):setTimeout(t,l)})),this},n.isStarted=function(){return"number"==typeof n.status},n.start=function(){n.status||n.set(0);var e=function(){setTimeout((function(){n.status&&(n.trickle(),e())}),o.trickleSpeed)};return o.trickle&&e(),this},n.done=function(e){return e||n.status?n.inc(.3+.5*Math.random()).set(1):this},n.inc=function(e){var t=n.status;return t?("number"!=typeof e&&(e=(1-t)*i(Math.random()*t,.1,.95)),t=i(t+e,0,.994),n.set(t)):n.start()},n.trickle=function(){return n.inc(Math.random()*o.trickleRate)},e=0,t=0,n.promise=function(o){return o&&"resolved"!==o.state()?(0===t&&n.start(),e++,t++,o.always((function(){0==--t?(e=0,n.done()):n.set((e-t)/e)})),this):this},n.render=function(e){if(n.isRendered())return document.getElementById("nprogress");l(document.documentElement,"nprogress-busy");var t=document.createElement("div");t.id="nprogress",t.innerHTML=o.template;var i,s=t.querySelector(o.barSelector),r=e?"-100":a(n.status||0),p=document.querySelector(o.parent);return d(s,{transition:"all 0 linear",transform:"translate3d("+r+"%,0,0)"}),o.showSpinner||(i=t.querySelector(o.spinnerSelector))&&m(i),p!=document.body&&l(p,"nprogress-custom-parent"),p.appendChild(t),t},n.remove=function(){c(document.documentElement,"nprogress-busy"),c(document.querySelector(o.parent),"nprogress-custom-parent");var e=document.getElementById("nprogress");e&&m(e)},n.isRendered=function(){return!!document.getElementById("nprogress")},n.getPositioningCSS=function(){var e=document.body.style,t="WebkitTransform"in e?"Webkit":"MozTransform"in e?"Moz":"msTransform"in e?"ms":"OTransform"in e?"O":"";return t+"Perspective"in e?"translate3d":t+"Transform"in e?"translate":"margin"};var r=function(){var e=[];function t(){var n=e.shift();n&&n(t)}return function(n){e.push(n),1==e.length&&t()}}(),d=function(){var e=["Webkit","O","Moz","ms"],t={};function n(e){return e.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(e,t){return t.toUpperCase()}))}function o(t){var n=document.body.style;if(t in n)return t;for(var o,i=e.length,a=t.charAt(0).toUpperCase()+t.slice(1);i--;)if((o=e[i]+a)in n)return o;return t}function i(e){return e=n(e),t[e]||(t[e]=o(e))}function a(e,t,n){t=i(t),e.style[t]=n}return function(e,t){var n,o,i=arguments;if(2==i.length)for(n in t)void 0!==(o=t[n])&&t.hasOwnProperty(n)&&a(e,n,o);else a(e,i[1],i[2])}}();function p(e,t){return("string"==typeof e?e:u(e)).indexOf(" "+t+" ")>=0}function l(e,t){var n=u(e),o=n+t;p(n,t)||(e.className=o.substring(1))}function c(e,t){var n,o=u(e);p(e,t)&&(n=o.replace(" "+t+" "," "),e.className=n.substring(1,n.length-1))}function u(e){return(" "+(e.className||"")+" ").replace(/\s+/gi," ")}function m(e){e&&e.parentNode&&e.parentNode.removeChild(e)}return n},void 0===(i="function"==typeof o?o.call(t,n,t,e):o)||(e.exports=i)},27418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach((function(e){o[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(i){return!1}}()?Object.assign:function(e,i){for(var a,s,r=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),d=1;d<arguments.length;d++){for(var p in a=Object(arguments[d]))n.call(a,p)&&(r[p]=a[p]);if(t){s=t(a);for(var l=0;l<s.length;l++)o.call(a,s[l])&&(r[s[l]]=a[s[l]])}}return r}},87410:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var o=function(){var e=/(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i,t=0,n={},o={util:{encode:function e(t){return t instanceof i?new i(t.type,e(t.content),t.alias):Array.isArray(t)?t.map(e):t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++t}),e.__id},clone:function e(t,n){var i,a;switch(n=n||{},o.util.type(t)){case"Object":if(a=o.util.objId(t),n[a])return n[a];for(var s in i={},n[a]=i,t)t.hasOwnProperty(s)&&(i[s]=e(t[s],n));return i;case"Array":return a=o.util.objId(t),n[a]?n[a]:(i=[],n[a]=i,t.forEach((function(t,o){i[o]=e(t,n)})),i);default:return t}},getLanguage:function(t){for(;t;){var n=e.exec(t.className);if(n)return n[1].toLowerCase();t=t.parentElement}return"none"},setLanguage:function(t,n){t.className=t.className.replace(RegExp(e,"gi"),""),t.classList.add("language-"+n)},isActive:function(e,t,n){for(var o="no-"+t;e;){var i=e.classList;if(i.contains(t))return!0;if(i.contains(o))return!1;e=e.parentElement}return!!n}},languages:{plain:n,plaintext:n,text:n,txt:n,extend:function(e,t){var n=o.util.clone(o.languages[e]);for(var i in t)n[i]=t[i];return n},insertBefore:function(e,t,n,i){var a=(i=i||o.languages)[e],s={};for(var r in a)if(a.hasOwnProperty(r)){if(r==t)for(var d in n)n.hasOwnProperty(d)&&(s[d]=n[d]);n.hasOwnProperty(r)||(s[r]=a[r])}var p=i[e];return i[e]=s,o.languages.DFS(o.languages,(function(t,n){n===p&&t!=e&&(this[t]=s)})),s},DFS:function e(t,n,i,a){a=a||{};var s=o.util.objId;for(var r in t)if(t.hasOwnProperty(r)){n.call(t,r,t[r],i||r);var d=t[r],p=o.util.type(d);"Object"!==p||a[s(d)]?"Array"!==p||a[s(d)]||(a[s(d)]=!0,e(d,n,r,a)):(a[s(d)]=!0,e(d,n,null,a))}}},plugins:{},highlight:function(e,t,n){var a={code:e,grammar:t,language:n};return o.hooks.run("before-tokenize",a),a.tokens=o.tokenize(a.code,a.grammar),o.hooks.run("after-tokenize",a),i.stringify(o.util.encode(a.tokens),a.language)},tokenize:function(e,t){var n=t.rest;if(n){for(var o in n)t[o]=n[o];delete t.rest}var i=new r;return d(i,i.head,e),s(e,i,t,i.head,0),function(e){var t=[],n=e.head.next;for(;n!==e.tail;)t.push(n.value),n=n.next;return t}(i)},hooks:{all:{},add:function(e,t){var n=o.hooks.all;n[e]=n[e]||[],n[e].push(t)},run:function(e,t){var n=o.hooks.all[e];if(n&&n.length)for(var i,a=0;i=n[a++];)i(t)}},Token:i};function i(e,t,n,o){this.type=e,this.content=t,this.alias=n,this.length=0|(o||"").length}function a(e,t,n,o){e.lastIndex=t;var i=e.exec(n);if(i&&o&&i[1]){var a=i[1].length;i.index+=a,i[0]=i[0].slice(a)}return i}function s(e,t,n,r,l,c){for(var u in n)if(n.hasOwnProperty(u)&&n[u]){var m=n[u];m=Array.isArray(m)?m:[m];for(var h=0;h<m.length;++h){if(c&&c.cause==u+","+h)return;var f=m[h],y=f.inside,b=!!f.lookbehind,g=!!f.greedy,v=f.alias;if(g&&!f.pattern.global){var _=f.pattern.toString().match(/[imsuy]*$/)[0];f.pattern=RegExp(f.pattern.source,_+"g")}for(var k=f.pattern||f,w=r.next,S=l;w!==t.tail&&!(c&&S>=c.reach);S+=w.value.length,w=w.next){var T=w.value;if(t.length>e.length)return;if(!(T instanceof i)){var E,P=1;if(g){if(!(E=a(k,S,e,b))||E.index>=e.length)break;var x=E.index,R=E.index+E[0].length,A=S;for(A+=w.value.length;x>=A;)A+=(w=w.next).value.length;if(S=A-=w.value.length,w.value instanceof i)continue;for(var I=w;I!==t.tail&&(A<R||"string"==typeof I.value);I=I.next)P++,A+=I.value.length;P--,T=e.slice(S,A),E.index-=S}else if(!(E=a(k,0,T,b)))continue;x=E.index;var O=E[0],U=T.slice(0,x),N=T.slice(x+O.length),L=S+T.length;c&&L>c.reach&&(c.reach=L);var D=w.prev;if(U&&(D=d(t,D,U),S+=U.length),p(t,D,P),w=d(t,D,new i(u,y?o.tokenize(O,y):O,v,O)),N&&d(t,w,N),P>1){var C={cause:u+","+h,reach:L};s(e,t,n,w.prev,S,C),c&&C.reach>c.reach&&(c.reach=C.reach)}}}}}}function r(){var e={value:null,prev:null,next:null},t={value:null,prev:e,next:null};e.next=t,this.head=e,this.tail=t,this.length=0}function d(e,t,n){var o=t.next,i={value:n,prev:t,next:o};return t.next=i,o.prev=i,e.length++,i}function p(e,t,n){for(var o=t.next,i=0;i<n&&o!==e.tail;i++)o=o.next;t.next=o,o.prev=t,e.length-=i}return i.stringify=function e(t,n){if("string"==typeof t)return t;if(Array.isArray(t)){var i="";return t.forEach((function(t){i+=e(t,n)})),i}var a={type:t.type,content:e(t.content,n),tag:"span",classes:["token",t.type],attributes:{},language:n},s=t.alias;s&&(Array.isArray(s)?Array.prototype.push.apply(a.classes,s):a.classes.push(s)),o.hooks.run("wrap",a);var r="";for(var d in a.attributes)r+=" "+d+'="'+(a.attributes[d]||"").replace(/"/g,"&quot;")+'"';return"<"+a.tag+' class="'+a.classes.join(" ")+'"'+r+">"+a.content+"</"+a.tag+">"},o}(),i=o;o.default=o,i.languages.markup={comment:{pattern:/<!--(?:(?!<!--)[\s\S])*?-->/,greedy:!0},prolog:{pattern:/<\?[\s\S]+?\?>/,greedy:!0},doctype:{pattern:/<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,greedy:!0,inside:{"internal-subset":{pattern:/(^[^\[]*\[)[\s\S]+(?=\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/"[^"]*"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\]]/,"doctype-tag":/^DOCTYPE/i,name:/[^\s<>'"]+/}},cdata:{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,greedy:!0},tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"special-attr":[],"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:[{pattern:/&[\da-z]{1,8};/i,alias:"named-entity"},/&#x?[\da-f]{1,8};/i]},i.languages.markup.tag.inside["attr-value"].inside.entity=i.languages.markup.entity,i.languages.markup.doctype.inside["internal-subset"].inside=i.languages.markup,i.hooks.add("wrap",(function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))})),Object.defineProperty(i.languages.markup.tag,"addInlined",{value:function(e,t){var n={};n["language-"+t]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:i.languages[t]},n.cdata=/^<!\[CDATA\[|\]\]>$/i;var o={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:n}};o["language-"+t]={pattern:/[\s\S]+/,inside:i.languages[t]};var a={};a[e]={pattern:RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g,(function(){return e})),"i"),lookbehind:!0,greedy:!0,inside:o},i.languages.insertBefore("markup","cdata",a)}}),Object.defineProperty(i.languages.markup.tag,"addAttribute",{value:function(e,t){i.languages.markup.tag.inside["special-attr"].push({pattern:RegExp(/(^|["'\s])/.source+"(?:"+e+")"+/\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,"i"),lookbehind:!0,inside:{"attr-name":/^[^\s=]+/,"attr-value":{pattern:/=[\s\S]+/,inside:{value:{pattern:/(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,lookbehind:!0,alias:[t,"language-"+t],inside:i.languages[t]},punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}}}})}}),i.languages.html=i.languages.markup,i.languages.mathml=i.languages.markup,i.languages.svg=i.languages.markup,i.languages.xml=i.languages.extend("markup",{}),i.languages.ssml=i.languages.xml,i.languages.atom=i.languages.xml,i.languages.rss=i.languages.xml,function(e){var t="\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b",n={pattern:/(^(["']?)\w+\2)[ \t]+\S.*/,lookbehind:!0,alias:"punctuation",inside:null},o={bash:n,environment:{pattern:RegExp("\\$"+t),alias:"constant"},variable:[{pattern:/\$?\(\([\s\S]+?\)\)/,greedy:!0,inside:{variable:[{pattern:/(^\$\(\([\s\S]+)\)\)/,lookbehind:!0},/^\$\(\(/],number:/\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,operator:/--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,punctuation:/\(\(?|\)\)?|,|;/}},{pattern:/\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,greedy:!0,inside:{variable:/^\$\(|^`|\)$|`$/}},{pattern:/\$\{[^}]+\}/,greedy:!0,inside:{operator:/:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,punctuation:/[\[\]]/,environment:{pattern:RegExp("(\\{)"+t),lookbehind:!0,alias:"constant"}}},/\$(?:\w+|[#?*!@$])/],entity:/\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/};e.languages.bash={shebang:{pattern:/^#!\s*\/.*/,alias:"important"},comment:{pattern:/(^|[^"{\\$])#.*/,lookbehind:!0},"function-name":[{pattern:/(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,lookbehind:!0,alias:"function"},{pattern:/\b[\w-]+(?=\s*\(\s*\)\s*\{)/,alias:"function"}],"for-or-select":{pattern:/(\b(?:for|select)\s+)\w+(?=\s+in\s)/,alias:"variable",lookbehind:!0},"assign-left":{pattern:/(^|[\s;|&]|[<>]\()\w+(?=\+?=)/,inside:{environment:{pattern:RegExp("(^|[\\s;|&]|[<>]\\()"+t),lookbehind:!0,alias:"constant"}},alias:"variable",lookbehind:!0},string:[{pattern:/((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,lookbehind:!0,greedy:!0,inside:o},{pattern:/((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,lookbehind:!0,greedy:!0,inside:{bash:n}},{pattern:/(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,lookbehind:!0,greedy:!0,inside:o},{pattern:/(^|[^$\\])'[^']*'/,lookbehind:!0,greedy:!0},{pattern:/\$'(?:[^'\\]|\\[\s\S])*'/,greedy:!0,inside:{entity:o.entity}}],environment:{pattern:RegExp("\\$?"+t),alias:"constant"},variable:o.variable,function:{pattern:/(^|[\s;|&]|[<>]\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,lookbehind:!0},keyword:{pattern:/(^|[\s;|&]|[<>]\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\s;|&])/,lookbehind:!0},builtin:{pattern:/(^|[\s;|&]|[<>]\()(?:\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\s;|&])/,lookbehind:!0,alias:"class-name"},boolean:{pattern:/(^|[\s;|&]|[<>]\()(?:false|true)(?=$|[)\s;|&])/,lookbehind:!0},"file-descriptor":{pattern:/\B&\d\b/,alias:"important"},operator:{pattern:/\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,inside:{"file-descriptor":{pattern:/^\d/,alias:"important"}}},punctuation:/\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,number:{pattern:/(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,lookbehind:!0}},n.inside=e.languages.bash;for(var i=["comment","function-name","for-or-select","assign-left","string","environment","function","keyword","builtin","boolean","file-descriptor","operator","punctuation","number"],a=o.variable[1].inside,s=0;s<i.length;s++)a[i[s]]=e.languages.bash[i[s]];e.languages.shell=e.languages.bash}(i),i.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,boolean:/\b(?:false|true)\b/,function:/\b\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,punctuation:/[{}[\];(),.:]/},i.languages.c=i.languages.extend("clike",{comment:{pattern:/\/\/(?:[^\r\n\\]|\\(?:\r\n?|\n|(?![\r\n])))*|\/\*[\s\S]*?(?:\*\/|$)/,greedy:!0},string:{pattern:/"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,greedy:!0},"class-name":{pattern:/(\b(?:enum|struct)\s+(?:__attribute__\s*\(\([\s\S]*?\)\)\s*)?)\w+|\b[a-z]\w*_t\b/,lookbehind:!0},keyword:/\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\b/,function:/\b[a-z_]\w*(?=\s*\()/i,number:/(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ful]{0,4}/i,operator:/>>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?/}),i.languages.insertBefore("c","string",{char:{pattern:/'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n]){0,32}'/,greedy:!0}}),i.languages.insertBefore("c","string",{macro:{pattern:/(^[\t ]*)#\s*[a-z](?:[^\r\n\\/]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|\\(?:\r\n|[\s\S]))*/im,lookbehind:!0,greedy:!0,alias:"property",inside:{string:[{pattern:/^(#\s*include\s*)<[^>]+>/,lookbehind:!0},i.languages.c.string],char:i.languages.c.char,comment:i.languages.c.comment,"macro-name":[{pattern:/(^#\s*define\s+)\w+\b(?!\()/i,lookbehind:!0},{pattern:/(^#\s*define\s+)\w+\b(?=\()/i,lookbehind:!0,alias:"function"}],directive:{pattern:/^(#\s*)[a-z]+/,lookbehind:!0,alias:"keyword"},"directive-hash":/^#/,punctuation:/##|\\(?=[\r\n])/,expression:{pattern:/\S[\s\S]*/,inside:i.languages.c}}}}),i.languages.insertBefore("c","function",{constant:/\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\b/}),delete i.languages.c.boolean,function(e){var t=/\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/,n=/\b(?!<keyword>)\w+(?:\s*\.\s*\w+)*\b/.source.replace(/<keyword>/g,(function(){return t.source}));e.languages.cpp=e.languages.extend("c",{"class-name":[{pattern:RegExp(/(\b(?:class|concept|enum|struct|typename)\s+)(?!<keyword>)\w+/.source.replace(/<keyword>/g,(function(){return t.source}))),lookbehind:!0},/\b[A-Z]\w*(?=\s*::\s*\w+\s*\()/,/\b[A-Z_]\w*(?=\s*::\s*~\w+\s*\()/i,/\b\w+(?=\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\s*::\s*\w+\s*\()/],keyword:t,number:{pattern:/(?:\b0b[01']+|\b0x(?:[\da-f']+(?:\.[\da-f']*)?|\.[\da-f']+)(?:p[+-]?[\d']+)?|(?:\b[\d']+(?:\.[\d']*)?|\B\.[\d']+)(?:e[+-]?[\d']+)?)[ful]{0,4}/i,greedy:!0},operator:/>>=?|<<=?|->|--|\+\+|&&|\|\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/,boolean:/\b(?:false|true)\b/}),e.languages.insertBefore("cpp","string",{module:{pattern:RegExp(/(\b(?:import|module)\s+)/.source+"(?:"+/"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|<[^<>\r\n]*>/.source+"|"+/<mod-name>(?:\s*:\s*<mod-name>)?|:\s*<mod-name>/.source.replace(/<mod-name>/g,(function(){return n}))+")"),lookbehind:!0,greedy:!0,inside:{string:/^[<"][\s\S]+/,operator:/:/,punctuation:/\./}},"raw-string":{pattern:/R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,alias:"string",greedy:!0}}),e.languages.insertBefore("cpp","keyword",{"generic-function":{pattern:/\b(?!operator\b)[a-z_]\w*\s*<(?:[^<>]|<[^<>]*>)*>(?=\s*\()/i,inside:{function:/^\w+/,generic:{pattern:/<[\s\S]+/,alias:"class-name",inside:e.languages.cpp}}}}),e.languages.insertBefore("cpp","operator",{"double-colon":{pattern:/::/,alias:"punctuation"}}),e.languages.insertBefore("cpp","class-name",{"base-clause":{pattern:/(\b(?:class|struct)\s+\w+\s*:\s*)[^;{}"'\s]+(?:\s+[^;{}"'\s]+)*(?=\s*[;{])/,lookbehind:!0,greedy:!0,inside:e.languages.extend("cpp",{})}}),e.languages.insertBefore("inside","double-colon",{"class-name":/\b[a-z_]\w*\b(?!\s*::)/i},e.languages.cpp["base-clause"])}(i),function(e){var t=/(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;e.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,inside:{rule:/^@[\w-]+/,"selector-function-argument":{pattern:/(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,lookbehind:!0,alias:"selector"},keyword:{pattern:/(^|[^\w-])(?:and|not|only|or)(?![\w-])/,lookbehind:!0}}},url:{pattern:RegExp("\\burl\\((?:"+t.source+"|"+/(?:[^\\\r\n()"']|\\[\s\S])*/.source+")\\)","i"),greedy:!0,inside:{function:/^url/i,punctuation:/^\(|\)$/,string:{pattern:RegExp("^"+t.source+"$"),alias:"url"}}},selector:{pattern:RegExp("(^|[{}\\s])[^{}\\s](?:[^{};\"'\\s]|\\s+(?![\\s{])|"+t.source+")*(?=\\s*\\{)"),lookbehind:!0},string:{pattern:t,greedy:!0},property:{pattern:/(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,lookbehind:!0},important:/!important\b/i,function:{pattern:/(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,lookbehind:!0},punctuation:/[(){};:,]/},e.languages.css.atrule.inside.rest=e.languages.css;var n=e.languages.markup;n&&(n.tag.addInlined("style","css"),n.tag.addAttribute("style","css"))}(i),function(e){var t,n=/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;e.languages.css.selector={pattern:e.languages.css.selector.pattern,lookbehind:!0,inside:t={"pseudo-element":/:(?:after|before|first-letter|first-line|selection)|::[-\w]+/,"pseudo-class":/:[-\w]+/,class:/\.[-\w]+/,id:/#[-\w]+/,attribute:{pattern:RegExp("\\[(?:[^[\\]\"']|"+n.source+")*\\]"),greedy:!0,inside:{punctuation:/^\[|\]$/,"case-sensitivity":{pattern:/(\s)[si]$/i,lookbehind:!0,alias:"keyword"},namespace:{pattern:/^(\s*)(?:(?!\s)[-*\w\xA0-\uFFFF])*\|(?!=)/,lookbehind:!0,inside:{punctuation:/\|$/}},"attr-name":{pattern:/^(\s*)(?:(?!\s)[-\w\xA0-\uFFFF])+/,lookbehind:!0},"attr-value":[n,{pattern:/(=\s*)(?:(?!\s)[-\w\xA0-\uFFFF])+(?=\s*$)/,lookbehind:!0}],operator:/[|~*^$]?=/}},"n-th":[{pattern:/(\(\s*)[+-]?\d*[\dn](?:\s*[+-]\s*\d+)?(?=\s*\))/,lookbehind:!0,inside:{number:/[\dn]+/,operator:/[+-]/}},{pattern:/(\(\s*)(?:even|odd)(?=\s*\))/i,lookbehind:!0}],combinator:/>|\+|~|\|\|/,punctuation:/[(),]/}},e.languages.css.atrule.inside["selector-function-argument"].inside=t,e.languages.insertBefore("css","property",{variable:{pattern:/(^|[^-\w\xA0-\uFFFF])--(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*/i,lookbehind:!0}});var o={pattern:/(\b\d+)(?:%|[a-z]+(?![\w-]))/,lookbehind:!0},i={pattern:/(^|[^\w.-])-?(?:\d+(?:\.\d+)?|\.\d+)/,lookbehind:!0};e.languages.insertBefore("css","function",{operator:{pattern:/(\s)[+\-*\/](?=\s)/,lookbehind:!0},hexcode:{pattern:/\B#[\da-f]{3,8}\b/i,alias:"color"},color:[{pattern:/(^|[^\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\w-])/i,lookbehind:!0},{pattern:/\b(?:hsl|rgb)\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*\)\B|\b(?:hsl|rgb)a\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*(?:0|0?\.\d+|1)\s*\)\B/i,inside:{unit:o,number:i,function:/[\w-]+(?=\()/,punctuation:/[(),]/}}],entity:/\\[\da-f]{1,8}/i,unit:o,number:i})}(i),i.languages.javascript=i.languages.extend("clike",{"class-name":[i.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,lookbehind:!0}],keyword:[{pattern:/((?:^|\})\s*)catch\b/,lookbehind:!0},{pattern:/(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],function:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,number:{pattern:RegExp(/(^|[^\w$])/.source+"(?:"+/NaN|Infinity/.source+"|"+/0[bB][01]+(?:_[01]+)*n?/.source+"|"+/0[oO][0-7]+(?:_[0-7]+)*n?/.source+"|"+/0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source+"|"+/\d+(?:_\d+)*n/.source+"|"+/(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source+")"+/(?![\w$])/.source),lookbehind:!0},operator:/--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/}),i.languages.javascript["class-name"][0].pattern=/(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/,i.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,lookbehind:!0,greedy:!0,inside:{"regex-source":{pattern:/^(\/)[\s\S]+(?=\/[a-z]*$)/,lookbehind:!0,alias:"language-regex",inside:i.languages.regex},"regex-delimiter":/^\/|\/$/,"regex-flags":/^[a-z]+$/}},"function-variable":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,lookbehind:!0,inside:i.languages.javascript},{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,lookbehind:!0,inside:i.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,lookbehind:!0,inside:i.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,lookbehind:!0,inside:i.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),i.languages.insertBefore("javascript","string",{hashbang:{pattern:/^#!.*/,greedy:!0,alias:"comment"},"template-string":{pattern:/`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/,alias:"punctuation"},rest:i.languages.javascript}},string:/[\s\S]+/}},"string-property":{pattern:/((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,lookbehind:!0,greedy:!0,alias:"property"}}),i.languages.insertBefore("javascript","operator",{"literal-property":{pattern:/((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,lookbehind:!0,alias:"property"}}),i.languages.markup&&(i.languages.markup.tag.addInlined("script","javascript"),i.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,"javascript")),i.languages.js=i.languages.javascript,function(e){var t=/#(?!\{).+/,n={pattern:/#\{[^}]+\}/,alias:"variable"};e.languages.coffeescript=e.languages.extend("javascript",{comment:t,string:[{pattern:/'(?:\\[\s\S]|[^\\'])*'/,greedy:!0},{pattern:/"(?:\\[\s\S]|[^\\"])*"/,greedy:!0,inside:{interpolation:n}}],keyword:/\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\b/,"class-member":{pattern:/@(?!\d)\w+/,alias:"variable"}}),e.languages.insertBefore("coffeescript","comment",{"multiline-comment":{pattern:/###[\s\S]+?###/,alias:"comment"},"block-regex":{pattern:/\/{3}[\s\S]*?\/{3}/,alias:"regex",inside:{comment:t,interpolation:n}}}),e.languages.insertBefore("coffeescript","string",{"inline-javascript":{pattern:/`(?:\\[\s\S]|[^\\`])*`/,inside:{delimiter:{pattern:/^`|`$/,alias:"punctuation"},script:{pattern:/[\s\S]+/,alias:"language-javascript",inside:e.languages.javascript}}},"multiline-string":[{pattern:/'''[\s\S]*?'''/,greedy:!0,alias:"string"},{pattern:/"""[\s\S]*?"""/,greedy:!0,alias:"string",inside:{interpolation:n}}]}),e.languages.insertBefore("coffeescript","keyword",{property:/(?!\d)\w+(?=\s*:(?!:))/}),delete e.languages.coffeescript["template-string"],e.languages.coffee=e.languages.coffeescript}(i),function(e){var t=/[*&][^\s[\]{},]+/,n=/!(?:<[\w\-%#;/?:@&=+$,.!~*'()[\]]+>|(?:[a-zA-Z\d-]*!)?[\w\-%#;/?:@&=+$.~*'()]+)?/,o="(?:"+n.source+"(?:[ \t]+"+t.source+")?|"+t.source+"(?:[ \t]+"+n.source+")?)",i=/(?:[^\s\x00-\x08\x0e-\x1f!"#%&'*,\-:>?@[\]`{|}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]|[?:-]<PLAIN>)(?:[ \t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g,(function(){return/[^\s\x00-\x08\x0e-\x1f,[\]{}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]/.source})),a=/"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'/.source;function s(e,t){t=(t||"").replace(/m/g,"")+"m";var n=/([:\-,[{]\s*(?:\s<<prop>>[ \t]+)?)(?:<<value>>)(?=[ \t]*(?:$|,|\]|\}|(?:[\r\n]\s*)?#))/.source.replace(/<<prop>>/g,(function(){return o})).replace(/<<value>>/g,(function(){return e}));return RegExp(n,t)}e.languages.yaml={scalar:{pattern:RegExp(/([\-:]\s*(?:\s<<prop>>[ \t]+)?[|>])[ \t]*(?:((?:\r?\n|\r)[ \t]+)\S[^\r\n]*(?:\2[^\r\n]+)*)/.source.replace(/<<prop>>/g,(function(){return o}))),lookbehind:!0,alias:"string"},comment:/#.*/,key:{pattern:RegExp(/((?:^|[:\-,[{\r\n?])[ \t]*(?:<<prop>>[ \t]+)?)<<key>>(?=\s*:\s)/.source.replace(/<<prop>>/g,(function(){return o})).replace(/<<key>>/g,(function(){return"(?:"+i+"|"+a+")"}))),lookbehind:!0,greedy:!0,alias:"atrule"},directive:{pattern:/(^[ \t]*)%.+/m,lookbehind:!0,alias:"important"},datetime:{pattern:s(/\d{4}-\d\d?-\d\d?(?:[tT]|[ \t]+)\d\d?:\d{2}:\d{2}(?:\.\d*)?(?:[ \t]*(?:Z|[-+]\d\d?(?::\d{2})?))?|\d{4}-\d{2}-\d{2}|\d\d?:\d{2}(?::\d{2}(?:\.\d*)?)?/.source),lookbehind:!0,alias:"number"},boolean:{pattern:s(/false|true/.source,"i"),lookbehind:!0,alias:"important"},null:{pattern:s(/null|~/.source,"i"),lookbehind:!0,alias:"important"},string:{pattern:s(a),lookbehind:!0,greedy:!0},number:{pattern:s(/[+-]?(?:0x[\da-f]+|0o[0-7]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|\.inf|\.nan)/.source,"i"),lookbehind:!0},tag:n,important:t,punctuation:/---|[:[\]{}\-,|>?]|\.\.\./},e.languages.yml=e.languages.yaml}(i),function(e){var t=/(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?![\r\n]))/.source;function n(e){return e=e.replace(/<inner>/g,(function(){return t})),RegExp(/((?:^|[^\\])(?:\\{2})*)/.source+"(?:"+e+")")}var o=/(?:\\.|``(?:[^`\r\n]|`(?!`))+``|`[^`\r\n]+`|[^\\|\r\n`])+/.source,i=/\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|(?![\s\S]))/.source.replace(/__/g,(function(){return o})),a=/\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/.source;e.languages.markdown=e.languages.extend("markup",{}),e.languages.insertBefore("markdown","prolog",{"front-matter-block":{pattern:/(^(?:\s*[\r\n])?)---(?!.)[\s\S]*?[\r\n]---(?!.)/,lookbehind:!0,greedy:!0,inside:{punctuation:/^---|---$/,"front-matter":{pattern:/\S+(?:\s+\S+)*/,alias:["yaml","language-yaml"],inside:e.languages.yaml}}},blockquote:{pattern:/^>(?:[\t ]*>)*/m,alias:"punctuation"},table:{pattern:RegExp("^"+i+a+"(?:"+i+")*","m"),inside:{"table-data-rows":{pattern:RegExp("^("+i+a+")(?:"+i+")*$"),lookbehind:!0,inside:{"table-data":{pattern:RegExp(o),inside:e.languages.markdown},punctuation:/\|/}},"table-line":{pattern:RegExp("^("+i+")"+a+"$"),lookbehind:!0,inside:{punctuation:/\||:?-{3,}:?/}},"table-header-row":{pattern:RegExp("^"+i+"$"),inside:{"table-header":{pattern:RegExp(o),alias:"important",inside:e.languages.markdown},punctuation:/\|/}}}},code:[{pattern:/((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,lookbehind:!0,alias:"keyword"},{pattern:/^```[\s\S]*?^```$/m,greedy:!0,inside:{"code-block":{pattern:/^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,lookbehind:!0},"code-language":{pattern:/^(```).+/,lookbehind:!0},punctuation:/```/}}],title:[{pattern:/\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,alias:"important",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\s*)#.+/m,lookbehind:!0,alias:"important",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,lookbehind:!0,alias:"punctuation"},list:{pattern:/(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,lookbehind:!0,alias:"punctuation"},"url-reference":{pattern:/!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,inside:{variable:{pattern:/^(!?\[)[^\]]+/,lookbehind:!0},string:/(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,punctuation:/^[\[\]!:]|[<>]/},alias:"url"},bold:{pattern:n(/\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\b|\*\*(?:(?!\*)<inner>|\*(?:(?!\*)<inner>)+\*)+\*\*/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^..)[\s\S]+(?=..$)/,lookbehind:!0,inside:{}},punctuation:/\*\*|__/}},italic:{pattern:n(/\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\b|\*(?:(?!\*)<inner>|\*\*(?:(?!\*)<inner>)+\*\*)+\*/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^.)[\s\S]+(?=.$)/,lookbehind:!0,inside:{}},punctuation:/[*_]/}},strike:{pattern:n(/(~~?)(?:(?!~)<inner>)+\2/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^~~?)[\s\S]+(?=\1$)/,lookbehind:!0,inside:{}},punctuation:/~~?/}},"code-snippet":{pattern:/(^|[^\\`])(?:``[^`\r\n]+(?:`[^`\r\n]+)*``(?!`)|`[^`\r\n]+`(?!`))/,lookbehind:!0,greedy:!0,alias:["code","keyword"]},url:{pattern:n(/!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)|[ \t]?\[(?:(?!\])<inner>)+\])/.source),lookbehind:!0,greedy:!0,inside:{operator:/^!/,content:{pattern:/(^\[)[^\]]+(?=\])/,lookbehind:!0,inside:{}},variable:{pattern:/(^\][ \t]?\[)[^\]]+(?=\]$)/,lookbehind:!0},url:{pattern:/(^\]\()[^\s)]+/,lookbehind:!0},string:{pattern:/(^[ \t]+)"(?:\\.|[^"\\])*"(?=\)$)/,lookbehind:!0}}}}),["url","bold","italic","strike"].forEach((function(t){["url","bold","italic","strike","code-snippet"].forEach((function(n){t!==n&&(e.languages.markdown[t].inside.content.inside[n]=e.languages.markdown[n])}))})),e.hooks.add("after-tokenize",(function(e){"markdown"!==e.language&&"md"!==e.language||function e(t){if(t&&"string"!=typeof t)for(var n=0,o=t.length;n<o;n++){var i=t[n];if("code"===i.type){var a=i.content[1],s=i.content[3];if(a&&s&&"code-language"===a.type&&"code-block"===s.type&&"string"==typeof a.content){var r=a.content.replace(/\b#/g,"sharp").replace(/\b\+\+/g,"pp"),d="language-"+(r=(/[a-z][\w-]*/i.exec(r)||[""])[0].toLowerCase());s.alias?"string"==typeof s.alias?s.alias=[s.alias,d]:s.alias.push(d):s.alias=[d]}}else e(i.content)}}(e.tokens)})),e.hooks.add("wrap",(function(t){if("code-block"===t.type){for(var n="",o=0,i=t.classes.length;o<i;o++){var a=t.classes[o],p=/language-(.+)/.exec(a);if(p){n=p[1];break}}var l,c=e.languages[n];if(c)t.content=e.highlight((l=t.content,l.replace(s,"").replace(/&(\w{1,8}|#x?[\da-f]{1,8});/gi,(function(e,t){var n;if("#"===(t=t.toLowerCase())[0])return n="x"===t[1]?parseInt(t.slice(2),16):Number(t.slice(1)),d(n);var o=r[t];return o||e}))),c,n);else if(n&&"none"!==n&&e.plugins.autoloader){var u="md-"+(new Date).valueOf()+"-"+Math.floor(1e16*Math.random());t.attributes.id=u,e.plugins.autoloader.loadLanguages(n,(function(){var t=document.getElementById(u);t&&(t.innerHTML=e.highlight(t.textContent,e.languages[n],n))}))}}}));var s=RegExp(e.languages.markup.tag.pattern.source,"gi"),r={amp:"&",lt:"<",gt:">",quot:'"'},d=String.fromCodePoint||String.fromCharCode;e.languages.md=e.languages.markdown}(i),i.languages.graphql={comment:/#.*/,description:{pattern:/(?:"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*")(?=\s*[a-z_])/i,greedy:!0,alias:"string",inside:{"language-markdown":{pattern:/(^"(?:"")?)(?!\1)[\s\S]+(?=\1$)/,lookbehind:!0,inside:i.languages.markdown}}},string:{pattern:/"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*"/,greedy:!0},number:/(?:\B-|\b)\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,boolean:/\b(?:false|true)\b/,variable:/\$[a-z_]\w*/i,directive:{pattern:/@[a-z_]\w*/i,alias:"function"},"attr-name":{pattern:/\b[a-z_]\w*(?=\s*(?:\((?:[^()"]|"(?:\\.|[^\\"\r\n])*")*\))?:)/i,greedy:!0},"atom-input":{pattern:/\b[A-Z]\w*Input\b/,alias:"class-name"},scalar:/\b(?:Boolean|Float|ID|Int|String)\b/,constant:/\b[A-Z][A-Z_\d]*\b/,"class-name":{pattern:/(\b(?:enum|implements|interface|on|scalar|type|union)\s+|&\s*|:\s*|\[)[A-Z_]\w*/,lookbehind:!0},fragment:{pattern:/(\bfragment\s+|\.{3}\s*(?!on\b))[a-zA-Z_]\w*/,lookbehind:!0,alias:"function"},"definition-mutation":{pattern:/(\bmutation\s+)[a-zA-Z_]\w*/,lookbehind:!0,alias:"function"},"definition-query":{pattern:/(\bquery\s+)[a-zA-Z_]\w*/,lookbehind:!0,alias:"function"},keyword:/\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\b/,operator:/[!=|&]|\.{3}/,"property-query":/\w+(?=\s*\()/,object:/\w+(?=\s*\{)/,punctuation:/[!(){}\[\]:=,]/,property:/\w+/},i.hooks.add("after-tokenize",(function(e){if("graphql"===e.language)for(var t=e.tokens.filter((function(e){return"string"!=typeof e&&"comment"!==e.type&&"scalar"!==e.type})),n=0;n<t.length;){var o=t[n++];if("keyword"===o.type&&"mutation"===o.content){var i=[];if(c(["definition-mutation","punctuation"])&&"("===l(1).content){n+=2;var a=u(/^\($/,/^\)$/);if(-1===a)continue;for(;n<a;n++){var s=l(0);"variable"===s.type&&(m(s,"variable-input"),i.push(s.content))}n=a+1}if(c(["punctuation","property-query"])&&"{"===l(0).content&&(n++,m(l(0),"property-mutation"),i.length>0)){var r=u(/^\{$/,/^\}$/);if(-1===r)continue;for(var d=n;d<r;d++){var p=t[d];"variable"===p.type&&i.indexOf(p.content)>=0&&m(p,"variable-input")}}}}function l(e){return t[n+e]}function c(e,t){t=t||0;for(var n=0;n<e.length;n++){var o=l(n+t);if(!o||o.type!==e[n])return!1}return!0}function u(e,o){for(var i=1,a=n;a<t.length;a++){var s=t[a],r=s.content;if("punctuation"===s.type&&"string"==typeof r)if(e.test(r))i++;else if(o.test(r)&&0===--i)return a}return-1}function m(e,t){var n=e.alias;n?Array.isArray(n)||(e.alias=n=[n]):e.alias=n=[],n.push(t)}})),i.languages.sql={comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,lookbehind:!0},variable:[{pattern:/@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,greedy:!0},/@[\w.$]+/],string:{pattern:/(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,greedy:!0,lookbehind:!0},identifier:{pattern:/(^|[^@\\])`(?:\\[\s\S]|[^`\\]|``)*`/,greedy:!0,lookbehind:!0,inside:{punctuation:/^`|`$/}},function:/\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,keyword:/\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,boolean:/\b(?:FALSE|NULL|TRUE)\b/i,number:/\b0x[\da-f]+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,operator:/[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,punctuation:/[;[\]()`,.]/},function(e){var t=e.languages.javascript["template-string"],n=t.pattern.source,o=t.inside.interpolation,i=o.inside["interpolation-punctuation"],a=o.pattern.source;function s(t,o){if(e.languages[t])return{pattern:RegExp("((?:"+o+")\\s*)"+n),lookbehind:!0,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},"embedded-code":{pattern:/[\s\S]+/,alias:t}}}}function r(e,t){return"___"+t.toUpperCase()+"_"+e+"___"}function d(t,n,o){var i={code:t,grammar:n,language:o};return e.hooks.run("before-tokenize",i),i.tokens=e.tokenize(i.code,i.grammar),e.hooks.run("after-tokenize",i),i.tokens}function p(t){var n={};n["interpolation-punctuation"]=i;var a=e.tokenize(t,n);if(3===a.length){var s=[1,1];s.push.apply(s,d(a[1],e.languages.javascript,"javascript")),a.splice.apply(a,s)}return new e.Token("interpolation",a,o.alias,t)}function l(t,n,o){var i=e.tokenize(t,{interpolation:{pattern:RegExp(a),lookbehind:!0}}),s=0,l={},c=d(i.map((function(e){if("string"==typeof e)return e;for(var n,i=e.content;-1!==t.indexOf(n=r(s++,o)););return l[n]=i,n})).join(""),n,o),u=Object.keys(l);return s=0,function e(t){for(var n=0;n<t.length;n++){if(s>=u.length)return;var o=t[n];if("string"==typeof o||"string"==typeof o.content){var i=u[s],a="string"==typeof o?o:o.content,r=a.indexOf(i);if(-1!==r){++s;var d=a.substring(0,r),c=p(l[i]),m=a.substring(r+i.length),h=[];if(d&&h.push(d),h.push(c),m){var f=[m];e(f),h.push.apply(h,f)}"string"==typeof o?(t.splice.apply(t,[n,1].concat(h)),n+=h.length-1):o.content=h}}else{var y=o.content;Array.isArray(y)?e(y):e([y])}}}(c),new e.Token(o,c,"language-"+o,t)}e.languages.javascript["template-string"]=[s("css",/\b(?:styled(?:\([^)]*\))?(?:\s*\.\s*\w+(?:\([^)]*\))*)*|css(?:\s*\.\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source),s("html",/\bhtml|\.\s*(?:inner|outer)HTML\s*\+?=/.source),s("svg",/\bsvg/.source),s("markdown",/\b(?:markdown|md)/.source),s("graphql",/\b(?:gql|graphql(?:\s*\.\s*experimental)?)/.source),s("sql",/\bsql/.source),t].filter(Boolean);var c={javascript:!0,js:!0,typescript:!0,ts:!0,jsx:!0,tsx:!0};function u(e){return"string"==typeof e?e:Array.isArray(e)?e.map(u).join(""):u(e.content)}e.hooks.add("after-tokenize",(function(t){t.language in c&&function t(n){for(var o=0,i=n.length;o<i;o++){var a=n[o];if("string"!=typeof a){var s=a.content;if(Array.isArray(s))if("template-string"===a.type){var r=s[1];if(3===s.length&&"string"!=typeof r&&"embedded-code"===r.type){var d=u(r),p=r.alias,c=Array.isArray(p)?p[0]:p,m=e.languages[c];if(!m)continue;s[1]=l(d,m,c)}}else t(s);else"string"!=typeof s&&t([s])}}}(t.tokens)}))}(i),function(e){e.languages.typescript=e.languages.extend("javascript",{"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,lookbehind:!0,greedy:!0,inside:null},builtin:/\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\b/}),e.languages.typescript.keyword.push(/\b(?:abstract|declare|is|keyof|readonly|require)\b/,/\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,/\btype\b(?=\s*(?:[\{*]|$))/),delete e.languages.typescript.parameter,delete e.languages.typescript["literal-property"];var t=e.languages.extend("typescript",{});delete t["class-name"],e.languages.typescript["class-name"].inside=t,e.languages.insertBefore("typescript","function",{decorator:{pattern:/@[$\w\xA0-\uFFFF]+/,inside:{at:{pattern:/^@/,alias:"operator"},function:/^[\s\S]+/}},"generic-function":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,greedy:!0,inside:{function:/^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,generic:{pattern:/<[\s\S]+/,alias:"class-name",inside:t}}}}),e.languages.ts=e.languages.typescript}(i),function(e){function t(e,t){return RegExp(e.replace(/<ID>/g,(function(){return/(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/.source})),t)}e.languages.insertBefore("javascript","function-variable",{"method-variable":{pattern:RegExp("(\\.\\s*)"+e.languages.javascript["function-variable"].pattern.source),lookbehind:!0,alias:["function-variable","method","function","property-access"]}}),e.languages.insertBefore("javascript","function",{method:{pattern:RegExp("(\\.\\s*)"+e.languages.javascript.function.source),lookbehind:!0,alias:["function","property-access"]}}),e.languages.insertBefore("javascript","constant",{"known-class-name":[{pattern:/\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\b/,alias:"class-name"},{pattern:/\b(?:[A-Z]\w*)Error\b/,alias:"class-name"}]}),e.languages.insertBefore("javascript","keyword",{imports:{pattern:t(/(\bimport\b\s*)(?:<ID>(?:\s*,\s*(?:\*\s*as\s+<ID>|\{[^{}]*\}))?|\*\s*as\s+<ID>|\{[^{}]*\})(?=\s*\bfrom\b)/.source),lookbehind:!0,inside:e.languages.javascript},exports:{pattern:t(/(\bexport\b\s*)(?:\*(?:\s*as\s+<ID>)?(?=\s*\bfrom\b)|\{[^{}]*\})/.source),lookbehind:!0,inside:e.languages.javascript}}),e.languages.javascript.keyword.unshift({pattern:/\b(?:as|default|export|from|import)\b/,alias:"module"},{pattern:/\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\b/,alias:"control-flow"},{pattern:/\bnull\b/,alias:["null","nil"]},{pattern:/\bundefined\b/,alias:"nil"}),e.languages.insertBefore("javascript","operator",{spread:{pattern:/\.{3}/,alias:"operator"},arrow:{pattern:/=>/,alias:"operator"}}),e.languages.insertBefore("javascript","punctuation",{"property-access":{pattern:t(/(\.\s*)#?<ID>/.source),lookbehind:!0},"maybe-class-name":{pattern:/(^|[^$\w\xA0-\uFFFF])[A-Z][$\w\xA0-\uFFFF]+/,lookbehind:!0},dom:{pattern:/\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\b/,alias:"variable"},console:{pattern:/\bconsole(?=\s*\.)/,alias:"class-name"}});for(var n=["function","function-variable","method","method-variable","property-access"],o=0;o<n.length;o++){var i=n[o],a=e.languages.javascript[i];"RegExp"===e.util.type(a)&&(a=e.languages.javascript[i]={pattern:a});var s=a.inside||{};a.inside=s,s["maybe-class-name"]=/^[A-Z][\s\S]*/}}(i),function(e){var t=e.util.clone(e.languages.javascript),n=/(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))\*\/)/.source,o=/(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source,i=/(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/.source;function a(e,t){return e=e.replace(/<S>/g,(function(){return n})).replace(/<BRACES>/g,(function(){return o})).replace(/<SPREAD>/g,(function(){return i})),RegExp(e,t)}i=a(i).source,e.languages.jsx=e.languages.extend("markup",t),e.languages.jsx.tag.pattern=a(/<\/?(?:[\w.:-]+(?:<S>+(?:[\w.:$-]+(?:=(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\/?)?>/.source),e.languages.jsx.tag.inside.tag.pattern=/^<\/?[^\s>\/]*/,e.languages.jsx.tag.inside["attr-value"].pattern=/=(?!\{)(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s'">]+)/,e.languages.jsx.tag.inside.tag.inside["class-name"]=/^[A-Z]\w*(?:\.[A-Z]\w*)*$/,e.languages.jsx.tag.inside.comment=t.comment,e.languages.insertBefore("inside","attr-name",{spread:{pattern:a(/<SPREAD>/.source),inside:e.languages.jsx}},e.languages.jsx.tag),e.languages.insertBefore("inside","special-attr",{script:{pattern:a(/=<BRACES>/.source),alias:"language-javascript",inside:{"script-punctuation":{pattern:/^=(?=\{)/,alias:"punctuation"},rest:e.languages.jsx}}},e.languages.jsx.tag);var s=function(e){return e?"string"==typeof e?e:"string"==typeof e.content?e.content:e.content.map(s).join(""):""},r=function(t){for(var n=[],o=0;o<t.length;o++){var i=t[o],a=!1;if("string"!=typeof i&&("tag"===i.type&&i.content[0]&&"tag"===i.content[0].type?"</"===i.content[0].content[0].content?n.length>0&&n[n.length-1].tagName===s(i.content[0].content[1])&&n.pop():"/>"===i.content[i.content.length-1].content||n.push({tagName:s(i.content[0].content[1]),openedBraces:0}):n.length>0&&"punctuation"===i.type&&"{"===i.content?n[n.length-1].openedBraces++:n.length>0&&n[n.length-1].openedBraces>0&&"punctuation"===i.type&&"}"===i.content?n[n.length-1].openedBraces--:a=!0),(a||"string"==typeof i)&&n.length>0&&0===n[n.length-1].openedBraces){var d=s(i);o<t.length-1&&("string"==typeof t[o+1]||"plain-text"===t[o+1].type)&&(d+=s(t[o+1]),t.splice(o+1,1)),o>0&&("string"==typeof t[o-1]||"plain-text"===t[o-1].type)&&(d=s(t[o-1])+d,t.splice(o-1,1),o--),t[o]=new e.Token("plain-text",d,null,d)}i.content&&"string"!=typeof i.content&&r(i.content)}};e.hooks.add("after-tokenize",(function(e){"jsx"!==e.language&&"tsx"!==e.language||r(e.tokens)}))}(i),function(e){e.languages.diff={coord:[/^(?:\*{3}|-{3}|\+{3}).*$/m,/^@@.*@@$/m,/^\d.*$/m]};var t={"deleted-sign":"-","deleted-arrow":"<","inserted-sign":"+","inserted-arrow":">",unchanged:" ",diff:"!"};Object.keys(t).forEach((function(n){var o=t[n],i=[];/^\w+$/.test(n)||i.push(/\w+/.exec(n)[0]),"diff"===n&&i.push("bold"),e.languages.diff[n]={pattern:RegExp("^(?:["+o+"].*(?:\r\n?|\n|(?![\\s\\S])))+","m"),alias:i,inside:{line:{pattern:/(.)(?=[\s\S]).*(?:\r\n?|\n)?/,lookbehind:!0},prefix:{pattern:/[\s\S]/,alias:/\w+/.exec(n)[0]}}}})),Object.defineProperty(e.languages.diff,"PREFIXES",{value:t})}(i),i.languages.git={comment:/^#.*/m,deleted:/^[-\u2013].*/m,inserted:/^\+.*/m,string:/("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,command:{pattern:/^.*\$ git .*$/m,inside:{parameter:/\s--?\w+/}},coord:/^@@.*@@$/m,"commit-sha1":/^commit \w{40}$/m},i.languages.go=i.languages.extend("clike",{string:{pattern:/(^|[^\\])"(?:\\.|[^"\\\r\n])*"|`[^`]*`/,lookbehind:!0,greedy:!0},keyword:/\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/,boolean:/\b(?:_|false|iota|nil|true)\b/,number:[/\b0(?:b[01_]+|o[0-7_]+)i?\b/i,/\b0x(?:[a-f\d_]+(?:\.[a-f\d_]*)?|\.[a-f\d_]+)(?:p[+-]?\d+(?:_\d+)*)?i?(?!\w)/i,/(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?[\d_]+)?i?(?!\w)/i],operator:/[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./,builtin:/\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\b/}),i.languages.insertBefore("go","string",{char:{pattern:/'(?:\\.|[^'\\\r\n]){0,10}'/,greedy:!0}}),delete i.languages.go["class-name"],function(e){function t(e,t){return"___"+e.toUpperCase()+t+"___"}Object.defineProperties(e.languages["markup-templating"]={},{buildPlaceholders:{value:function(n,o,i,a){if(n.language===o){var s=n.tokenStack=[];n.code=n.code.replace(i,(function(e){if("function"==typeof a&&!a(e))return e;for(var i,r=s.length;-1!==n.code.indexOf(i=t(o,r));)++r;return s[r]=e,i})),n.grammar=e.languages.markup}}},tokenizePlaceholders:{value:function(n,o){if(n.language===o&&n.tokenStack){n.grammar=e.languages[o];var i=0,a=Object.keys(n.tokenStack);!function s(r){for(var d=0;d<r.length&&!(i>=a.length);d++){var p=r[d];if("string"==typeof p||p.content&&"string"==typeof p.content){var l=a[i],c=n.tokenStack[l],u="string"==typeof p?p:p.content,m=t(o,l),h=u.indexOf(m);if(h>-1){++i;var f=u.substring(0,h),y=new e.Token(o,e.tokenize(c,n.grammar),"language-"+o,c),b=u.substring(h+m.length),g=[];f&&g.push.apply(g,s([f])),g.push(y),b&&g.push.apply(g,s([b])),"string"==typeof p?r.splice.apply(r,[d,1].concat(g)):p.content=g}}else p.content&&s(p.content)}return r}(n.tokens)}}}})}(i),function(e){e.languages.handlebars={comment:/\{\{![\s\S]*?\}\}/,delimiter:{pattern:/^\{\{\{?|\}\}\}?$/,alias:"punctuation"},string:/(["'])(?:\\.|(?!\1)[^\\\r\n])*\1/,number:/\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee][+-]?\d+)?/,boolean:/\b(?:false|true)\b/,block:{pattern:/^(\s*(?:~\s*)?)[#\/]\S+?(?=\s*(?:~\s*)?$|\s)/,lookbehind:!0,alias:"keyword"},brackets:{pattern:/\[[^\]]+\]/,inside:{punctuation:/\[|\]/,variable:/[\s\S]+/}},punctuation:/[!"#%&':()*+,.\/;<=>@\[\\\]^`{|}~]/,variable:/[^!"#%&'()*+,\/;<=>@\[\\\]^`{|}~\s]+/},e.hooks.add("before-tokenize",(function(t){e.languages["markup-templating"].buildPlaceholders(t,"handlebars",/\{\{\{[\s\S]+?\}\}\}|\{\{[\s\S]+?\}\}/g)})),e.hooks.add("after-tokenize",(function(t){e.languages["markup-templating"].tokenizePlaceholders(t,"handlebars")})),e.languages.hbs=e.languages.handlebars}(i),i.languages.json={property:{pattern:/(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,lookbehind:!0,greedy:!0},string:{pattern:/(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,lookbehind:!0,greedy:!0},comment:{pattern:/\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,greedy:!0},number:/-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,punctuation:/[{}[\],]/,operator:/:/,boolean:/\b(?:false|true)\b/,null:{pattern:/\bnull\b/,alias:"keyword"}},i.languages.webmanifest=i.languages.json,i.languages.less=i.languages.extend("css",{comment:[/\/\*[\s\S]*?\*\//,{pattern:/(^|[^\\])\/\/.*/,lookbehind:!0}],atrule:{pattern:/@[\w-](?:\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};\s]|\s+(?!\s))*?(?=\s*\{)/,inside:{punctuation:/[:()]/}},selector:{pattern:/(?:@\{[\w-]+\}|[^{};\s@])(?:@\{[\w-]+\}|\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};@\s]|\s+(?!\s))*?(?=\s*\{)/,inside:{variable:/@+[\w-]+/}},property:/(?:@\{[\w-]+\}|[\w-])+(?:\+_?)?(?=\s*:)/,operator:/[+\-*\/]/}),i.languages.insertBefore("less","property",{variable:[{pattern:/@[\w-]+\s*:/,inside:{punctuation:/:/}},/@@?[\w-]+/],"mixin-usage":{pattern:/([{;]\s*)[.#](?!\d)[\w-].*?(?=[(;])/,lookbehind:!0,alias:"function"}}),i.languages.makefile={comment:{pattern:/(^|[^\\])#(?:\\(?:\r\n|[\s\S])|[^\\\r\n])*/,lookbehind:!0},string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"builtin-target":{pattern:/\.[A-Z][^:#=\s]+(?=\s*:(?!=))/,alias:"builtin"},target:{pattern:/^(?:[^:=\s]|[ \t]+(?![\s:]))+(?=\s*:(?!=))/m,alias:"symbol",inside:{variable:/\$+(?:(?!\$)[^(){}:#=\s]+|(?=[({]))/}},variable:/\$+(?:(?!\$)[^(){}:#=\s]+|\([@*%<^+?][DF]\)|(?=[({]))/,keyword:/-include\b|\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\b/,function:{pattern:/(\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \t])/,lookbehind:!0},operator:/(?:::|[?:+!])?=|[|@]/,punctuation:/[:;(){}]/},i.languages.objectivec=i.languages.extend("c",{string:{pattern:/@?"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,greedy:!0},keyword:/\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\b/,operator:/-[->]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|\|?|[~^%?*\/@]/}),delete i.languages.objectivec["class-name"],i.languages.objc=i.languages.objectivec,i.languages.ocaml={comment:{pattern:/\(\*[\s\S]*?\*\)/,greedy:!0},char:{pattern:/'(?:[^\\\r\n']|\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,greedy:!0},string:[{pattern:/"(?:\\(?:[\s\S]|\r\n)|[^\\\r\n"])*"/,greedy:!0},{pattern:/\{([a-z_]*)\|[\s\S]*?\|\1\}/,greedy:!0}],number:[/\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\b/i,/\b0x[a-f0-9][a-f0-9_]*(?:\.[a-f0-9_]*)?(?:p[+-]?\d[\d_]*)?(?!\w)/i,/\b\d[\d_]*(?:\.[\d_]*)?(?:e[+-]?\d[\d_]*)?(?!\w)/i],directive:{pattern:/\B#\w+/,alias:"property"},label:{pattern:/\B~\w+/,alias:"property"},"type-variable":{pattern:/\B'\w+/,alias:"function"},variant:{pattern:/`\w+/,alias:"symbol"},keyword:/\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\b/,boolean:/\b(?:false|true)\b/,"operator-like-punctuation":{pattern:/\[[<>|]|[>|]\]|\{<|>\}/,alias:"punctuation"},operator:/\.[.~]|:[=>]|[=<>@^|&+\-*\/$%!?~][!$%&*+\-.\/:<=>?@^|~]*|\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\b/,punctuation:/;;|::|[(){}\[\].,:;#]|\b_\b/},i.languages.python={comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0,greedy:!0},"string-interpolation":{pattern:/(?:f|fr|rf)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,greedy:!0,inside:{interpolation:{pattern:/((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,lookbehind:!0,inside:{"format-spec":{pattern:/(:)[^:(){}]+(?=\}$)/,lookbehind:!0},"conversion-option":{pattern:/![sra](?=[:}]$)/,alias:"punctuation"},rest:null}},string:/[\s\S]+/}},"triple-quoted-string":{pattern:/(?:[rub]|br|rb)?("""|''')[\s\S]*?\1/i,greedy:!0,alias:"string"},string:{pattern:/(?:[rub]|br|rb)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,greedy:!0},function:{pattern:/((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,lookbehind:!0},"class-name":{pattern:/(\bclass\s+)\w+/i,lookbehind:!0},decorator:{pattern:/(^[\t ]*)@\w+(?:\.\w+)*/m,lookbehind:!0,alias:["annotation","punctuation"],inside:{punctuation:/\./}},keyword:/\b(?:_(?=\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,builtin:/\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,boolean:/\b(?:False|None|True)\b/,number:/\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?(?!\w)/i,operator:/[-+%=]=?|!=|:=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,punctuation:/[{}[\];(),.:]/},i.languages.python["string-interpolation"].inside.interpolation.inside.rest=i.languages.python,i.languages.py=i.languages.python,i.languages.reason=i.languages.extend("clike",{string:{pattern:/"(?:\\(?:\r\n|[\s\S])|[^\\\r\n"])*"/,greedy:!0},"class-name":/\b[A-Z]\w*/,keyword:/\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\b/,operator:/\.{3}|:[:=]|\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\-*\/]\.?|\b(?:asr|land|lor|lsl|lsr|lxor|mod)\b/}),i.languages.insertBefore("reason","class-name",{char:{pattern:/'(?:\\x[\da-f]{2}|\\o[0-3][0-7][0-7]|\\\d{3}|\\.|[^'\\\r\n])'/,greedy:!0},constructor:/\b[A-Z]\w*\b(?!\s*\.)/,label:{pattern:/\b[a-z]\w*(?=::)/,alias:"symbol"}}),delete i.languages.reason.function,function(e){e.languages.sass=e.languages.extend("css",{comment:{pattern:/^([ \t]*)\/[\/*].*(?:(?:\r?\n|\r)\1[ \t].+)*/m,lookbehind:!0,greedy:!0}}),e.languages.insertBefore("sass","atrule",{"atrule-line":{pattern:/^(?:[ \t]*)[@+=].+/m,greedy:!0,inside:{atrule:/(?:@[\w-]+|[+=])/}}}),delete e.languages.sass.atrule;var t=/\$[-\w]+|#\{\$[-\w]+\}/,n=[/[+*\/%]|[=!]=|<=?|>=?|\b(?:and|not|or)\b/,{pattern:/(\s)-(?=\s)/,lookbehind:!0}];e.languages.insertBefore("sass","property",{"variable-line":{pattern:/^[ \t]*\$.+/m,greedy:!0,inside:{punctuation:/:/,variable:t,operator:n}},"property-line":{pattern:/^[ \t]*(?:[^:\s]+ *:.*|:[^:\s].*)/m,greedy:!0,inside:{property:[/[^:\s]+(?=\s*:)/,{pattern:/(:)[^:\s]+/,lookbehind:!0}],punctuation:/:/,variable:t,operator:n,important:e.languages.sass.important}}}),delete e.languages.sass.property,delete e.languages.sass.important,e.languages.insertBefore("sass","punctuation",{selector:{pattern:/^([ \t]*)\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*(?:,(?:\r?\n|\r)\1[ \t]+\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*)*/m,lookbehind:!0,greedy:!0}})}(i),i.languages.scss=i.languages.extend("css",{comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,lookbehind:!0},atrule:{pattern:/@[\w-](?:\([^()]+\)|[^()\s]|\s+(?!\s))*?(?=\s+[{;])/,inside:{rule:/@[\w-]+/}},url:/(?:[-a-z]+-)?url(?=\()/i,selector:{pattern:/(?=\S)[^@;{}()]?(?:[^@;{}()\s]|\s+(?!\s)|#\{\$[-\w]+\})+(?=\s*\{(?:\}|\s|[^}][^:{}]*[:{][^}]))/,inside:{parent:{pattern:/&/,alias:"important"},placeholder:/%[-\w]+/,variable:/\$[-\w]+|#\{\$[-\w]+\}/}},property:{pattern:/(?:[-\w]|\$[-\w]|#\{\$[-\w]+\})+(?=\s*:)/,inside:{variable:/\$[-\w]+|#\{\$[-\w]+\}/}}}),i.languages.insertBefore("scss","atrule",{keyword:[/@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\b/i,{pattern:/( )(?:from|through)(?= )/,lookbehind:!0}]}),i.languages.insertBefore("scss","important",{variable:/\$[-\w]+|#\{\$[-\w]+\}/}),i.languages.insertBefore("scss","function",{"module-modifier":{pattern:/\b(?:as|hide|show|with)\b/i,alias:"keyword"},placeholder:{pattern:/%[-\w]+/,alias:"selector"},statement:{pattern:/\B!(?:default|optional)\b/i,alias:"keyword"},boolean:/\b(?:false|true)\b/,null:{pattern:/\bnull\b/,alias:"keyword"},operator:{pattern:/(\s)(?:[-+*\/%]|[=!]=|<=?|>=?|and|not|or)(?=\s)/,lookbehind:!0}}),i.languages.scss.atrule.inside.rest=i.languages.scss,function(e){var t={pattern:/(\b\d+)(?:%|[a-z]+)/,lookbehind:!0},n={pattern:/(^|[^\w.-])-?(?:\d+(?:\.\d+)?|\.\d+)/,lookbehind:!0},o={comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,lookbehind:!0},url:{pattern:/\burl\((["']?).*?\1\)/i,greedy:!0},string:{pattern:/("|')(?:(?!\1)[^\\\r\n]|\\(?:\r\n|[\s\S]))*\1/,greedy:!0},interpolation:null,func:null,important:/\B!(?:important|optional)\b/i,keyword:{pattern:/(^|\s+)(?:(?:else|for|if|return|unless)(?=\s|$)|@[\w-]+)/,lookbehind:!0},hexcode:/#[\da-f]{3,6}/i,color:[/\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\b/i,{pattern:/\b(?:hsl|rgb)\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*\)\B|\b(?:hsl|rgb)a\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*(?:0|0?\.\d+|1)\s*\)\B/i,inside:{unit:t,number:n,function:/[\w-]+(?=\()/,punctuation:/[(),]/}}],entity:/\\[\da-f]{1,8}/i,unit:t,boolean:/\b(?:false|true)\b/,operator:[/~|[+!\/%<>?=]=?|[-:]=|\*[*=]?|\.{2,3}|&&|\|\||\B-\B|\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\b/],number:n,punctuation:/[{}()\[\];:,]/};o.interpolation={pattern:/\{[^\r\n}:]+\}/,alias:"variable",inside:{delimiter:{pattern:/^\{|\}$/,alias:"punctuation"},rest:o}},o.func={pattern:/[\w-]+\([^)]*\).*/,inside:{function:/^[^(]+/,rest:o}},e.languages.stylus={"atrule-declaration":{pattern:/(^[ \t]*)@.+/m,lookbehind:!0,inside:{atrule:/^@[\w-]+/,rest:o}},"variable-declaration":{pattern:/(^[ \t]*)[\w$-]+\s*.?=[ \t]*(?:\{[^{}]*\}|\S.*|$)/m,lookbehind:!0,inside:{variable:/^\S+/,rest:o}},statement:{pattern:/(^[ \t]*)(?:else|for|if|return|unless)[ \t].+/m,lookbehind:!0,inside:{keyword:/^\S+/,rest:o}},"property-declaration":{pattern:/((?:^|\{)([ \t]*))(?:[\w-]|\{[^}\r\n]+\})+(?:\s*:\s*|[ \t]+)(?!\s)[^{\r\n]*(?:;|[^{\r\n,]$(?!(?:\r?\n|\r)(?:\{|\2[ \t])))/m,lookbehind:!0,inside:{property:{pattern:/^[^\s:]+/,inside:{interpolation:o.interpolation}},rest:o}},selector:{pattern:/(^[ \t]*)(?:(?=\S)(?:[^{}\r\n:()]|::?[\w-]+(?:\([^)\r\n]*\)|(?![\w-]))|\{[^}\r\n]+\})+)(?:(?:\r?\n|\r)(?:\1(?:(?=\S)(?:[^{}\r\n:()]|::?[\w-]+(?:\([^)\r\n]*\)|(?![\w-]))|\{[^}\r\n]+\})+)))*(?:,$|\{|(?=(?:\r?\n|\r)(?:\{|\1[ \t])))/m,lookbehind:!0,inside:{interpolation:o.interpolation,comment:o.comment,punctuation:/[{},]/}},func:o.func,string:o.string,comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,lookbehind:!0,greedy:!0},interpolation:o.interpolation,punctuation:/[{}()\[\];:.]/}}(i),function(e){var t=e.util.clone(e.languages.typescript);e.languages.tsx=e.languages.extend("jsx",t),delete e.languages.tsx.parameter,delete e.languages.tsx["literal-property"];var n=e.languages.tsx.tag;n.pattern=RegExp(/(^|[^\w$]|(?=<\/))/.source+"(?:"+n.pattern.source+")",n.pattern.flags),n.lookbehind=!0}(i),i.languages.wasm={comment:[/\(;[\s\S]*?;\)/,{pattern:/;;.*/,greedy:!0}],string:{pattern:/"(?:\\[\s\S]|[^"\\])*"/,greedy:!0},keyword:[{pattern:/\b(?:align|offset)=/,inside:{operator:/=/}},{pattern:/\b(?:(?:f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))?|memory\.(?:grow|size))\b/,inside:{punctuation:/\./}},/\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\b/],variable:/\$[\w!#$%&'*+\-./:<=>?@\\^`|~]+/,number:/[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/,punctuation:/[()]/};const a=i},77346:()=>{Prism.languages["go-mod"]=Prism.languages["go-module"]={comment:{pattern:/\/\/.*/,greedy:!0},version:{pattern:/(^|[\s()[\],])v\d+\.\d+\.\d+(?:[+-][-+.\w]*)?(?![^\s()[\],])/,lookbehind:!0,alias:"number"},"go-version":{pattern:/((?:^|\s)go\s+)\d+(?:\.\d+){1,2}/,lookbehind:!0,alias:"number"},keyword:{pattern:/^([ \t]*)(?:exclude|go|module|replace|require|retract)\b/m,lookbehind:!0},operator:/=>/,punctuation:/[()[\],]/}},37345:()=>{!function(e){var t=/\b(?:bool|bytes|double|s?fixed(?:32|64)|float|[su]?int(?:32|64)|string)\b/;e.languages.protobuf=e.languages.extend("clike",{"class-name":[{pattern:/(\b(?:enum|extend|message|service)\s+)[A-Za-z_]\w*(?=\s*\{)/,lookbehind:!0},{pattern:/(\b(?:rpc\s+\w+|returns)\s*\(\s*(?:stream\s+)?)\.?[A-Za-z_]\w*(?:\.[A-Za-z_]\w*)*(?=\s*\))/,lookbehind:!0}],keyword:/\b(?:enum|extend|extensions|import|message|oneof|option|optional|package|public|repeated|required|reserved|returns|rpc(?=\s+\w)|service|stream|syntax|to)\b(?!\s*=\s*\d)/,function:/\b[a-z_]\w*(?=\s*\()/i}),e.languages.insertBefore("protobuf","operator",{map:{pattern:/\bmap<\s*[\w.]+\s*,\s*[\w.]+\s*>(?=\s+[a-z_]\w*\s*[=;])/i,alias:"class-name",inside:{punctuation:/[<>.,]/,builtin:t}},builtin:t,"positional-class-name":{pattern:/(?:\b|\B\.)[a-z_]\w*(?:\.[a-z_]\w*)*(?=\s+[a-z_]\w*\s*[=;])/i,alias:"class-name",inside:{punctuation:/\./}},annotation:{pattern:/(\[\s*)[a-z_]\w*(?=\s*=)/i,lookbehind:!0}})}(Prism)},10692:(e,t,n)=>{var o={"./prism-go-module":77346,"./prism-protobuf":37345};function i(e){var t=a(e);return n(t)}function a(e){if(!n.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}i.keys=function(){return Object.keys(o)},i.resolve=a,e.exports=i,i.id=10692},92703:(e,t,n)=>{"use strict";var o=n(50414);function i(){}function a(){}a.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,a,s){if(s!==o){var r=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw r.name="Invariant Violation",r}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:i};return n.PropTypes=n,n}},45697:(e,t,n)=>{e.exports=n(92703)()},50414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},64448:(e,t,n)=>{"use strict";var o=n(67294),i=n(27418),a=n(63840);function s(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!o)throw Error(s(227));var r=new Set,d={};function p(e,t){l(e,t),l(e+"Capture",t)}function l(e,t){for(d[e]=t,e=0;e<t.length;e++)r.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),u=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,m=Object.prototype.hasOwnProperty,h={},f={};function y(e,t,n,o,i,a,s){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=o,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=s}var b={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){b[e]=new y(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];b[t]=new y(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){b[e]=new y(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){b[e]=new y(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){b[e]=new y(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){b[e]=new y(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){b[e]=new y(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){b[e]=new y(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){b[e]=new y(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function _(e,t,n,o){var i=b.hasOwnProperty(t)?b[t]:null;(null!==i?0===i.type:!o&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,o){if(null==t||function(e,t,n,o){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!o&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,o))return!0;if(o)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,o)&&(n=null),o||null===i?function(e){return!!m.call(f,e)||!m.call(h,e)&&(u.test(e)?f[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,o=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,o?e.setAttributeNS(o,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,v);b[t]=new y(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,v);b[t]=new y(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,v);b[t]=new y(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){b[e]=new y(e,1,!1,e.toLowerCase(),null,!1,!1)})),b.xlinkHref=new y("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){b[e]=new y(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=60103,S=60106,T=60107,E=60108,P=60114,x=60109,R=60110,A=60112,I=60113,O=60120,U=60115,N=60116,L=60121,D=60128,C=60129,F=60130,q=60131;if("function"==typeof Symbol&&Symbol.for){var j=Symbol.for;w=j("react.element"),S=j("react.portal"),T=j("react.fragment"),E=j("react.strict_mode"),P=j("react.profiler"),x=j("react.provider"),R=j("react.context"),A=j("react.forward_ref"),I=j("react.suspense"),O=j("react.suspense_list"),U=j("react.memo"),N=j("react.lazy"),L=j("react.block"),j("react.scope"),D=j("react.opaque.id"),C=j("react.debug_trace_mode"),F=j("react.offscreen"),q=j("react.legacy_hidden")}var M,G="function"==typeof Symbol&&Symbol.iterator;function B(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=G&&e[G]||e["@@iterator"])?e:null}function z(e){if(void 0===M)try{throw Error()}catch(n){var t=n.stack.trim().match(/\n( *(at )?)/);M=t&&t[1]||""}return"\n"+M+e}var V=!1;function H(e,t){if(!e||V)return"";V=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(d){var o=d}Reflect.construct(e,[],t)}else{try{t.call()}catch(d){o=d}e.call(t.prototype)}else{try{throw Error()}catch(d){o=d}e()}}catch(d){if(d&&o&&"string"==typeof d.stack){for(var i=d.stack.split("\n"),a=o.stack.split("\n"),s=i.length-1,r=a.length-1;1<=s&&0<=r&&i[s]!==a[r];)r--;for(;1<=s&&0<=r;s--,r--)if(i[s]!==a[r]){if(1!==s||1!==r)do{if(s--,0>--r||i[s]!==a[r])return"\n"+i[s].replace(" at new "," at ")}while(1<=s&&0<=r);break}}}finally{V=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?z(e):""}function J(e){switch(e.tag){case 5:return z(e.type);case 16:return z("Lazy");case 13:return z("Suspense");case 19:return z("SuspenseList");case 0:case 2:case 15:return e=H(e.type,!1);case 11:return e=H(e.type.render,!1);case 22:return e=H(e.type._render,!1);case 1:return e=H(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case T:return"Fragment";case S:return"Portal";case P:return"Profiler";case E:return"StrictMode";case I:return"Suspense";case O:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case R:return(e.displayName||"Context")+".Consumer";case x:return(e._context.displayName||"Context")+".Provider";case A:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case U:return Q(e.type);case L:return Q(e._render);case N:t=e._payload,e=e._init;try{return Q(e(t))}catch(n){}}return null}function K(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function W(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),o=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){o=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return o},setValue:function(e){o=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function $(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),o="";return e&&(o=Y(e)?e.checked?"true":"false":e.value),(e=o)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function X(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,o=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:o,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&_(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=K(t.value),o=t.type;if(null!=n)"number"===o?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===o||"reset"===o)return void e.removeAttribute("value");t.hasOwnProperty("value")?ie(e,t.type,n):t.hasOwnProperty("defaultValue")&&ie(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function oe(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var o=t.type;if(!("submit"!==o&&"reset"!==o||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ie(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function se(e,t,n,o){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&o&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(o&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(s(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function de(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(s(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(s(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function pe(e,t){var n=K(t.value),o=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=o&&(e.defaultValue=""+o)}function le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var ce={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function ue(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function me(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ue(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,fe,ye=(fe=function(e,t){if(e.namespaceURI!==ce.svg||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,o){MSApp.execUnsafeLocalFunction((function(){return fe(e,t)}))}:fe);function be(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ge={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ve=["Webkit","ms","Moz","O"];function _e(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ge.hasOwnProperty(e)&&ge[e]?(""+t).trim():t+"px"}function ke(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var o=0===n.indexOf("--"),i=_e(n,t[n],o);"float"===n&&(n="cssFloat"),o?e.setProperty(n,i):e[n]=i}}Object.keys(ge).forEach((function(e){ve.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ge[t]=ge[e]}))}));var we=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(we[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(s(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(s(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(s(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(s(62))}}function Te(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ee(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Pe=null,xe=null,Re=null;function Ae(e){if(e=oi(e)){if("function"!=typeof Pe)throw Error(s(280));var t=e.stateNode;t&&(t=ai(t),Pe(e.stateNode,e.type,t))}}function Ie(e){xe?Re?Re.push(e):Re=[e]:xe=e}function Oe(){if(xe){var e=xe,t=Re;if(Re=xe=null,Ae(e),t)for(e=0;e<t.length;e++)Ae(t[e])}}function Ue(e,t){return e(t)}function Ne(e,t,n,o,i){return e(t,n,o,i)}function Le(){}var De=Ue,Ce=!1,Fe=!1;function qe(){null===xe&&null===Re||(Le(),Oe())}function je(e,t){var n=e.stateNode;if(null===n)return null;var o=ai(n);if(null===o)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(o=!o.disabled)||(o=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(s(231,t,typeof n));return n}var Me=!1;if(c)try{var Ge={};Object.defineProperty(Ge,"passive",{get:function(){Me=!0}}),window.addEventListener("test",Ge,Ge),window.removeEventListener("test",Ge,Ge)}catch(fe){Me=!1}function Be(e,t,n,o,i,a,s,r,d){var p=Array.prototype.slice.call(arguments,3);try{t.apply(n,p)}catch(l){this.onError(l)}}var ze=!1,Ve=null,He=!1,Je=null,Qe={onError:function(e){ze=!0,Ve=e}};function Ke(e,t,n,o,i,a,s,r,d){ze=!1,Ve=null,Be.apply(Qe,arguments)}function Ye(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function $e(e){if(Ye(e)!==e)throw Error(s(188))}function Ze(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ye(e)))throw Error(s(188));return t!==e?null:e}for(var n=e,o=t;;){var i=n.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(o=i.return)){n=o;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===n)return $e(i),e;if(a===o)return $e(i),t;a=a.sibling}throw Error(s(188))}if(n.return!==o.return)n=i,o=a;else{for(var r=!1,d=i.child;d;){if(d===n){r=!0,n=i,o=a;break}if(d===o){r=!0,o=i,n=a;break}d=d.sibling}if(!r){for(d=a.child;d;){if(d===n){r=!0,n=a,o=i;break}if(d===o){r=!0,o=a,n=i;break}d=d.sibling}if(!r)throw Error(s(189))}}if(n.alternate!==o)throw Error(s(190))}if(3!==n.tag)throw Error(s(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Xe(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,ot,it=!1,at=[],st=null,rt=null,dt=null,pt=new Map,lt=new Map,ct=[],ut="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function mt(e,t,n,o,i){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:i,targetContainers:[o]}}function ht(e,t){switch(e){case"focusin":case"focusout":st=null;break;case"dragenter":case"dragleave":rt=null;break;case"mouseover":case"mouseout":dt=null;break;case"pointerover":case"pointerout":pt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":lt.delete(t.pointerId)}}function ft(e,t,n,o,i,a){return null===e||e.nativeEvent!==a?(e=mt(t,n,o,i,a),null!==t&&(null!==(t=oi(t))&&tt(t)),e):(e.eventSystemFlags|=o,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function yt(e){var t=ni(e.target);if(null!==t){var n=Ye(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void ot(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function bt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=oi(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function gt(e,t,n){bt(e)&&n.delete(t)}function vt(){for(it=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=oi(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==st&&bt(st)&&(st=null),null!==rt&&bt(rt)&&(rt=null),null!==dt&&bt(dt)&&(dt=null),pt.forEach(gt),lt.forEach(gt)}function _t(e,t){e.blockedOn===t&&(e.blockedOn=null,it||(it=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,vt)))}function kt(e){function t(t){return _t(t,e)}if(0<at.length){_t(at[0],e);for(var n=1;n<at.length;n++){var o=at[n];o.blockedOn===e&&(o.blockedOn=null)}}for(null!==st&&_t(st,e),null!==rt&&_t(rt,e),null!==dt&&_t(dt,e),pt.forEach(t),lt.forEach(t),n=0;n<ct.length;n++)(o=ct[n]).blockedOn===e&&(o.blockedOn=null);for(;0<ct.length&&null===(n=ct[0]).blockedOn;)yt(n),null===n.blockedOn&&ct.shift()}function wt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var St={animationend:wt("Animation","AnimationEnd"),animationiteration:wt("Animation","AnimationIteration"),animationstart:wt("Animation","AnimationStart"),transitionend:wt("Transition","TransitionEnd")},Tt={},Et={};function Pt(e){if(Tt[e])return Tt[e];if(!St[e])return e;var t,n=St[e];for(t in n)if(n.hasOwnProperty(t)&&t in Et)return Tt[e]=n[t];return e}c&&(Et=document.createElement("div").style,"AnimationEvent"in window||(delete St.animationend.animation,delete St.animationiteration.animation,delete St.animationstart.animation),"TransitionEvent"in window||delete St.transitionend.transition);var xt=Pt("animationend"),Rt=Pt("animationiteration"),At=Pt("animationstart"),It=Pt("transitionend"),Ot=new Map,Ut=new Map,Nt=["abort","abort",xt,"animationEnd",Rt,"animationIteration",At,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",It,"transitionEnd","waiting","waiting"];function Lt(e,t){for(var n=0;n<e.length;n+=2){var o=e[n],i=e[n+1];i="on"+(i[0].toUpperCase()+i.slice(1)),Ut.set(o,t),Ot.set(o,i),p(i,[o])}}(0,a.unstable_now)();var Dt=8;function Ct(e){if(0!=(1&e))return Dt=15,1;if(0!=(2&e))return Dt=14,2;if(0!=(4&e))return Dt=13,4;var t=24&e;return 0!==t?(Dt=12,t):0!=(32&e)?(Dt=11,32):0!==(t=192&e)?(Dt=10,t):0!=(256&e)?(Dt=9,256):0!==(t=3584&e)?(Dt=8,t):0!=(4096&e)?(Dt=7,4096):0!==(t=4186112&e)?(Dt=6,t):0!==(t=62914560&e)?(Dt=5,t):67108864&e?(Dt=4,67108864):0!=(134217728&e)?(Dt=3,134217728):0!==(t=805306368&e)?(Dt=2,t):0!=(1073741824&e)?(Dt=1,1073741824):(Dt=8,e)}function Ft(e,t){var n=e.pendingLanes;if(0===n)return Dt=0;var o=0,i=0,a=e.expiredLanes,s=e.suspendedLanes,r=e.pingedLanes;if(0!==a)o=a,i=Dt=15;else if(0!==(a=134217727&n)){var d=a&~s;0!==d?(o=Ct(d),i=Dt):0!==(r&=a)&&(o=Ct(r),i=Dt)}else 0!==(a=n&~s)?(o=Ct(a),i=Dt):0!==r&&(o=Ct(r),i=Dt);if(0===o)return 0;if(o=n&((0>(o=31-zt(o))?0:1<<o)<<1)-1,0!==t&&t!==o&&0==(t&s)){if(Ct(t),i<=Dt)return t;Dt=i}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=o;0<t;)i=1<<(n=31-zt(t)),o|=e[n],t&=~i;return o}function qt(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function jt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Mt(24&~t))?jt(10,t):e;case 10:return 0===(e=Mt(192&~t))?jt(8,t):e;case 8:return 0===(e=Mt(3584&~t))&&(0===(e=Mt(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Mt(805306368&~t))&&(t=268435456),t}throw Error(s(358,e))}function Mt(e){return e&-e}function Gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Bt(e,t,n){e.pendingLanes|=t;var o=t-1;e.suspendedLanes&=o,e.pingedLanes&=o,(e=e.eventTimes)[t=31-zt(t)]=n}var zt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Vt(e)/Ht|0)|0},Vt=Math.log,Ht=Math.LN2;var Jt=a.unstable_UserBlockingPriority,Qt=a.unstable_runWithPriority,Kt=!0;function Yt(e,t,n,o){Ce||Le();var i=$t,a=Ce;Ce=!0;try{Ne(i,e,t,n,o)}finally{(Ce=a)||qe()}}function Wt(e,t,n,o){Qt(Jt,$t.bind(null,e,t,n,o))}function $t(e,t,n,o){var i;if(Kt)if((i=0==(4&t))&&0<at.length&&-1<ut.indexOf(e))e=mt(null,e,t,n,o),at.push(e);else{var a=Zt(e,t,n,o);if(null===a)i&&ht(e,o);else{if(i){if(-1<ut.indexOf(e))return e=mt(a,e,t,n,o),void at.push(e);if(function(e,t,n,o,i){switch(t){case"focusin":return st=ft(st,e,t,n,o,i),!0;case"dragenter":return rt=ft(rt,e,t,n,o,i),!0;case"mouseover":return dt=ft(dt,e,t,n,o,i),!0;case"pointerover":var a=i.pointerId;return pt.set(a,ft(pt.get(a)||null,e,t,n,o,i)),!0;case"gotpointercapture":return a=i.pointerId,lt.set(a,ft(lt.get(a)||null,e,t,n,o,i)),!0}return!1}(a,e,t,n,o))return;ht(e,o)}Do(e,t,o,null,n)}}}function Zt(e,t,n,o){var i=Ee(o);if(null!==(i=ni(i))){var a=Ye(i);if(null===a)i=null;else{var s=a.tag;if(13===s){if(null!==(i=We(a)))return i;i=null}else if(3===s){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;i=null}else a!==i&&(i=null)}}return Do(e,t,o,i,n),null}var Xt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,o=n.length,i="value"in Xt?Xt.value:Xt.textContent,a=i.length;for(e=0;e<o&&n[e]===i[e];e++);var s=o-e;for(t=1;t<=s&&n[o-t]===i[a-t];t++);return tn=i.slice(e,1<t?1-t:void 0)}function on(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function an(){return!0}function sn(){return!1}function rn(e){function t(t,n,o,i,a){for(var s in this._reactName=t,this._targetInst=o,this.type=n,this.nativeEvent=i,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(s)&&(t=e[s],this[s]=t?t(i):i[s]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?an:sn,this.isPropagationStopped=sn,this}return i(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=an)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=an)},persist:function(){},isPersistent:an}),t}var dn,pn,ln,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},un=rn(cn),mn=i({},cn,{view:0,detail:0}),hn=rn(mn),fn=i({},mn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:xn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(dn=e.screenX-ln.screenX,pn=e.screenY-ln.screenY):pn=dn=0,ln=e),dn)},movementY:function(e){return"movementY"in e?e.movementY:pn}}),yn=rn(fn),bn=rn(i({},fn,{dataTransfer:0})),gn=rn(i({},mn,{relatedTarget:0})),vn=rn(i({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),_n=i({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),kn=rn(_n),wn=rn(i({},cn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Tn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function xn(){return Pn}var Rn=i({},mn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=on(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Tn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:xn,charCode:function(e){return"keypress"===e.type?on(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?on(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),An=rn(Rn),In=rn(i({},fn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=rn(i({},mn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:xn})),Un=rn(i({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=i({},fn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Ln=rn(Nn),Dn=[9,13,27,32],Cn=c&&"CompositionEvent"in window,Fn=null;c&&"documentMode"in document&&(Fn=document.documentMode);var qn=c&&"TextEvent"in window&&!Fn,jn=c&&(!Cn||Fn&&8<Fn&&11>=Fn),Mn=String.fromCharCode(32),Gn=!1;function Bn(e,t){switch(e){case"keyup":return-1!==Dn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function zn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Vn=!1;var Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Jn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Qn(e,t,n,o){Ie(o),0<(t=Fo(t,"onChange")).length&&(n=new un("onChange","change",null,n,o),e.push({event:n,listeners:t}))}var Kn=null,Yn=null;function Wn(e){Ao(e,0)}function $n(e){if($(ii(e)))return e}function Zn(e,t){if("change"===e)return t}var Xn=!1;if(c){var eo;if(c){var to="oninput"in document;if(!to){var no=document.createElement("div");no.setAttribute("oninput","return;"),to="function"==typeof no.oninput}eo=to}else eo=!1;Xn=eo&&(!document.documentMode||9<document.documentMode)}function oo(){Kn&&(Kn.detachEvent("onpropertychange",io),Yn=Kn=null)}function io(e){if("value"===e.propertyName&&$n(Yn)){var t=[];if(Qn(t,Yn,e,Ee(e)),e=Wn,Ce)e(t);else{Ce=!0;try{Ue(e,t)}finally{Ce=!1,qe()}}}}function ao(e,t,n){"focusin"===e?(oo(),Yn=n,(Kn=t).attachEvent("onpropertychange",io)):"focusout"===e&&oo()}function so(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return $n(Yn)}function ro(e,t){if("click"===e)return $n(t)}function po(e,t){if("input"===e||"change"===e)return $n(t)}var lo="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},co=Object.prototype.hasOwnProperty;function uo(e,t){if(lo(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(o=0;o<n.length;o++)if(!co.call(t,n[o])||!lo(e[n[o]],t[n[o]]))return!1;return!0}function mo(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ho(e,t){var n,o=mo(e);for(e=0;o;){if(3===o.nodeType){if(n=e+o.textContent.length,e<=t&&n>=t)return{node:o,offset:t-e};e=n}e:{for(;o;){if(o.nextSibling){o=o.nextSibling;break e}o=o.parentNode}o=void 0}o=mo(o)}}function fo(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fo(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function yo(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(o){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function bo(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var go=c&&"documentMode"in document&&11>=document.documentMode,vo=null,_o=null,ko=null,wo=!1;function So(e,t,n){var o=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;wo||null==vo||vo!==Z(o)||("selectionStart"in(o=vo)&&bo(o)?o={start:o.selectionStart,end:o.selectionEnd}:o={anchorNode:(o=(o.ownerDocument&&o.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:o.anchorOffset,focusNode:o.focusNode,focusOffset:o.focusOffset},ko&&uo(ko,o)||(ko=o,0<(o=Fo(_o,"onSelect")).length&&(t=new un("onSelect","select",null,t,n),e.push({event:t,listeners:o}),t.target=vo)))}Lt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Lt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Lt(Nt,2);for(var To="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Eo=0;Eo<To.length;Eo++)Ut.set(To[Eo],0);l("onMouseEnter",["mouseout","mouseover"]),l("onMouseLeave",["mouseout","mouseover"]),l("onPointerEnter",["pointerout","pointerover"]),l("onPointerLeave",["pointerout","pointerover"]),p("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),p("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),p("onBeforeInput",["compositionend","keypress","textInput","paste"]),p("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),p("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),p("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Po="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),xo=new Set("cancel close invalid load scroll toggle".split(" ").concat(Po));function Ro(e,t,n){var o=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,o,i,a,r,d,p){if(Ke.apply(this,arguments),ze){if(!ze)throw Error(s(198));var l=Ve;ze=!1,Ve=null,He||(He=!0,Je=l)}}(o,t,void 0,e),e.currentTarget=null}function Ao(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var o=e[n],i=o.event;o=o.listeners;e:{var a=void 0;if(t)for(var s=o.length-1;0<=s;s--){var r=o[s],d=r.instance,p=r.currentTarget;if(r=r.listener,d!==a&&i.isPropagationStopped())break e;Ro(i,r,p),a=d}else for(s=0;s<o.length;s++){if(d=(r=o[s]).instance,p=r.currentTarget,r=r.listener,d!==a&&i.isPropagationStopped())break e;Ro(i,r,p),a=d}}}if(He)throw e=Je,He=!1,Je=null,e}function Io(e,t){var n=si(t),o=e+"__bubble";n.has(o)||(Lo(t,e,2,!1),n.add(o))}var Oo="_reactListening"+Math.random().toString(36).slice(2);function Uo(e){e[Oo]||(e[Oo]=!0,r.forEach((function(t){xo.has(t)||No(t,!1,e,null),No(t,!0,e,null)})))}function No(e,t,n,o){var i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==o&&!t&&xo.has(e)){if("scroll"!==e)return;i|=2,a=o}var s=si(a),r=e+"__"+(t?"capture":"bubble");s.has(r)||(t&&(i|=4),Lo(a,e,i,t),s.add(r))}function Lo(e,t,n,o){var i=Ut.get(t);switch(void 0===i?2:i){case 0:i=Yt;break;case 1:i=Wt;break;default:i=$t}n=i.bind(null,t,n,e),i=void 0,!Me||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),o?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Do(e,t,n,o,i){var a=o;if(0==(1&t)&&0==(2&t)&&null!==o)e:for(;;){if(null===o)return;var s=o.tag;if(3===s||4===s){var r=o.stateNode.containerInfo;if(r===i||8===r.nodeType&&r.parentNode===i)break;if(4===s)for(s=o.return;null!==s;){var d=s.tag;if((3===d||4===d)&&((d=s.stateNode.containerInfo)===i||8===d.nodeType&&d.parentNode===i))return;s=s.return}for(;null!==r;){if(null===(s=ni(r)))return;if(5===(d=s.tag)||6===d){o=a=s;continue e}r=r.parentNode}}o=o.return}!function(e,t,n){if(Fe)return e(t,n);Fe=!0;try{return De(e,t,n)}finally{Fe=!1,qe()}}((function(){var o=a,i=Ee(n),s=[];e:{var r=Ot.get(e);if(void 0!==r){var d=un,p=e;switch(e){case"keypress":if(0===on(n))break e;case"keydown":case"keyup":d=An;break;case"focusin":p="focus",d=gn;break;case"focusout":p="blur",d=gn;break;case"beforeblur":case"afterblur":d=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":d=yn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":d=bn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":d=On;break;case xt:case Rt:case At:d=vn;break;case It:d=Un;break;case"scroll":d=hn;break;case"wheel":d=Ln;break;case"copy":case"cut":case"paste":d=kn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":d=In}var l=0!=(4&t),c=!l&&"scroll"===e,u=l?null!==r?r+"Capture":null:r;l=[];for(var m,h=o;null!==h;){var f=(m=h).stateNode;if(5===m.tag&&null!==f&&(m=f,null!==u&&(null!=(f=je(h,u))&&l.push(Co(h,f,m)))),c)break;h=h.return}0<l.length&&(r=new d(r,p,null,n,i),s.push({event:r,listeners:l}))}}if(0==(7&t)){if(d="mouseout"===e||"pointerout"===e,(!(r="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(p=n.relatedTarget||n.fromElement)||!ni(p)&&!p[ei])&&(d||r)&&(r=i.window===i?i:(r=i.ownerDocument)?r.defaultView||r.parentWindow:window,d?(d=o,null!==(p=(p=n.relatedTarget||n.toElement)?ni(p):null)&&(p!==(c=Ye(p))||5!==p.tag&&6!==p.tag)&&(p=null)):(d=null,p=o),d!==p)){if(l=yn,f="onMouseLeave",u="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(l=In,f="onPointerLeave",u="onPointerEnter",h="pointer"),c=null==d?r:ii(d),m=null==p?r:ii(p),(r=new l(f,h+"leave",d,n,i)).target=c,r.relatedTarget=m,f=null,ni(i)===o&&((l=new l(u,h+"enter",p,n,i)).target=m,l.relatedTarget=c,f=l),c=f,d&&p)e:{for(u=p,h=0,m=l=d;m;m=qo(m))h++;for(m=0,f=u;f;f=qo(f))m++;for(;0<h-m;)l=qo(l),h--;for(;0<m-h;)u=qo(u),m--;for(;h--;){if(l===u||null!==u&&l===u.alternate)break e;l=qo(l),u=qo(u)}l=null}else l=null;null!==d&&jo(s,r,d,l,!1),null!==p&&null!==c&&jo(s,c,p,l,!0)}if("select"===(d=(r=o?ii(o):window).nodeName&&r.nodeName.toLowerCase())||"input"===d&&"file"===r.type)var y=Zn;else if(Jn(r))if(Xn)y=po;else{y=so;var b=ao}else(d=r.nodeName)&&"input"===d.toLowerCase()&&("checkbox"===r.type||"radio"===r.type)&&(y=ro);switch(y&&(y=y(e,o))?Qn(s,y,n,i):(b&&b(e,r,o),"focusout"===e&&(b=r._wrapperState)&&b.controlled&&"number"===r.type&&ie(r,"number",r.value)),b=o?ii(o):window,e){case"focusin":(Jn(b)||"true"===b.contentEditable)&&(vo=b,_o=o,ko=null);break;case"focusout":ko=_o=vo=null;break;case"mousedown":wo=!0;break;case"contextmenu":case"mouseup":case"dragend":wo=!1,So(s,n,i);break;case"selectionchange":if(go)break;case"keydown":case"keyup":So(s,n,i)}var g;if(Cn)e:{switch(e){case"compositionstart":var v="onCompositionStart";break e;case"compositionend":v="onCompositionEnd";break e;case"compositionupdate":v="onCompositionUpdate";break e}v=void 0}else Vn?Bn(e,n)&&(v="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(v="onCompositionStart");v&&(jn&&"ko"!==n.locale&&(Vn||"onCompositionStart"!==v?"onCompositionEnd"===v&&Vn&&(g=nn()):(en="value"in(Xt=i)?Xt.value:Xt.textContent,Vn=!0)),0<(b=Fo(o,v)).length&&(v=new wn(v,e,null,n,i),s.push({event:v,listeners:b}),g?v.data=g:null!==(g=zn(n))&&(v.data=g))),(g=qn?function(e,t){switch(e){case"compositionend":return zn(t);case"keypress":return 32!==t.which?null:(Gn=!0,Mn);case"textInput":return(e=t.data)===Mn&&Gn?null:e;default:return null}}(e,n):function(e,t){if(Vn)return"compositionend"===e||!Cn&&Bn(e,t)?(e=nn(),tn=en=Xt=null,Vn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return jn&&"ko"!==t.locale?null:t.data}}(e,n))&&(0<(o=Fo(o,"onBeforeInput")).length&&(i=new wn("onBeforeInput","beforeinput",null,n,i),s.push({event:i,listeners:o}),i.data=g))}Ao(s,t)}))}function Co(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Fo(e,t){for(var n=t+"Capture",o=[];null!==e;){var i=e,a=i.stateNode;5===i.tag&&null!==a&&(i=a,null!=(a=je(e,n))&&o.unshift(Co(e,a,i)),null!=(a=je(e,t))&&o.push(Co(e,a,i))),e=e.return}return o}function qo(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function jo(e,t,n,o,i){for(var a=t._reactName,s=[];null!==n&&n!==o;){var r=n,d=r.alternate,p=r.stateNode;if(null!==d&&d===o)break;5===r.tag&&null!==p&&(r=p,i?null!=(d=je(n,a))&&s.unshift(Co(n,d,r)):i||null!=(d=je(n,a))&&s.push(Co(n,d,r))),n=n.return}0!==s.length&&e.push({event:t,listeners:s})}function Mo(){}var Go=null,Bo=null;function zo(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Vo(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Ho="function"==typeof setTimeout?setTimeout:void 0,Jo="function"==typeof clearTimeout?clearTimeout:void 0;function Qo(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Ko(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Yo(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Wo=0;var $o=Math.random().toString(36).slice(2),Zo="__reactFiber$"+$o,Xo="__reactProps$"+$o,ei="__reactContainer$"+$o,ti="__reactEvents$"+$o;function ni(e){var t=e[Zo];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ei]||n[Zo]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Yo(e);null!==e;){if(n=e[Zo])return n;e=Yo(e)}return t}n=(e=n).parentNode}return null}function oi(e){return!(e=e[Zo]||e[ei])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ii(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(s(33))}function ai(e){return e[Xo]||null}function si(e){var t=e[ti];return void 0===t&&(t=e[ti]=new Set),t}var ri=[],di=-1;function pi(e){return{current:e}}function li(e){0>di||(e.current=ri[di],ri[di]=null,di--)}function ci(e,t){di++,ri[di]=e.current,e.current=t}var ui={},mi=pi(ui),hi=pi(!1),fi=ui;function yi(e,t){var n=e.type.contextTypes;if(!n)return ui;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===t)return o.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in n)a[i]=t[i];return o&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function bi(e){return null!=(e=e.childContextTypes)}function gi(){li(hi),li(mi)}function vi(e,t,n){if(mi.current!==ui)throw Error(s(168));ci(mi,t),ci(hi,n)}function _i(e,t,n){var o=e.stateNode;if(e=t.childContextTypes,"function"!=typeof o.getChildContext)return n;for(var a in o=o.getChildContext())if(!(a in e))throw Error(s(108,Q(t)||"Unknown",a));return i({},n,o)}function ki(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ui,fi=mi.current,ci(mi,e),ci(hi,hi.current),!0}function wi(e,t,n){var o=e.stateNode;if(!o)throw Error(s(169));n?(e=_i(e,t,fi),o.__reactInternalMemoizedMergedChildContext=e,li(hi),li(mi),ci(mi,e)):li(hi),ci(hi,n)}var Si=null,Ti=null,Ei=a.unstable_runWithPriority,Pi=a.unstable_scheduleCallback,xi=a.unstable_cancelCallback,Ri=a.unstable_shouldYield,Ai=a.unstable_requestPaint,Ii=a.unstable_now,Oi=a.unstable_getCurrentPriorityLevel,Ui=a.unstable_ImmediatePriority,Ni=a.unstable_UserBlockingPriority,Li=a.unstable_NormalPriority,Di=a.unstable_LowPriority,Ci=a.unstable_IdlePriority,Fi={},qi=void 0!==Ai?Ai:function(){},ji=null,Mi=null,Gi=!1,Bi=Ii(),zi=1e4>Bi?Ii:function(){return Ii()-Bi};function Vi(){switch(Oi()){case Ui:return 99;case Ni:return 98;case Li:return 97;case Di:return 96;case Ci:return 95;default:throw Error(s(332))}}function Hi(e){switch(e){case 99:return Ui;case 98:return Ni;case 97:return Li;case 96:return Di;case 95:return Ci;default:throw Error(s(332))}}function Ji(e,t){return e=Hi(e),Ei(e,t)}function Qi(e,t,n){return e=Hi(e),Pi(e,t,n)}function Ki(){if(null!==Mi){var e=Mi;Mi=null,xi(e)}Yi()}function Yi(){if(!Gi&&null!==ji){Gi=!0;var e=0;try{var t=ji;Ji(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),ji=null}catch(n){throw null!==ji&&(ji=ji.slice(e+1)),Pi(Ui,Ki),n}finally{Gi=!1}}}var Wi=k.ReactCurrentBatchConfig;function $i(e,t){if(e&&e.defaultProps){for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Zi=pi(null),Xi=null,ea=null,ta=null;function na(){ta=ea=Xi=null}function oa(e){var t=Zi.current;li(Zi),e.type._context._currentValue=t}function ia(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function aa(e,t){Xi=e,ta=ea=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Cs=!0),e.firstContext=null)}function sa(e,t){if(ta!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ta=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ea){if(null===Xi)throw Error(s(308));ea=t,Xi.dependencies={lanes:0,firstContext:t,responders:null}}else ea=ea.next=t;return e._currentValue}var ra=!1;function da(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function pa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function la(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ca(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ua(e,t){var n=e.updateQueue,o=e.alternate;if(null!==o&&n===(o=o.updateQueue)){var i=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var s={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?i=a=s:a=a.next=s,n=n.next}while(null!==n);null===a?i=a=t:a=a.next=t}else i=a=t;return n={baseState:o.baseState,firstBaseUpdate:i,lastBaseUpdate:a,shared:o.shared,effects:o.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ma(e,t,n,o){var a=e.updateQueue;ra=!1;var s=a.firstBaseUpdate,r=a.lastBaseUpdate,d=a.shared.pending;if(null!==d){a.shared.pending=null;var p=d,l=p.next;p.next=null,null===r?s=l:r.next=l,r=p;var c=e.alternate;if(null!==c){var u=(c=c.updateQueue).lastBaseUpdate;u!==r&&(null===u?c.firstBaseUpdate=l:u.next=l,c.lastBaseUpdate=p)}}if(null!==s){for(u=a.baseState,r=0,c=l=p=null;;){d=s.lane;var m=s.eventTime;if((o&d)===d){null!==c&&(c=c.next={eventTime:m,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var h=e,f=s;switch(d=t,m=n,f.tag){case 1:if("function"==typeof(h=f.payload)){u=h.call(m,u,d);break e}u=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(d="function"==typeof(h=f.payload)?h.call(m,u,d):h))break e;u=i({},u,d);break e;case 2:ra=!0}}null!==s.callback&&(e.flags|=32,null===(d=a.effects)?a.effects=[s]:d.push(s))}else m={eventTime:m,lane:d,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===c?(l=c=m,p=u):c=c.next=m,r|=d;if(null===(s=s.next)){if(null===(d=a.shared.pending))break;s=d.next,d.next=null,a.lastBaseUpdate=d,a.shared.pending=null}}null===c&&(p=u),a.baseState=p,a.firstBaseUpdate=l,a.lastBaseUpdate=c,Gr|=r,e.lanes=r,e.memoizedState=u}}function ha(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var o=e[t],i=o.callback;if(null!==i){if(o.callback=null,o=n,"function"!=typeof i)throw Error(s(191,i));i.call(o)}}}var fa=(new o.Component).refs;function ya(e,t,n,o){n=null==(n=n(o,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ba={isMounted:function(e){return!!(e=e._reactInternals)&&Ye(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var o=ud(),i=md(e),a=la(o,i);a.payload=t,null!=n&&(a.callback=n),ca(e,a),hd(e,i,o)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var o=ud(),i=md(e),a=la(o,i);a.tag=1,a.payload=t,null!=n&&(a.callback=n),ca(e,a),hd(e,i,o)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ud(),o=md(e),i=la(n,o);i.tag=2,null!=t&&(i.callback=t),ca(e,i),hd(e,o,n)}};function ga(e,t,n,o,i,a,s){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(o,a,s):!t.prototype||!t.prototype.isPureReactComponent||(!uo(n,o)||!uo(i,a))}function va(e,t,n){var o=!1,i=ui,a=t.contextType;return"object"==typeof a&&null!==a?a=sa(a):(i=bi(t)?fi:mi.current,a=(o=null!=(o=t.contextTypes))?yi(e,i):ui),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ba,e.stateNode=t,t._reactInternals=e,o&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=a),t}function _a(e,t,n,o){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,o),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,o),t.state!==e&&ba.enqueueReplaceState(t,t.state,null)}function ka(e,t,n,o){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=fa,da(e);var a=t.contextType;"object"==typeof a&&null!==a?i.context=sa(a):(a=bi(t)?fi:mi.current,i.context=yi(e,a)),ma(e,n,i,o),i.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(ya(e,t,a,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&ba.enqueueReplaceState(i,i.state,null),ma(e,n,i,o),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4)}var wa=Array.isArray;function Sa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(s(309));var o=n.stateNode}if(!o)throw Error(s(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;t===fa&&(t=o.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(s(284));if(!n._owner)throw Error(s(290,e))}return e}function Ta(e,t){if("textarea"!==e.type)throw Error(s(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Ea(e){function t(t,n){if(e){var o=t.lastEffect;null!==o?(o.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,o){if(!e)return null;for(;null!==o;)t(n,o),o=o.sibling;return null}function o(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Jd(e,t)).index=0,e.sibling=null,e}function a(t,n,o){return t.index=o,e?null!==(o=t.alternate)?(o=o.index)<n?(t.flags=2,n):o:(t.flags=2,n):n}function r(t){return e&&null===t.alternate&&(t.flags=2),t}function d(e,t,n,o){return null===t||6!==t.tag?((t=Wd(n,e.mode,o)).return=e,t):((t=i(t,n)).return=e,t)}function p(e,t,n,o){return null!==t&&t.elementType===n.type?((o=i(t,n.props)).ref=Sa(e,t,n),o.return=e,o):((o=Qd(n.type,n.key,n.props,null,e.mode,o)).ref=Sa(e,t,n),o.return=e,o)}function l(e,t,n,o){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=$d(n,e.mode,o)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function c(e,t,n,o,a){return null===t||7!==t.tag?((t=Kd(n,e.mode,o,a)).return=e,t):((t=i(t,n)).return=e,t)}function u(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Wd(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Qd(t.type,t.key,t.props,null,e.mode,n)).ref=Sa(e,null,t),n.return=e,n;case S:return(t=$d(t,e.mode,n)).return=e,t}if(wa(t)||B(t))return(t=Kd(t,e.mode,n,null)).return=e,t;Ta(e,t)}return null}function m(e,t,n,o){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:d(e,t,""+n,o);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===i?n.type===T?c(e,t,n.props.children,o,i):p(e,t,n,o):null;case S:return n.key===i?l(e,t,n,o):null}if(wa(n)||B(n))return null!==i?null:c(e,t,n,o,null);Ta(e,n)}return null}function h(e,t,n,o,i){if("string"==typeof o||"number"==typeof o)return d(t,e=e.get(n)||null,""+o,i);if("object"==typeof o&&null!==o){switch(o.$$typeof){case w:return e=e.get(null===o.key?n:o.key)||null,o.type===T?c(t,e,o.props.children,i,o.key):p(t,e,o,i);case S:return l(t,e=e.get(null===o.key?n:o.key)||null,o,i)}if(wa(o)||B(o))return c(t,e=e.get(n)||null,o,i,null);Ta(t,o)}return null}function f(i,s,r,d){for(var p=null,l=null,c=s,f=s=0,y=null;null!==c&&f<r.length;f++){c.index>f?(y=c,c=null):y=c.sibling;var b=m(i,c,r[f],d);if(null===b){null===c&&(c=y);break}e&&c&&null===b.alternate&&t(i,c),s=a(b,s,f),null===l?p=b:l.sibling=b,l=b,c=y}if(f===r.length)return n(i,c),p;if(null===c){for(;f<r.length;f++)null!==(c=u(i,r[f],d))&&(s=a(c,s,f),null===l?p=c:l.sibling=c,l=c);return p}for(c=o(i,c);f<r.length;f++)null!==(y=h(c,i,f,r[f],d))&&(e&&null!==y.alternate&&c.delete(null===y.key?f:y.key),s=a(y,s,f),null===l?p=y:l.sibling=y,l=y);return e&&c.forEach((function(e){return t(i,e)})),p}function y(i,r,d,p){var l=B(d);if("function"!=typeof l)throw Error(s(150));if(null==(d=l.call(d)))throw Error(s(151));for(var c=l=null,f=r,y=r=0,b=null,g=d.next();null!==f&&!g.done;y++,g=d.next()){f.index>y?(b=f,f=null):b=f.sibling;var v=m(i,f,g.value,p);if(null===v){null===f&&(f=b);break}e&&f&&null===v.alternate&&t(i,f),r=a(v,r,y),null===c?l=v:c.sibling=v,c=v,f=b}if(g.done)return n(i,f),l;if(null===f){for(;!g.done;y++,g=d.next())null!==(g=u(i,g.value,p))&&(r=a(g,r,y),null===c?l=g:c.sibling=g,c=g);return l}for(f=o(i,f);!g.done;y++,g=d.next())null!==(g=h(f,i,y,g.value,p))&&(e&&null!==g.alternate&&f.delete(null===g.key?y:g.key),r=a(g,r,y),null===c?l=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(i,e)})),l}return function(e,o,a,d){var p="object"==typeof a&&null!==a&&a.type===T&&null===a.key;p&&(a=a.props.children);var l="object"==typeof a&&null!==a;if(l)switch(a.$$typeof){case w:e:{for(l=a.key,p=o;null!==p;){if(p.key===l){if(7===p.tag){if(a.type===T){n(e,p.sibling),(o=i(p,a.props.children)).return=e,e=o;break e}}else if(p.elementType===a.type){n(e,p.sibling),(o=i(p,a.props)).ref=Sa(e,p,a),o.return=e,e=o;break e}n(e,p);break}t(e,p),p=p.sibling}a.type===T?((o=Kd(a.props.children,e.mode,d,a.key)).return=e,e=o):((d=Qd(a.type,a.key,a.props,null,e.mode,d)).ref=Sa(e,o,a),d.return=e,e=d)}return r(e);case S:e:{for(p=a.key;null!==o;){if(o.key===p){if(4===o.tag&&o.stateNode.containerInfo===a.containerInfo&&o.stateNode.implementation===a.implementation){n(e,o.sibling),(o=i(o,a.children||[])).return=e,e=o;break e}n(e,o);break}t(e,o),o=o.sibling}(o=$d(a,e.mode,d)).return=e,e=o}return r(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==o&&6===o.tag?(n(e,o.sibling),(o=i(o,a)).return=e,e=o):(n(e,o),(o=Wd(a,e.mode,d)).return=e,e=o),r(e);if(wa(a))return f(e,o,a,d);if(B(a))return y(e,o,a,d);if(l&&Ta(e,a),void 0===a&&!p)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(s(152,Q(e.type)||"Component"))}return n(e,o)}}var Pa=Ea(!0),xa=Ea(!1),Ra={},Aa=pi(Ra),Ia=pi(Ra),Oa=pi(Ra);function Ua(e){if(e===Ra)throw Error(s(174));return e}function Na(e,t){switch(ci(Oa,t),ci(Ia,e),ci(Aa,Ra),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:me(null,"");break;default:t=me(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}li(Aa),ci(Aa,t)}function La(){li(Aa),li(Ia),li(Oa)}function Da(e){Ua(Oa.current);var t=Ua(Aa.current),n=me(t,e.type);t!==n&&(ci(Ia,e),ci(Aa,n))}function Ca(e){Ia.current===e&&(li(Aa),li(Ia))}var Fa=pi(0);function qa(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ja=null,Ma=null,Ga=!1;function Ba(e,t){var n=Vd(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function za(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Va(e){if(Ga){var t=Ma;if(t){var n=t;if(!za(e,t)){if(!(t=Ko(n.nextSibling))||!za(e,t))return e.flags=-1025&e.flags|2,Ga=!1,void(ja=e);Ba(ja,n)}ja=e,Ma=Ko(t.firstChild)}else e.flags=-1025&e.flags|2,Ga=!1,ja=e}}function Ha(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ja=e}function Ja(e){if(e!==ja)return!1;if(!Ga)return Ha(e),Ga=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Vo(t,e.memoizedProps))for(t=Ma;t;)Ba(e,t),t=Ko(t.nextSibling);if(Ha(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(s(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ma=Ko(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ma=null}}else Ma=ja?Ko(e.stateNode.nextSibling):null;return!0}function Qa(){Ma=ja=null,Ga=!1}var Ka=[];function Ya(){for(var e=0;e<Ka.length;e++)Ka[e]._workInProgressVersionPrimary=null;Ka.length=0}var Wa=k.ReactCurrentDispatcher,$a=k.ReactCurrentBatchConfig,Za=0,Xa=null,es=null,ts=null,ns=!1,os=!1;function is(){throw Error(s(321))}function as(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lo(e[n],t[n]))return!1;return!0}function ss(e,t,n,o,i,a){if(Za=a,Xa=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Wa.current=null===e||null===e.memoizedState?Us:Ns,e=n(o,i),os){a=0;do{if(os=!1,!(25>a))throw Error(s(301));a+=1,ts=es=null,t.updateQueue=null,Wa.current=Ls,e=n(o,i)}while(os)}if(Wa.current=Os,t=null!==es&&null!==es.next,Za=0,ts=es=Xa=null,ns=!1,t)throw Error(s(300));return e}function rs(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ts?Xa.memoizedState=ts=e:ts=ts.next=e,ts}function ds(){if(null===es){var e=Xa.alternate;e=null!==e?e.memoizedState:null}else e=es.next;var t=null===ts?Xa.memoizedState:ts.next;if(null!==t)ts=t,es=e;else{if(null===e)throw Error(s(310));e={memoizedState:(es=e).memoizedState,baseState:es.baseState,baseQueue:es.baseQueue,queue:es.queue,next:null},null===ts?Xa.memoizedState=ts=e:ts=ts.next=e}return ts}function ps(e,t){return"function"==typeof t?t(e):t}function ls(e){var t=ds(),n=t.queue;if(null===n)throw Error(s(311));n.lastRenderedReducer=e;var o=es,i=o.baseQueue,a=n.pending;if(null!==a){if(null!==i){var r=i.next;i.next=a.next,a.next=r}o.baseQueue=i=a,n.pending=null}if(null!==i){i=i.next,o=o.baseState;var d=r=a=null,p=i;do{var l=p.lane;if((Za&l)===l)null!==d&&(d=d.next={lane:0,action:p.action,eagerReducer:p.eagerReducer,eagerState:p.eagerState,next:null}),o=p.eagerReducer===e?p.eagerState:e(o,p.action);else{var c={lane:l,action:p.action,eagerReducer:p.eagerReducer,eagerState:p.eagerState,next:null};null===d?(r=d=c,a=o):d=d.next=c,Xa.lanes|=l,Gr|=l}p=p.next}while(null!==p&&p!==i);null===d?a=o:d.next=r,lo(o,t.memoizedState)||(Cs=!0),t.memoizedState=o,t.baseState=a,t.baseQueue=d,n.lastRenderedState=o}return[t.memoizedState,n.dispatch]}function cs(e){var t=ds(),n=t.queue;if(null===n)throw Error(s(311));n.lastRenderedReducer=e;var o=n.dispatch,i=n.pending,a=t.memoizedState;if(null!==i){n.pending=null;var r=i=i.next;do{a=e(a,r.action),r=r.next}while(r!==i);lo(a,t.memoizedState)||(Cs=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,o]}function us(e,t,n){var o=t._getVersion;o=o(t._source);var i=t._workInProgressVersionPrimary;if(null!==i?e=i===o:(e=e.mutableReadLanes,(e=(Za&e)===e)&&(t._workInProgressVersionPrimary=o,Ka.push(t))),e)return n(t._source);throw Ka.push(t),Error(s(350))}function ms(e,t,n,o){var i=Nr;if(null===i)throw Error(s(349));var a=t._getVersion,r=a(t._source),d=Wa.current,p=d.useState((function(){return us(i,t,n)})),l=p[1],c=p[0];p=ts;var u=e.memoizedState,m=u.refs,h=m.getSnapshot,f=u.source;u=u.subscribe;var y=Xa;return e.memoizedState={refs:m,source:t,subscribe:o},d.useEffect((function(){m.getSnapshot=n,m.setSnapshot=l;var e=a(t._source);if(!lo(r,e)){e=n(t._source),lo(c,e)||(l(e),e=md(y),i.mutableReadLanes|=e&i.pendingLanes),e=i.mutableReadLanes,i.entangledLanes|=e;for(var o=i.entanglements,s=e;0<s;){var d=31-zt(s),p=1<<d;o[d]|=e,s&=~p}}}),[n,t,o]),d.useEffect((function(){return o(t._source,(function(){var e=m.getSnapshot,n=m.setSnapshot;try{n(e(t._source));var o=md(y);i.mutableReadLanes|=o&i.pendingLanes}catch(a){n((function(){throw a}))}}))}),[t,o]),lo(h,n)&&lo(f,t)&&lo(u,o)||((e={pending:null,dispatch:null,lastRenderedReducer:ps,lastRenderedState:c}).dispatch=l=Is.bind(null,Xa,e),p.queue=e,p.baseQueue=null,c=us(i,t,n),p.memoizedState=p.baseState=c),c}function hs(e,t,n){return ms(ds(),e,t,n)}function fs(e){var t=rs();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ps,lastRenderedState:e}).dispatch=Is.bind(null,Xa,e),[t.memoizedState,e]}function ys(e,t,n,o){return e={tag:e,create:t,destroy:n,deps:o,next:null},null===(t=Xa.updateQueue)?(t={lastEffect:null},Xa.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(o=n.next,n.next=e,e.next=o,t.lastEffect=e),e}function bs(e){return e={current:e},rs().memoizedState=e}function gs(){return ds().memoizedState}function vs(e,t,n,o){var i=rs();Xa.flags|=e,i.memoizedState=ys(1|t,n,void 0,void 0===o?null:o)}function _s(e,t,n,o){var i=ds();o=void 0===o?null:o;var a=void 0;if(null!==es){var s=es.memoizedState;if(a=s.destroy,null!==o&&as(o,s.deps))return void ys(t,n,a,o)}Xa.flags|=e,i.memoizedState=ys(1|t,n,a,o)}function ks(e,t){return vs(516,4,e,t)}function ws(e,t){return _s(516,4,e,t)}function Ss(e,t){return _s(4,2,e,t)}function Ts(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Es(e,t,n){return n=null!=n?n.concat([e]):null,_s(4,2,Ts.bind(null,t,e),n)}function Ps(){}function xs(e,t){var n=ds();t=void 0===t?null:t;var o=n.memoizedState;return null!==o&&null!==t&&as(t,o[1])?o[0]:(n.memoizedState=[e,t],e)}function Rs(e,t){var n=ds();t=void 0===t?null:t;var o=n.memoizedState;return null!==o&&null!==t&&as(t,o[1])?o[0]:(e=e(),n.memoizedState=[e,t],e)}function As(e,t){var n=Vi();Ji(98>n?98:n,(function(){e(!0)})),Ji(97<n?97:n,(function(){var n=$a.transition;$a.transition=1;try{e(!1),t()}finally{$a.transition=n}}))}function Is(e,t,n){var o=ud(),i=md(e),a={lane:i,action:n,eagerReducer:null,eagerState:null,next:null},s=t.pending;if(null===s?a.next=a:(a.next=s.next,s.next=a),t.pending=a,s=e.alternate,e===Xa||null!==s&&s===Xa)os=ns=!0;else{if(0===e.lanes&&(null===s||0===s.lanes)&&null!==(s=t.lastRenderedReducer))try{var r=t.lastRenderedState,d=s(r,n);if(a.eagerReducer=s,a.eagerState=d,lo(d,r))return}catch(p){}hd(e,i,o)}}var Os={readContext:sa,useCallback:is,useContext:is,useEffect:is,useImperativeHandle:is,useLayoutEffect:is,useMemo:is,useReducer:is,useRef:is,useState:is,useDebugValue:is,useDeferredValue:is,useTransition:is,useMutableSource:is,useOpaqueIdentifier:is,unstable_isNewReconciler:!1},Us={readContext:sa,useCallback:function(e,t){return rs().memoizedState=[e,void 0===t?null:t],e},useContext:sa,useEffect:ks,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,vs(4,2,Ts.bind(null,t,e),n)},useLayoutEffect:function(e,t){return vs(4,2,e,t)},useMemo:function(e,t){var n=rs();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var o=rs();return t=void 0!==n?n(t):t,o.memoizedState=o.baseState=t,e=(e=o.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Is.bind(null,Xa,e),[o.memoizedState,e]},useRef:bs,useState:fs,useDebugValue:Ps,useDeferredValue:function(e){var t=fs(e),n=t[0],o=t[1];return ks((function(){var t=$a.transition;$a.transition=1;try{o(e)}finally{$a.transition=t}}),[e]),n},useTransition:function(){var e=fs(!1),t=e[0];return bs(e=As.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var o=rs();return o.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ms(o,e,t,n)},useOpaqueIdentifier:function(){if(Ga){var e=!1,t=function(e){return{$$typeof:D,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Wo++).toString(36))),Error(s(355))})),n=fs(t)[1];return 0==(2&Xa.mode)&&(Xa.flags|=516,ys(5,(function(){n("r:"+(Wo++).toString(36))}),void 0,null)),t}return fs(t="r:"+(Wo++).toString(36)),t},unstable_isNewReconciler:!1},Ns={readContext:sa,useCallback:xs,useContext:sa,useEffect:ws,useImperativeHandle:Es,useLayoutEffect:Ss,useMemo:Rs,useReducer:ls,useRef:gs,useState:function(){return ls(ps)},useDebugValue:Ps,useDeferredValue:function(e){var t=ls(ps),n=t[0],o=t[1];return ws((function(){var t=$a.transition;$a.transition=1;try{o(e)}finally{$a.transition=t}}),[e]),n},useTransition:function(){var e=ls(ps)[0];return[gs().current,e]},useMutableSource:hs,useOpaqueIdentifier:function(){return ls(ps)[0]},unstable_isNewReconciler:!1},Ls={readContext:sa,useCallback:xs,useContext:sa,useEffect:ws,useImperativeHandle:Es,useLayoutEffect:Ss,useMemo:Rs,useReducer:cs,useRef:gs,useState:function(){return cs(ps)},useDebugValue:Ps,useDeferredValue:function(e){var t=cs(ps),n=t[0],o=t[1];return ws((function(){var t=$a.transition;$a.transition=1;try{o(e)}finally{$a.transition=t}}),[e]),n},useTransition:function(){var e=cs(ps)[0];return[gs().current,e]},useMutableSource:hs,useOpaqueIdentifier:function(){return cs(ps)[0]},unstable_isNewReconciler:!1},Ds=k.ReactCurrentOwner,Cs=!1;function Fs(e,t,n,o){t.child=null===e?xa(t,null,n,o):Pa(t,e.child,n,o)}function qs(e,t,n,o,i){n=n.render;var a=t.ref;return aa(t,i),o=ss(e,t,n,o,a,i),null===e||Cs?(t.flags|=1,Fs(e,t,o,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,ar(e,t,i))}function js(e,t,n,o,i,a){if(null===e){var s=n.type;return"function"!=typeof s||Hd(s)||void 0!==s.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Qd(n.type,null,o,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=s,Ms(e,t,s,o,i,a))}return s=e.child,0==(i&a)&&(i=s.memoizedProps,(n=null!==(n=n.compare)?n:uo)(i,o)&&e.ref===t.ref)?ar(e,t,a):(t.flags|=1,(e=Jd(s,o)).ref=t.ref,e.return=t,t.child=e)}function Ms(e,t,n,o,i,a){if(null!==e&&uo(e.memoizedProps,o)&&e.ref===t.ref){if(Cs=!1,0==(a&i))return t.lanes=e.lanes,ar(e,t,a);0!=(16384&e.flags)&&(Cs=!0)}return zs(e,t,n,o,a)}function Gs(e,t,n){var o=t.pendingProps,i=o.children,a=null!==e?e.memoizedState:null;if("hidden"===o.mode||"unstable-defer-without-hiding"===o.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},wd(t,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},wd(t,e),null;t.memoizedState={baseLanes:0},wd(t,null!==a?a.baseLanes:n)}else null!==a?(o=a.baseLanes|n,t.memoizedState=null):o=n,wd(t,o);return Fs(e,t,i,n),t.child}function Bs(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function zs(e,t,n,o,i){var a=bi(n)?fi:mi.current;return a=yi(t,a),aa(t,i),n=ss(e,t,n,o,a,i),null===e||Cs?(t.flags|=1,Fs(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,ar(e,t,i))}function Vs(e,t,n,o,i){if(bi(n)){var a=!0;ki(t)}else a=!1;if(aa(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),va(t,n,o),ka(t,n,o,i),o=!0;else if(null===e){var s=t.stateNode,r=t.memoizedProps;s.props=r;var d=s.context,p=n.contextType;"object"==typeof p&&null!==p?p=sa(p):p=yi(t,p=bi(n)?fi:mi.current);var l=n.getDerivedStateFromProps,c="function"==typeof l||"function"==typeof s.getSnapshotBeforeUpdate;c||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(r!==o||d!==p)&&_a(t,s,o,p),ra=!1;var u=t.memoizedState;s.state=u,ma(t,o,s,i),d=t.memoizedState,r!==o||u!==d||hi.current||ra?("function"==typeof l&&(ya(t,n,l,o),d=t.memoizedState),(r=ra||ga(t,n,r,o,u,d,p))?(c||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(t.flags|=4)):("function"==typeof s.componentDidMount&&(t.flags|=4),t.memoizedProps=o,t.memoizedState=d),s.props=o,s.state=d,s.context=p,o=r):("function"==typeof s.componentDidMount&&(t.flags|=4),o=!1)}else{s=t.stateNode,pa(e,t),r=t.memoizedProps,p=t.type===t.elementType?r:$i(t.type,r),s.props=p,c=t.pendingProps,u=s.context,"object"==typeof(d=n.contextType)&&null!==d?d=sa(d):d=yi(t,d=bi(n)?fi:mi.current);var m=n.getDerivedStateFromProps;(l="function"==typeof m||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(r!==c||u!==d)&&_a(t,s,o,d),ra=!1,u=t.memoizedState,s.state=u,ma(t,o,s,i);var h=t.memoizedState;r!==c||u!==h||hi.current||ra?("function"==typeof m&&(ya(t,n,m,o),h=t.memoizedState),(p=ra||ga(t,n,p,o,u,h,d))?(l||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(o,h,d),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(o,h,d)),"function"==typeof s.componentDidUpdate&&(t.flags|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof s.componentDidUpdate||r===e.memoizedProps&&u===e.memoizedState||(t.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||r===e.memoizedProps&&u===e.memoizedState||(t.flags|=256),t.memoizedProps=o,t.memoizedState=h),s.props=o,s.state=h,s.context=d,o=p):("function"!=typeof s.componentDidUpdate||r===e.memoizedProps&&u===e.memoizedState||(t.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||r===e.memoizedProps&&u===e.memoizedState||(t.flags|=256),o=!1)}return Hs(e,t,n,o,a,i)}function Hs(e,t,n,o,i,a){Bs(e,t);var s=0!=(64&t.flags);if(!o&&!s)return i&&wi(t,n,!1),ar(e,t,a);o=t.stateNode,Ds.current=t;var r=s&&"function"!=typeof n.getDerivedStateFromError?null:o.render();return t.flags|=1,null!==e&&s?(t.child=Pa(t,e.child,null,a),t.child=Pa(t,null,r,a)):Fs(e,t,r,a),t.memoizedState=o.state,i&&wi(t,n,!0),t.child}function Js(e){var t=e.stateNode;t.pendingContext?vi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&vi(0,t.context,!1),Na(e,t.containerInfo)}var Qs,Ks,Ys,Ws,$s={dehydrated:null,retryLane:0};function Zs(e,t,n){var o,i=t.pendingProps,a=Fa.current,s=!1;return(o=0!=(64&t.flags))||(o=(null===e||null!==e.memoizedState)&&0!=(2&a)),o?(s=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),ci(Fa,1&a),null===e?(void 0!==i.fallback&&Va(t),e=i.children,a=i.fallback,s?(e=Xs(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$s,e):"number"==typeof i.unstable_expectedLoadTime?(e=Xs(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$s,t.lanes=33554432,e):((n=Yd({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,s?(i=tr(e,t,i.children,i.fallback,n),s=t.child,a=e.child.memoizedState,s.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},s.childLanes=e.childLanes&~n,t.memoizedState=$s,i):(n=er(e,t,i.children,n),t.memoizedState=null,n))}function Xs(e,t,n,o){var i=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&i)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Yd(t,i,0,null),n=Kd(n,i,o,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function er(e,t,n,o){var i=e.child;return e=i.sibling,n=Jd(i,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=o),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}function tr(e,t,n,o,i){var a=t.mode,s=e.child;e=s.sibling;var r={mode:"hidden",children:n};return 0==(2&a)&&t.child!==s?((n=t.child).childLanes=0,n.pendingProps=r,null!==(s=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=s,s.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Jd(s,r),null!==e?o=Jd(e,o):(o=Kd(o,a,i,null)).flags|=2,o.return=t,n.return=t,n.sibling=o,t.child=n,o}function nr(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ia(e.return,t)}function or(e,t,n,o,i,a){var s=e.memoizedState;null===s?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:o,tail:n,tailMode:i,lastEffect:a}:(s.isBackwards=t,s.rendering=null,s.renderingStartTime=0,s.last=o,s.tail=n,s.tailMode=i,s.lastEffect=a)}function ir(e,t,n){var o=t.pendingProps,i=o.revealOrder,a=o.tail;if(Fs(e,t,o.children,n),0!=(2&(o=Fa.current)))o=1&o|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&nr(e,n);else if(19===e.tag)nr(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}o&=1}if(ci(Fa,o),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===qa(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),or(t,!1,i,n,a,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===qa(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}or(t,!0,n,null,a,t.lastEffect);break;case"together":or(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function ar(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Gr|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(s(153));if(null!==t.child){for(n=Jd(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Jd(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function sr(e,t){if(!Ga)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var o=null;null!==n;)null!==n.alternate&&(o=n),n=n.sibling;null===o?t||null===e.tail?e.tail=null:e.tail.sibling=null:o.sibling=null}}function rr(e,t,n){var o=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return bi(t.type)&&gi(),null;case 3:return La(),li(hi),li(mi),Ya(),(o=t.stateNode).pendingContext&&(o.context=o.pendingContext,o.pendingContext=null),null!==e&&null!==e.child||(Ja(t)?t.flags|=4:o.hydrate||(t.flags|=256)),Ks(t),null;case 5:Ca(t);var a=Ua(Oa.current);if(n=t.type,null!==e&&null!=t.stateNode)Ys(e,t,n,o,a),e.ref!==t.ref&&(t.flags|=128);else{if(!o){if(null===t.stateNode)throw Error(s(166));return null}if(e=Ua(Aa.current),Ja(t)){o=t.stateNode,n=t.type;var r=t.memoizedProps;switch(o[Zo]=t,o[Xo]=r,n){case"dialog":Io("cancel",o),Io("close",o);break;case"iframe":case"object":case"embed":Io("load",o);break;case"video":case"audio":for(e=0;e<Po.length;e++)Io(Po[e],o);break;case"source":Io("error",o);break;case"img":case"image":case"link":Io("error",o),Io("load",o);break;case"details":Io("toggle",o);break;case"input":ee(o,r),Io("invalid",o);break;case"select":o._wrapperState={wasMultiple:!!r.multiple},Io("invalid",o);break;case"textarea":de(o,r),Io("invalid",o)}for(var p in Se(n,r),e=null,r)r.hasOwnProperty(p)&&(a=r[p],"children"===p?"string"==typeof a?o.textContent!==a&&(e=["children",a]):"number"==typeof a&&o.textContent!==""+a&&(e=["children",""+a]):d.hasOwnProperty(p)&&null!=a&&"onScroll"===p&&Io("scroll",o));switch(n){case"input":W(o),oe(o,r,!0);break;case"textarea":W(o),le(o);break;case"select":case"option":break;default:"function"==typeof r.onClick&&(o.onclick=Mo)}o=e,t.updateQueue=o,null!==o&&(t.flags|=4)}else{switch(p=9===a.nodeType?a:a.ownerDocument,e===ce.html&&(e=ue(n)),e===ce.html?"script"===n?((e=p.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof o.is?e=p.createElement(n,{is:o.is}):(e=p.createElement(n),"select"===n&&(p=e,o.multiple?p.multiple=!0:o.size&&(p.size=o.size))):e=p.createElementNS(e,n),e[Zo]=t,e[Xo]=o,Qs(e,t,!1,!1),t.stateNode=e,p=Te(n,o),n){case"dialog":Io("cancel",e),Io("close",e),a=o;break;case"iframe":case"object":case"embed":Io("load",e),a=o;break;case"video":case"audio":for(a=0;a<Po.length;a++)Io(Po[a],e);a=o;break;case"source":Io("error",e),a=o;break;case"img":case"image":case"link":Io("error",e),Io("load",e),a=o;break;case"details":Io("toggle",e),a=o;break;case"input":ee(e,o),a=X(e,o),Io("invalid",e);break;case"option":a=ae(e,o);break;case"select":e._wrapperState={wasMultiple:!!o.multiple},a=i({},o,{value:void 0}),Io("invalid",e);break;case"textarea":de(e,o),a=re(e,o),Io("invalid",e);break;default:a=o}Se(n,a);var l=a;for(r in l)if(l.hasOwnProperty(r)){var c=l[r];"style"===r?ke(e,c):"dangerouslySetInnerHTML"===r?null!=(c=c?c.__html:void 0)&&ye(e,c):"children"===r?"string"==typeof c?("textarea"!==n||""!==c)&&be(e,c):"number"==typeof c&&be(e,""+c):"suppressContentEditableWarning"!==r&&"suppressHydrationWarning"!==r&&"autoFocus"!==r&&(d.hasOwnProperty(r)?null!=c&&"onScroll"===r&&Io("scroll",e):null!=c&&_(e,r,c,p))}switch(n){case"input":W(e),oe(e,o,!1);break;case"textarea":W(e),le(e);break;case"option":null!=o.value&&e.setAttribute("value",""+K(o.value));break;case"select":e.multiple=!!o.multiple,null!=(r=o.value)?se(e,!!o.multiple,r,!1):null!=o.defaultValue&&se(e,!!o.multiple,o.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Mo)}zo(n,o)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ws(e,t,e.memoizedProps,o);else{if("string"!=typeof o&&null===t.stateNode)throw Error(s(166));n=Ua(Oa.current),Ua(Aa.current),Ja(t)?(o=t.stateNode,n=t.memoizedProps,o[Zo]=t,o.nodeValue!==n&&(t.flags|=4)):((o=(9===n.nodeType?n:n.ownerDocument).createTextNode(o))[Zo]=t,t.stateNode=o)}return null;case 13:return li(Fa),o=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(o=null!==o,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ja(t):n=null!==e.memoizedState,o&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Fa.current)?0===qr&&(qr=3):(0!==qr&&3!==qr||(qr=4),null===Nr||0==(134217727&Gr)&&0==(134217727&Br)||gd(Nr,Dr))),(o||n)&&(t.flags|=4),null);case 4:return La(),Ks(t),null===e&&Uo(t.stateNode.containerInfo),null;case 10:return oa(t),null;case 19:if(li(Fa),null===(o=t.memoizedState))return null;if(r=0!=(64&t.flags),null===(p=o.rendering))if(r)sr(o,!1);else{if(0!==qr||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(p=qa(e))){for(t.flags|=64,sr(o,!1),null!==(r=p.updateQueue)&&(t.updateQueue=r,t.flags|=4),null===o.lastEffect&&(t.firstEffect=null),t.lastEffect=o.lastEffect,o=n,n=t.child;null!==n;)e=o,(r=n).flags&=2,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null,null===(p=r.alternate)?(r.childLanes=0,r.lanes=e,r.child=null,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null,r.stateNode=null):(r.childLanes=p.childLanes,r.lanes=p.lanes,r.child=p.child,r.memoizedProps=p.memoizedProps,r.memoizedState=p.memoizedState,r.updateQueue=p.updateQueue,r.type=p.type,e=p.dependencies,r.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ci(Fa,1&Fa.current|2),t.child}e=e.sibling}null!==o.tail&&zi()>Jr&&(t.flags|=64,r=!0,sr(o,!1),t.lanes=33554432)}else{if(!r)if(null!==(e=qa(p))){if(t.flags|=64,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),sr(o,!0),null===o.tail&&"hidden"===o.tailMode&&!p.alternate&&!Ga)return null!==(t=t.lastEffect=o.lastEffect)&&(t.nextEffect=null),null}else 2*zi()-o.renderingStartTime>Jr&&1073741824!==n&&(t.flags|=64,r=!0,sr(o,!1),t.lanes=33554432);o.isBackwards?(p.sibling=t.child,t.child=p):(null!==(n=o.last)?n.sibling=p:t.child=p,o.last=p)}return null!==o.tail?(n=o.tail,o.rendering=n,o.tail=n.sibling,o.lastEffect=t.lastEffect,o.renderingStartTime=zi(),n.sibling=null,t=Fa.current,ci(Fa,r?1&t|2:1&t),n):null;case 23:case 24:return Sd(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==o.mode&&(t.flags|=4),null}throw Error(s(156,t.tag))}function dr(e){switch(e.tag){case 1:bi(e.type)&&gi();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(La(),li(hi),li(mi),Ya(),0!=(64&(t=e.flags)))throw Error(s(285));return e.flags=-4097&t|64,e;case 5:return Ca(e),null;case 13:return li(Fa),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return li(Fa),null;case 4:return La(),null;case 10:return oa(e),null;case 23:case 24:return Sd(),null;default:return null}}function pr(e,t){try{var n="",o=t;do{n+=J(o),o=o.return}while(o);var i=n}catch(a){i="\nError generating stack: "+a.message+"\n"+a.stack}return{value:e,source:t,stack:i}}function lr(e,t){try{console.error(t.value)}catch(n){setTimeout((function(){throw n}))}}Qs=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ks=function(){},Ys=function(e,t,n,o){var a=e.memoizedProps;if(a!==o){e=t.stateNode,Ua(Aa.current);var s,r=null;switch(n){case"input":a=X(e,a),o=X(e,o),r=[];break;case"option":a=ae(e,a),o=ae(e,o),r=[];break;case"select":a=i({},a,{value:void 0}),o=i({},o,{value:void 0}),r=[];break;case"textarea":a=re(e,a),o=re(e,o),r=[];break;default:"function"!=typeof a.onClick&&"function"==typeof o.onClick&&(e.onclick=Mo)}for(c in Se(n,o),n=null,a)if(!o.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var p=a[c];for(s in p)p.hasOwnProperty(s)&&(n||(n={}),n[s]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(d.hasOwnProperty(c)?r||(r=[]):(r=r||[]).push(c,null));for(c in o){var l=o[c];if(p=null!=a?a[c]:void 0,o.hasOwnProperty(c)&&l!==p&&(null!=l||null!=p))if("style"===c)if(p){for(s in p)!p.hasOwnProperty(s)||l&&l.hasOwnProperty(s)||(n||(n={}),n[s]="");for(s in l)l.hasOwnProperty(s)&&p[s]!==l[s]&&(n||(n={}),n[s]=l[s])}else n||(r||(r=[]),r.push(c,n)),n=l;else"dangerouslySetInnerHTML"===c?(l=l?l.__html:void 0,p=p?p.__html:void 0,null!=l&&p!==l&&(r=r||[]).push(c,l)):"children"===c?"string"!=typeof l&&"number"!=typeof l||(r=r||[]).push(c,""+l):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(d.hasOwnProperty(c)?(null!=l&&"onScroll"===c&&Io("scroll",e),r||p===l||(r=[])):"object"==typeof l&&null!==l&&l.$$typeof===D?l.toString():(r=r||[]).push(c,l))}n&&(r=r||[]).push("style",n);var c=r;(t.updateQueue=c)&&(t.flags|=4)}},Ws=function(e,t,n,o){n!==o&&(t.flags|=4)};var cr="function"==typeof WeakMap?WeakMap:Map;function ur(e,t,n){(n=la(-1,n)).tag=3,n.payload={element:null};var o=t.value;return n.callback=function(){Wr||(Wr=!0,$r=o),lr(0,t)},n}function mr(e,t,n){(n=la(-1,n)).tag=3;var o=e.type.getDerivedStateFromError;if("function"==typeof o){var i=t.value;n.payload=function(){return lr(0,t),o(i)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof o&&(null===Zr?Zr=new Set([this]):Zr.add(this),lr(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var hr="function"==typeof WeakSet?WeakSet:Set;function fr(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(n){Md(e,n)}else t.current=null}function yr(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,o=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:$i(t.type,n),o),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Qo(t.stateNode.containerInfo))}throw Error(s(163))}function br(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var o=e.create;e.destroy=o()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var i=e;o=i.next,0!=(4&(i=i.tag))&&0!=(1&i)&&(Fd(n,e),Cd(n,e)),e=o}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(o=n.elementType===n.type?t.memoizedProps:$i(n.type,t.memoizedProps),e.componentDidUpdate(o,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&ha(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}ha(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&zo(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&kt(n)))))}throw Error(s(163))}function gr(e,t){for(var n=e;;){if(5===n.tag){var o=n.stateNode;if(t)"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none";else{o=n.stateNode;var i=n.memoizedProps.style;i=null!=i&&i.hasOwnProperty("display")?i.display:null,o.style.display=_e("display",i)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function vr(e,t){if(Ti&&"function"==typeof Ti.onCommitFiberUnmount)try{Ti.onCommitFiberUnmount(Si,t)}catch(a){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var o=n,i=o.destroy;if(o=o.tag,void 0!==i)if(0!=(4&o))Fd(t,n);else{o=t;try{i()}catch(a){Md(o,a)}}n=n.next}while(n!==e)}break;case 1:if(fr(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(a){Md(t,a)}break;case 5:fr(t);break;case 4:Er(e,t)}}function _r(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function kr(e){return 5===e.tag||3===e.tag||4===e.tag}function wr(e){e:{for(var t=e.return;null!==t;){if(kr(t))break e;t=t.return}throw Error(s(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var o=!1;break;case 3:case 4:t=t.containerInfo,o=!0;break;default:throw Error(s(161))}16&n.flags&&(be(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||kr(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}o?Sr(e,n,t):Tr(e,n,t)}function Sr(e,t,n){var o=e.tag,i=5===o||6===o;if(i)e=i?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Mo));else if(4!==o&&null!==(e=e.child))for(Sr(e,t,n),e=e.sibling;null!==e;)Sr(e,t,n),e=e.sibling}function Tr(e,t,n){var o=e.tag,i=5===o||6===o;if(i)e=i?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==o&&null!==(e=e.child))for(Tr(e,t,n),e=e.sibling;null!==e;)Tr(e,t,n),e=e.sibling}function Er(e,t){for(var n,o,i=t,a=!1;;){if(!a){a=i.return;e:for(;;){if(null===a)throw Error(s(160));switch(n=a.stateNode,a.tag){case 5:o=!1;break e;case 3:case 4:n=n.containerInfo,o=!0;break e}a=a.return}a=!0}if(5===i.tag||6===i.tag){e:for(var r=e,d=i,p=d;;)if(vr(r,p),null!==p.child&&4!==p.tag)p.child.return=p,p=p.child;else{if(p===d)break e;for(;null===p.sibling;){if(null===p.return||p.return===d)break e;p=p.return}p.sibling.return=p.return,p=p.sibling}o?(r=n,d=i.stateNode,8===r.nodeType?r.parentNode.removeChild(d):r.removeChild(d)):n.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){n=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(vr(e,i),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(a=!1)}i.sibling.return=i.return,i=i.sibling}}function Pr(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var o=n=n.next;do{3==(3&o.tag)&&(e=o.destroy,o.destroy=void 0,void 0!==e&&e()),o=o.next}while(o!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){o=t.memoizedProps;var i=null!==e?e.memoizedProps:o;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Xo]=o,"input"===e&&"radio"===o.type&&null!=o.name&&te(n,o),Te(e,i),t=Te(e,o),i=0;i<a.length;i+=2){var r=a[i],d=a[i+1];"style"===r?ke(n,d):"dangerouslySetInnerHTML"===r?ye(n,d):"children"===r?be(n,d):_(n,r,d,t)}switch(e){case"input":ne(n,o);break;case"textarea":pe(n,o);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!o.multiple,null!=(a=o.value)?se(n,!!o.multiple,a,!1):e!==!!o.multiple&&(null!=o.defaultValue?se(n,!!o.multiple,o.defaultValue,!0):se(n,!!o.multiple,o.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(s(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,kt(n.containerInfo)));case 13:return null!==t.memoizedState&&(Hr=zi(),gr(t.child,!0)),void xr(t);case 19:return void xr(t);case 23:case 24:return void gr(t,null!==t.memoizedState)}throw Error(s(163))}function xr(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new hr),t.forEach((function(t){var o=Bd.bind(null,e,t);n.has(t)||(n.add(t),t.then(o,o))}))}}function Rr(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var Ar=Math.ceil,Ir=k.ReactCurrentDispatcher,Or=k.ReactCurrentOwner,Ur=0,Nr=null,Lr=null,Dr=0,Cr=0,Fr=pi(0),qr=0,jr=null,Mr=0,Gr=0,Br=0,zr=0,Vr=null,Hr=0,Jr=1/0;function Qr(){Jr=zi()+500}var Kr,Yr=null,Wr=!1,$r=null,Zr=null,Xr=!1,ed=null,td=90,nd=[],od=[],id=null,ad=0,sd=null,rd=-1,dd=0,pd=0,ld=null,cd=!1;function ud(){return 0!=(48&Ur)?zi():-1!==rd?rd:rd=zi()}function md(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Vi()?1:2;if(0===dd&&(dd=Mr),0!==Wi.transition){0!==pd&&(pd=null!==Vr?Vr.pendingLanes:0),e=dd;var t=4186112&~pd;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Vi(),0!=(4&Ur)&&98===e?e=jt(12,dd):e=jt(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),dd),e}function hd(e,t,n){if(50<ad)throw ad=0,sd=null,Error(s(185));if(null===(e=fd(e,t)))return null;Bt(e,t,n),e===Nr&&(Br|=t,4===qr&&gd(e,Dr));var o=Vi();1===t?0!=(8&Ur)&&0==(48&Ur)?vd(e):(yd(e,n),0===Ur&&(Qr(),Ki())):(0==(4&Ur)||98!==o&&99!==o||(null===id?id=new Set([e]):id.add(e)),yd(e,n)),Vr=e}function fd(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function yd(e,t){for(var n=e.callbackNode,o=e.suspendedLanes,i=e.pingedLanes,a=e.expirationTimes,r=e.pendingLanes;0<r;){var d=31-zt(r),p=1<<d,l=a[d];if(-1===l){if(0==(p&o)||0!=(p&i)){l=t,Ct(p);var c=Dt;a[d]=10<=c?l+250:6<=c?l+5e3:-1}}else l<=t&&(e.expiredLanes|=p);r&=~p}if(o=Ft(e,e===Nr?Dr:0),t=Dt,0===o)null!==n&&(n!==Fi&&xi(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Fi&&xi(n)}15===t?(n=vd.bind(null,e),null===ji?(ji=[n],Mi=Pi(Ui,Yi)):ji.push(n),n=Fi):14===t?n=Qi(99,vd.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(s(358,e))}}(t),n=Qi(n,bd.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function bd(e){if(rd=-1,pd=dd=0,0!=(48&Ur))throw Error(s(327));var t=e.callbackNode;if(Dd()&&e.callbackNode!==t)return null;var n=Ft(e,e===Nr?Dr:0);if(0===n)return null;var o=n,i=Ur;Ur|=16;var a=Pd();for(Nr===e&&Dr===o||(Qr(),Td(e,o));;)try{Ad();break}catch(d){Ed(e,d)}if(na(),Ir.current=a,Ur=i,null!==Lr?o=0:(Nr=null,Dr=0,o=qr),0!=(Mr&Br))Td(e,0);else if(0!==o){if(2===o&&(Ur|=64,e.hydrate&&(e.hydrate=!1,Qo(e.containerInfo)),0!==(n=qt(e))&&(o=xd(e,n))),1===o)throw t=jr,Td(e,0),gd(e,n),yd(e,zi()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,o){case 0:case 1:throw Error(s(345));case 2:case 5:Ud(e);break;case 3:if(gd(e,n),(62914560&n)===n&&10<(o=Hr+500-zi())){if(0!==Ft(e,0))break;if(((i=e.suspendedLanes)&n)!==n){ud(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=Ho(Ud.bind(null,e),o);break}Ud(e);break;case 4:if(gd(e,n),(4186112&n)===n)break;for(o=e.eventTimes,i=-1;0<n;){var r=31-zt(n);a=1<<r,(r=o[r])>i&&(i=r),n&=~a}if(n=i,10<(n=(120>(n=zi()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Ar(n/1960))-n)){e.timeoutHandle=Ho(Ud.bind(null,e),n);break}Ud(e);break;default:throw Error(s(329))}}return yd(e,zi()),e.callbackNode===t?bd.bind(null,e):null}function gd(e,t){for(t&=~zr,t&=~Br,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-zt(t),o=1<<n;e[n]=-1,t&=~o}}function vd(e){if(0!=(48&Ur))throw Error(s(327));if(Dd(),e===Nr&&0!=(e.expiredLanes&Dr)){var t=Dr,n=xd(e,t);0!=(Mr&Br)&&(n=xd(e,t=Ft(e,t)))}else n=xd(e,t=Ft(e,0));if(0!==e.tag&&2===n&&(Ur|=64,e.hydrate&&(e.hydrate=!1,Qo(e.containerInfo)),0!==(t=qt(e))&&(n=xd(e,t))),1===n)throw n=jr,Td(e,0),gd(e,t),yd(e,zi()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ud(e),yd(e,zi()),null}function _d(e,t){var n=Ur;Ur|=1;try{return e(t)}finally{0===(Ur=n)&&(Qr(),Ki())}}function kd(e,t){var n=Ur;Ur&=-2,Ur|=8;try{return e(t)}finally{0===(Ur=n)&&(Qr(),Ki())}}function wd(e,t){ci(Fr,Cr),Cr|=t,Mr|=t}function Sd(){Cr=Fr.current,li(Fr)}function Td(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Jo(n)),null!==Lr)for(n=Lr.return;null!==n;){var o=n;switch(o.tag){case 1:null!=(o=o.type.childContextTypes)&&gi();break;case 3:La(),li(hi),li(mi),Ya();break;case 5:Ca(o);break;case 4:La();break;case 13:case 19:li(Fa);break;case 10:oa(o);break;case 23:case 24:Sd()}n=n.return}Nr=e,Lr=Jd(e.current,null),Dr=Cr=Mr=t,qr=0,jr=null,zr=Br=Gr=0}function Ed(e,t){for(;;){var n=Lr;try{if(na(),Wa.current=Os,ns){for(var o=Xa.memoizedState;null!==o;){var i=o.queue;null!==i&&(i.pending=null),o=o.next}ns=!1}if(Za=0,ts=es=Xa=null,os=!1,Or.current=null,null===n||null===n.return){qr=1,jr=t,Lr=null;break}e:{var a=e,s=n.return,r=n,d=t;if(t=Dr,r.flags|=2048,r.firstEffect=r.lastEffect=null,null!==d&&"object"==typeof d&&"function"==typeof d.then){var p=d;if(0==(2&r.mode)){var l=r.alternate;l?(r.updateQueue=l.updateQueue,r.memoizedState=l.memoizedState,r.lanes=l.lanes):(r.updateQueue=null,r.memoizedState=null)}var c=0!=(1&Fa.current),u=s;do{var m;if(m=13===u.tag){var h=u.memoizedState;if(null!==h)m=null!==h.dehydrated;else{var f=u.memoizedProps;m=void 0!==f.fallback&&(!0!==f.unstable_avoidThisFallback||!c)}}if(m){var y=u.updateQueue;if(null===y){var b=new Set;b.add(p),u.updateQueue=b}else y.add(p);if(0==(2&u.mode)){if(u.flags|=64,r.flags|=16384,r.flags&=-2981,1===r.tag)if(null===r.alternate)r.tag=17;else{var g=la(-1,1);g.tag=2,ca(r,g)}r.lanes|=1;break e}d=void 0,r=t;var v=a.pingCache;if(null===v?(v=a.pingCache=new cr,d=new Set,v.set(p,d)):void 0===(d=v.get(p))&&(d=new Set,v.set(p,d)),!d.has(r)){d.add(r);var _=Gd.bind(null,a,p,r);p.then(_,_)}u.flags|=4096,u.lanes=t;break e}u=u.return}while(null!==u);d=Error((Q(r.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==qr&&(qr=2),d=pr(d,r),u=s;do{switch(u.tag){case 3:a=d,u.flags|=4096,t&=-t,u.lanes|=t,ua(u,ur(0,a,t));break e;case 1:a=d;var k=u.type,w=u.stateNode;if(0==(64&u.flags)&&("function"==typeof k.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Zr||!Zr.has(w)))){u.flags|=4096,t&=-t,u.lanes|=t,ua(u,mr(u,a,t));break e}}u=u.return}while(null!==u)}Od(n)}catch(S){t=S,Lr===n&&null!==n&&(Lr=n=n.return);continue}break}}function Pd(){var e=Ir.current;return Ir.current=Os,null===e?Os:e}function xd(e,t){var n=Ur;Ur|=16;var o=Pd();for(Nr===e&&Dr===t||Td(e,t);;)try{Rd();break}catch(i){Ed(e,i)}if(na(),Ur=n,Ir.current=o,null!==Lr)throw Error(s(261));return Nr=null,Dr=0,qr}function Rd(){for(;null!==Lr;)Id(Lr)}function Ad(){for(;null!==Lr&&!Ri();)Id(Lr)}function Id(e){var t=Kr(e.alternate,e,Cr);e.memoizedProps=e.pendingProps,null===t?Od(e):Lr=t,Or.current=null}function Od(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=rr(n,t,Cr)))return void(Lr=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Cr)||0==(4&n.mode)){for(var o=0,i=n.child;null!==i;)o|=i.lanes|i.childLanes,i=i.sibling;n.childLanes=o}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=dr(t)))return n.flags&=2047,void(Lr=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Lr=t);Lr=t=e}while(null!==t);0===qr&&(qr=5)}function Ud(e){var t=Vi();return Ji(99,Nd.bind(null,e,t)),null}function Nd(e,t){do{Dd()}while(null!==ed);if(0!=(48&Ur))throw Error(s(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(s(177));e.callbackNode=null;var o=n.lanes|n.childLanes,i=o,a=e.pendingLanes&~i;e.pendingLanes=i,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=i,e.mutableReadLanes&=i,e.entangledLanes&=i,i=e.entanglements;for(var r=e.eventTimes,d=e.expirationTimes;0<a;){var p=31-zt(a),l=1<<p;i[p]=0,r[p]=-1,d[p]=-1,a&=~l}if(null!==id&&0==(24&o)&&id.has(e)&&id.delete(e),e===Nr&&(Lr=Nr=null,Dr=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){if(i=Ur,Ur|=32,Or.current=null,Go=Kt,bo(r=yo())){if("selectionStart"in r)d={start:r.selectionStart,end:r.selectionEnd};else e:if(d=(d=r.ownerDocument)&&d.defaultView||window,(l=d.getSelection&&d.getSelection())&&0!==l.rangeCount){d=l.anchorNode,a=l.anchorOffset,p=l.focusNode,l=l.focusOffset;try{d.nodeType,p.nodeType}catch(P){d=null;break e}var c=0,u=-1,m=-1,h=0,f=0,y=r,b=null;t:for(;;){for(var g;y!==d||0!==a&&3!==y.nodeType||(u=c+a),y!==p||0!==l&&3!==y.nodeType||(m=c+l),3===y.nodeType&&(c+=y.nodeValue.length),null!==(g=y.firstChild);)b=y,y=g;for(;;){if(y===r)break t;if(b===d&&++h===a&&(u=c),b===p&&++f===l&&(m=c),null!==(g=y.nextSibling))break;b=(y=b).parentNode}y=g}d=-1===u||-1===m?null:{start:u,end:m}}else d=null;d=d||{start:0,end:0}}else d=null;Bo={focusedElem:r,selectionRange:d},Kt=!1,ld=null,cd=!1,Yr=o;do{try{Ld()}catch(P){if(null===Yr)throw Error(s(330));Md(Yr,P),Yr=Yr.nextEffect}}while(null!==Yr);ld=null,Yr=o;do{try{for(r=e;null!==Yr;){var v=Yr.flags;if(16&v&&be(Yr.stateNode,""),128&v){var _=Yr.alternate;if(null!==_){var k=_.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&v){case 2:wr(Yr),Yr.flags&=-3;break;case 6:wr(Yr),Yr.flags&=-3,Pr(Yr.alternate,Yr);break;case 1024:Yr.flags&=-1025;break;case 1028:Yr.flags&=-1025,Pr(Yr.alternate,Yr);break;case 4:Pr(Yr.alternate,Yr);break;case 8:Er(r,d=Yr);var w=d.alternate;_r(d),null!==w&&_r(w)}Yr=Yr.nextEffect}}catch(P){if(null===Yr)throw Error(s(330));Md(Yr,P),Yr=Yr.nextEffect}}while(null!==Yr);if(k=Bo,_=yo(),v=k.focusedElem,r=k.selectionRange,_!==v&&v&&v.ownerDocument&&fo(v.ownerDocument.documentElement,v)){null!==r&&bo(v)&&(_=r.start,void 0===(k=r.end)&&(k=_),"selectionStart"in v?(v.selectionStart=_,v.selectionEnd=Math.min(k,v.value.length)):(k=(_=v.ownerDocument||document)&&_.defaultView||window).getSelection&&(k=k.getSelection(),d=v.textContent.length,w=Math.min(r.start,d),r=void 0===r.end?w:Math.min(r.end,d),!k.extend&&w>r&&(d=r,r=w,w=d),d=ho(v,w),a=ho(v,r),d&&a&&(1!==k.rangeCount||k.anchorNode!==d.node||k.anchorOffset!==d.offset||k.focusNode!==a.node||k.focusOffset!==a.offset)&&((_=_.createRange()).setStart(d.node,d.offset),k.removeAllRanges(),w>r?(k.addRange(_),k.extend(a.node,a.offset)):(_.setEnd(a.node,a.offset),k.addRange(_))))),_=[];for(k=v;k=k.parentNode;)1===k.nodeType&&_.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof v.focus&&v.focus(),v=0;v<_.length;v++)(k=_[v]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Kt=!!Go,Bo=Go=null,e.current=n,Yr=o;do{try{for(v=e;null!==Yr;){var S=Yr.flags;if(36&S&&br(v,Yr.alternate,Yr),128&S){_=void 0;var T=Yr.ref;if(null!==T){var E=Yr.stateNode;Yr.tag,_=E,"function"==typeof T?T(_):T.current=_}}Yr=Yr.nextEffect}}catch(P){if(null===Yr)throw Error(s(330));Md(Yr,P),Yr=Yr.nextEffect}}while(null!==Yr);Yr=null,qi(),Ur=i}else e.current=n;if(Xr)Xr=!1,ed=e,td=t;else for(Yr=o;null!==Yr;)t=Yr.nextEffect,Yr.nextEffect=null,8&Yr.flags&&((S=Yr).sibling=null,S.stateNode=null),Yr=t;if(0===(o=e.pendingLanes)&&(Zr=null),1===o?e===sd?ad++:(ad=0,sd=e):ad=0,n=n.stateNode,Ti&&"function"==typeof Ti.onCommitFiberRoot)try{Ti.onCommitFiberRoot(Si,n,void 0,64==(64&n.current.flags))}catch(P){}if(yd(e,zi()),Wr)throw Wr=!1,e=$r,$r=null,e;return 0!=(8&Ur)||Ki(),null}function Ld(){for(;null!==Yr;){var e=Yr.alternate;cd||null===ld||(0!=(8&Yr.flags)?Xe(Yr,ld)&&(cd=!0):13===Yr.tag&&Rr(e,Yr)&&Xe(Yr,ld)&&(cd=!0));var t=Yr.flags;0!=(256&t)&&yr(e,Yr),0==(512&t)||Xr||(Xr=!0,Qi(97,(function(){return Dd(),null}))),Yr=Yr.nextEffect}}function Dd(){if(90!==td){var e=97<td?97:td;return td=90,Ji(e,qd)}return!1}function Cd(e,t){nd.push(t,e),Xr||(Xr=!0,Qi(97,(function(){return Dd(),null})))}function Fd(e,t){od.push(t,e),Xr||(Xr=!0,Qi(97,(function(){return Dd(),null})))}function qd(){if(null===ed)return!1;var e=ed;if(ed=null,0!=(48&Ur))throw Error(s(331));var t=Ur;Ur|=32;var n=od;od=[];for(var o=0;o<n.length;o+=2){var i=n[o],a=n[o+1],r=i.destroy;if(i.destroy=void 0,"function"==typeof r)try{r()}catch(p){if(null===a)throw Error(s(330));Md(a,p)}}for(n=nd,nd=[],o=0;o<n.length;o+=2){i=n[o],a=n[o+1];try{var d=i.create;i.destroy=d()}catch(p){if(null===a)throw Error(s(330));Md(a,p)}}for(d=e.current.firstEffect;null!==d;)e=d.nextEffect,d.nextEffect=null,8&d.flags&&(d.sibling=null,d.stateNode=null),d=e;return Ur=t,Ki(),!0}function jd(e,t,n){ca(e,t=ur(0,t=pr(n,t),1)),t=ud(),null!==(e=fd(e,1))&&(Bt(e,1,t),yd(e,t))}function Md(e,t){if(3===e.tag)jd(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){jd(n,e,t);break}if(1===n.tag){var o=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof o.componentDidCatch&&(null===Zr||!Zr.has(o))){var i=mr(n,e=pr(t,e),1);if(ca(n,i),i=ud(),null!==(n=fd(n,1)))Bt(n,1,i),yd(n,i);else if("function"==typeof o.componentDidCatch&&(null===Zr||!Zr.has(o)))try{o.componentDidCatch(t,e)}catch(a){}break}}n=n.return}}function Gd(e,t,n){var o=e.pingCache;null!==o&&o.delete(t),t=ud(),e.pingedLanes|=e.suspendedLanes&n,Nr===e&&(Dr&n)===n&&(4===qr||3===qr&&(62914560&Dr)===Dr&&500>zi()-Hr?Td(e,0):zr|=n),yd(e,t)}function Bd(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Vi()?1:2:(0===dd&&(dd=Mr),0===(t=Mt(62914560&~dd))&&(t=4194304))),n=ud(),null!==(e=fd(e,t))&&(Bt(e,t,n),yd(e,n))}function zd(e,t,n,o){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=o,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Vd(e,t,n,o){return new zd(e,t,n,o)}function Hd(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Jd(e,t){var n=e.alternate;return null===n?((n=Vd(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Qd(e,t,n,o,i,a){var r=2;if(o=e,"function"==typeof e)Hd(e)&&(r=1);else if("string"==typeof e)r=5;else e:switch(e){case T:return Kd(n.children,i,a,t);case C:r=8,i|=16;break;case E:r=8,i|=1;break;case P:return(e=Vd(12,n,t,8|i)).elementType=P,e.type=P,e.lanes=a,e;case I:return(e=Vd(13,n,t,i)).type=I,e.elementType=I,e.lanes=a,e;case O:return(e=Vd(19,n,t,i)).elementType=O,e.lanes=a,e;case F:return Yd(n,i,a,t);case q:return(e=Vd(24,n,t,i)).elementType=q,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case x:r=10;break e;case R:r=9;break e;case A:r=11;break e;case U:r=14;break e;case N:r=16,o=null;break e;case L:r=22;break e}throw Error(s(130,null==e?e:typeof e,""))}return(t=Vd(r,n,t,i)).elementType=e,t.type=o,t.lanes=a,t}function Kd(e,t,n,o){return(e=Vd(7,e,o,t)).lanes=n,e}function Yd(e,t,n,o){return(e=Vd(23,e,o,t)).elementType=F,e.lanes=n,e}function Wd(e,t,n){return(e=Vd(6,e,null,t)).lanes=n,e}function $d(e,t,n){return(t=Vd(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zd(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Gt(0),this.expirationTimes=Gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Gt(0),this.mutableSourceEagerHydrationData=null}function Xd(e,t,n,o){var i=t.current,a=ud(),r=md(i);e:if(n){t:{if(Ye(n=n._reactInternals)!==n||1!==n.tag)throw Error(s(170));var d=n;do{switch(d.tag){case 3:d=d.stateNode.context;break t;case 1:if(bi(d.type)){d=d.stateNode.__reactInternalMemoizedMergedChildContext;break t}}d=d.return}while(null!==d);throw Error(s(171))}if(1===n.tag){var p=n.type;if(bi(p)){n=_i(n,p,d);break e}}n=d}else n=ui;return null===t.context?t.context=n:t.pendingContext=n,(t=la(a,r)).payload={element:e},null!==(o=void 0===o?null:o)&&(t.callback=o),ca(i,t),hd(i,r,a),r}function ep(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function tp(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function np(e,t){tp(e,t),(e=e.alternate)&&tp(e,t)}function op(e,t,n){var o=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Zd(e,t,null!=n&&!0===n.hydrate),t=Vd(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,da(t),e[ei]=n.current,Uo(8===e.nodeType?e.parentNode:e),o)for(e=0;e<o.length;e++){var i=(t=o[e])._getVersion;i=i(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,i]:n.mutableSourceEagerHydrationData.push(t,i)}this._internalRoot=n}function ip(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ap(e,t,n,o,i){var a=n._reactRootContainer;if(a){var s=a._internalRoot;if("function"==typeof i){var r=i;i=function(){var e=ep(s);r.call(e)}}Xd(t,s,e,i)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new op(e,0,t?{hydrate:!0}:void 0)}(n,o),s=a._internalRoot,"function"==typeof i){var d=i;i=function(){var e=ep(s);d.call(e)}}kd((function(){Xd(t,s,e,i)}))}return ep(s)}function sp(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ip(t))throw Error(s(200));return function(e,t,n){var o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==o?null:""+o,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Kr=function(e,t,n){var o=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||hi.current)Cs=!0;else{if(0==(n&o)){switch(Cs=!1,t.tag){case 3:Js(t),Qa();break;case 5:Da(t);break;case 1:bi(t.type)&&ki(t);break;case 4:Na(t,t.stateNode.containerInfo);break;case 10:o=t.memoizedProps.value;var i=t.type._context;ci(Zi,i._currentValue),i._currentValue=o;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Zs(e,t,n):(ci(Fa,1&Fa.current),null!==(t=ar(e,t,n))?t.sibling:null);ci(Fa,1&Fa.current);break;case 19:if(o=0!=(n&t.childLanes),0!=(64&e.flags)){if(o)return ir(e,t,n);t.flags|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),ci(Fa,Fa.current),o)break;return null;case 23:case 24:return t.lanes=0,Gs(e,t,n)}return ar(e,t,n)}Cs=0!=(16384&e.flags)}else Cs=!1;switch(t.lanes=0,t.tag){case 2:if(o=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=yi(t,mi.current),aa(t,n),i=ss(null,t,o,e,i,n),t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,bi(o)){var a=!0;ki(t)}else a=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,da(t);var r=o.getDerivedStateFromProps;"function"==typeof r&&ya(t,o,r,e),i.updater=ba,t.stateNode=i,i._reactInternals=t,ka(t,o,e,n),t=Hs(null,t,o,!0,a,n)}else t.tag=0,Fs(null,t,i,n),t=t.child;return t;case 16:i=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=(a=i._init)(i._payload),t.type=i,a=t.tag=function(e){if("function"==typeof e)return Hd(e)?1:0;if(null!=e){if((e=e.$$typeof)===A)return 11;if(e===U)return 14}return 2}(i),e=$i(i,e),a){case 0:t=zs(null,t,i,e,n);break e;case 1:t=Vs(null,t,i,e,n);break e;case 11:t=qs(null,t,i,e,n);break e;case 14:t=js(null,t,i,$i(i.type,e),o,n);break e}throw Error(s(306,i,""))}return t;case 0:return o=t.type,i=t.pendingProps,zs(e,t,o,i=t.elementType===o?i:$i(o,i),n);case 1:return o=t.type,i=t.pendingProps,Vs(e,t,o,i=t.elementType===o?i:$i(o,i),n);case 3:if(Js(t),o=t.updateQueue,null===e||null===o)throw Error(s(282));if(o=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,pa(e,t),ma(t,o,null,n),(o=t.memoizedState.element)===i)Qa(),t=ar(e,t,n);else{if((a=(i=t.stateNode).hydrate)&&(Ma=Ko(t.stateNode.containerInfo.firstChild),ja=t,a=Ga=!0),a){if(null!=(e=i.mutableSourceEagerHydrationData))for(i=0;i<e.length;i+=2)(a=e[i])._workInProgressVersionPrimary=e[i+1],Ka.push(a);for(n=xa(t,null,o,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Fs(e,t,o,n),Qa();t=t.child}return t;case 5:return Da(t),null===e&&Va(t),o=t.type,i=t.pendingProps,a=null!==e?e.memoizedProps:null,r=i.children,Vo(o,i)?r=null:null!==a&&Vo(o,a)&&(t.flags|=16),Bs(e,t),Fs(e,t,r,n),t.child;case 6:return null===e&&Va(t),null;case 13:return Zs(e,t,n);case 4:return Na(t,t.stateNode.containerInfo),o=t.pendingProps,null===e?t.child=Pa(t,null,o,n):Fs(e,t,o,n),t.child;case 11:return o=t.type,i=t.pendingProps,qs(e,t,o,i=t.elementType===o?i:$i(o,i),n);case 7:return Fs(e,t,t.pendingProps,n),t.child;case 8:case 12:return Fs(e,t,t.pendingProps.children,n),t.child;case 10:e:{o=t.type._context,i=t.pendingProps,r=t.memoizedProps,a=i.value;var d=t.type._context;if(ci(Zi,d._currentValue),d._currentValue=a,null!==r)if(d=r.value,0===(a=lo(d,a)?0:0|("function"==typeof o._calculateChangedBits?o._calculateChangedBits(d,a):1073741823))){if(r.children===i.children&&!hi.current){t=ar(e,t,n);break e}}else for(null!==(d=t.child)&&(d.return=t);null!==d;){var p=d.dependencies;if(null!==p){r=d.child;for(var l=p.firstContext;null!==l;){if(l.context===o&&0!=(l.observedBits&a)){1===d.tag&&((l=la(-1,n&-n)).tag=2,ca(d,l)),d.lanes|=n,null!==(l=d.alternate)&&(l.lanes|=n),ia(d.return,n),p.lanes|=n;break}l=l.next}}else r=10===d.tag&&d.type===t.type?null:d.child;if(null!==r)r.return=d;else for(r=d;null!==r;){if(r===t){r=null;break}if(null!==(d=r.sibling)){d.return=r.return,r=d;break}r=r.return}d=r}Fs(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,o=(a=t.pendingProps).children,aa(t,n),o=o(i=sa(i,a.unstable_observedBits)),t.flags|=1,Fs(e,t,o,n),t.child;case 14:return a=$i(i=t.type,t.pendingProps),js(e,t,i,a=$i(i.type,a),o,n);case 15:return Ms(e,t,t.type,t.pendingProps,o,n);case 17:return o=t.type,i=t.pendingProps,i=t.elementType===o?i:$i(o,i),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,bi(o)?(e=!0,ki(t)):e=!1,aa(t,n),va(t,o,i),ka(t,o,i,n),Hs(null,t,o,!0,e,n);case 19:return ir(e,t,n);case 23:case 24:return Gs(e,t,n)}throw Error(s(156,t.tag))},op.prototype.render=function(e){Xd(e,this._internalRoot,null,null)},op.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Xd(null,e,null,(function(){t[ei]=null}))},et=function(e){13===e.tag&&(hd(e,4,ud()),np(e,4))},tt=function(e){13===e.tag&&(hd(e,67108864,ud()),np(e,67108864))},nt=function(e){if(13===e.tag){var t=ud(),n=md(e);hd(e,n,t),np(e,n)}},ot=function(e,t){return t()},Pe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var o=n[t];if(o!==e&&o.form===e.form){var i=ai(o);if(!i)throw Error(s(90));$(o),ne(o,i)}}}break;case"textarea":pe(e,n);break;case"select":null!=(t=n.value)&&se(e,!!n.multiple,t,!1)}},Ue=_d,Ne=function(e,t,n,o,i){var a=Ur;Ur|=4;try{return Ji(98,e.bind(null,t,n,o,i))}finally{0===(Ur=a)&&(Qr(),Ki())}},Le=function(){0==(49&Ur)&&(function(){if(null!==id){var e=id;id=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,yd(e,zi())}))}Ki()}(),Dd())},De=function(e,t){var n=Ur;Ur|=2;try{return e(t)}finally{0===(Ur=n)&&(Qr(),Ki())}};var rp={Events:[oi,ii,ai,Ie,Oe,Dd,{current:!1}]},dp={findFiberByHostInstance:ni,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},pp={bundleType:dp.bundleType,version:dp.version,rendererPackageName:dp.rendererPackageName,rendererConfig:dp.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:dp.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var lp=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!lp.isDisabled&&lp.supportsFiber)try{Si=lp.inject(pp),Ti=lp}catch(fe){}}t.createPortal=sp,t.hydrate=function(e,t,n){if(!ip(t))throw Error(s(200));return ap(null,e,t,!0,n)},t.unstable_batchedUpdates=_d},73935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(t){console.error(t)}}(),e.exports=n(64448)},69590:e=>{var t="undefined"!=typeof Element,n="function"==typeof Map,o="function"==typeof Set,i="function"==typeof ArrayBuffer&&!!ArrayBuffer.isView;function a(e,s){if(e===s)return!0;if(e&&s&&"object"==typeof e&&"object"==typeof s){if(e.constructor!==s.constructor)return!1;var r,d,p,l;if(Array.isArray(e)){if((r=e.length)!=s.length)return!1;for(d=r;0!=d--;)if(!a(e[d],s[d]))return!1;return!0}if(n&&e instanceof Map&&s instanceof Map){if(e.size!==s.size)return!1;for(l=e.entries();!(d=l.next()).done;)if(!s.has(d.value[0]))return!1;for(l=e.entries();!(d=l.next()).done;)if(!a(d.value[1],s.get(d.value[0])))return!1;return!0}if(o&&e instanceof Set&&s instanceof Set){if(e.size!==s.size)return!1;for(l=e.entries();!(d=l.next()).done;)if(!s.has(d.value[0]))return!1;return!0}if(i&&ArrayBuffer.isView(e)&&ArrayBuffer.isView(s)){if((r=e.length)!=s.length)return!1;for(d=r;0!=d--;)if(e[d]!==s[d])return!1;return!0}if(e.constructor===RegExp)return e.source===s.source&&e.flags===s.flags;if(e.valueOf!==Object.prototype.valueOf&&"function"==typeof e.valueOf&&"function"==typeof s.valueOf)return e.valueOf()===s.valueOf();if(e.toString!==Object.prototype.toString&&"function"==typeof e.toString&&"function"==typeof s.toString)return e.toString()===s.toString();if((r=(p=Object.keys(e)).length)!==Object.keys(s).length)return!1;for(d=r;0!=d--;)if(!Object.prototype.hasOwnProperty.call(s,p[d]))return!1;if(t&&e instanceof Element)return!1;for(d=r;0!=d--;)if(("_owner"!==p[d]&&"__v"!==p[d]&&"__o"!==p[d]||!e.$$typeof)&&!a(e[p[d]],s[p[d]]))return!1;return!0}return e!=e&&s!=s}e.exports=function(e,t){try{return a(e,t)}catch(n){if((n.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw n}}},70405:(e,t,n)=>{"use strict";n.d(t,{B6:()=>H,ql:()=>X});var o=n(67294),i=n(45697),a=n.n(i),s=n(69590),r=n.n(s),d=n(41143),p=n.n(d),l=n(96774),c=n.n(l);function u(){return u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},u.apply(this,arguments)}function m(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,h(e,t)}function h(e,t){return h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},h(e,t)}function f(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t.indexOf(n=a[o])>=0||(i[n]=e[n]);return i}var y={BASE:"base",BODY:"body",HEAD:"head",HTML:"html",LINK:"link",META:"meta",NOSCRIPT:"noscript",SCRIPT:"script",STYLE:"style",TITLE:"title",FRAGMENT:"Symbol(react.fragment)"},b={rel:["amphtml","canonical","alternate"]},g={type:["application/ld+json"]},v={charset:"",name:["robots","description"],property:["og:type","og:title","og:url","og:image","og:image:alt","og:description","twitter:url","twitter:title","twitter:description","twitter:image","twitter:image:alt","twitter:card","twitter:site"]},_=Object.keys(y).map((function(e){return y[e]})),k={accesskey:"accessKey",charset:"charSet",class:"className",contenteditable:"contentEditable",contextmenu:"contextMenu","http-equiv":"httpEquiv",itemprop:"itemProp",tabindex:"tabIndex"},w=Object.keys(k).reduce((function(e,t){return e[k[t]]=t,e}),{}),S=function(e,t){for(var n=e.length-1;n>=0;n-=1){var o=e[n];if(Object.prototype.hasOwnProperty.call(o,t))return o[t]}return null},T=function(e){var t=S(e,y.TITLE),n=S(e,"titleTemplate");if(Array.isArray(t)&&(t=t.join("")),n&&t)return n.replace(/%s/g,(function(){return t}));var o=S(e,"defaultTitle");return t||o||void 0},E=function(e){return S(e,"onChangeClientState")||function(){}},P=function(e,t){return t.filter((function(t){return void 0!==t[e]})).map((function(t){return t[e]})).reduce((function(e,t){return u({},e,t)}),{})},x=function(e,t){return t.filter((function(e){return void 0!==e[y.BASE]})).map((function(e){return e[y.BASE]})).reverse().reduce((function(t,n){if(!t.length)for(var o=Object.keys(n),i=0;i<o.length;i+=1){var a=o[i].toLowerCase();if(-1!==e.indexOf(a)&&n[a])return t.concat(n)}return t}),[])},R=function(e,t,n){var o={};return n.filter((function(t){return!!Array.isArray(t[e])||(void 0!==t[e]&&console&&"function"==typeof console.warn&&console.warn("Helmet: "+e+' should be of type "Array". Instead found type "'+typeof t[e]+'"'),!1)})).map((function(t){return t[e]})).reverse().reduce((function(e,n){var i={};n.filter((function(e){for(var n,a=Object.keys(e),s=0;s<a.length;s+=1){var r=a[s],d=r.toLowerCase();-1===t.indexOf(d)||"rel"===n&&"canonical"===e[n].toLowerCase()||"rel"===d&&"stylesheet"===e[d].toLowerCase()||(n=d),-1===t.indexOf(r)||"innerHTML"!==r&&"cssText"!==r&&"itemprop"!==r||(n=r)}if(!n||!e[n])return!1;var p=e[n].toLowerCase();return o[n]||(o[n]={}),i[n]||(i[n]={}),!o[n][p]&&(i[n][p]=!0,!0)})).reverse().forEach((function(t){return e.push(t)}));for(var a=Object.keys(i),s=0;s<a.length;s+=1){var r=a[s],d=u({},o[r],i[r]);o[r]=d}return e}),[]).reverse()},A=function(e,t){if(Array.isArray(e)&&e.length)for(var n=0;n<e.length;n+=1)if(e[n][t])return!0;return!1},I=function(e){return Array.isArray(e)?e.join(""):e},O=function(e,t){return Array.isArray(e)?e.reduce((function(e,n){return function(e,t){for(var n=Object.keys(e),o=0;o<n.length;o+=1)if(t[n[o]]&&t[n[o]].includes(e[n[o]]))return!0;return!1}(n,t)?e.priority.push(n):e.default.push(n),e}),{priority:[],default:[]}):{default:e}},U=function(e,t){var n;return u({},e,((n={})[t]=void 0,n))},N=[y.NOSCRIPT,y.SCRIPT,y.STYLE],L=function(e,t){return void 0===t&&(t=!0),!1===t?String(e):String(e).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")},D=function(e){return Object.keys(e).reduce((function(t,n){var o=void 0!==e[n]?n+'="'+e[n]+'"':""+n;return t?t+" "+o:o}),"")},C=function(e,t){return void 0===t&&(t={}),Object.keys(e).reduce((function(t,n){return t[k[n]||n]=e[n],t}),t)},F=function(e,t){return t.map((function(t,n){var i,a=((i={key:n})["data-rh"]=!0,i);return Object.keys(t).forEach((function(e){var n=k[e]||e;"innerHTML"===n||"cssText"===n?a.dangerouslySetInnerHTML={__html:t.innerHTML||t.cssText}:a[n]=t[e]})),o.createElement(e,a)}))},q=function(e,t,n){switch(e){case y.TITLE:return{toComponent:function(){return n=t.titleAttributes,(i={key:e=t.title})["data-rh"]=!0,a=C(n,i),[o.createElement(y.TITLE,a,e)];var e,n,i,a},toString:function(){return function(e,t,n,o){var i=D(n),a=I(t);return i?"<"+e+' data-rh="true" '+i+">"+L(a,o)+"</"+e+">":"<"+e+' data-rh="true">'+L(a,o)+"</"+e+">"}(e,t.title,t.titleAttributes,n)}};case"bodyAttributes":case"htmlAttributes":return{toComponent:function(){return C(t)},toString:function(){return D(t)}};default:return{toComponent:function(){return F(e,t)},toString:function(){return function(e,t,n){return t.reduce((function(t,o){var i=Object.keys(o).filter((function(e){return!("innerHTML"===e||"cssText"===e)})).reduce((function(e,t){var i=void 0===o[t]?t:t+'="'+L(o[t],n)+'"';return e?e+" "+i:i}),""),a=o.innerHTML||o.cssText||"",s=-1===N.indexOf(e);return t+"<"+e+' data-rh="true" '+i+(s?"/>":">"+a+"</"+e+">")}),"")}(e,t,n)}}}},j=function(e){var t=e.baseTag,n=e.bodyAttributes,o=e.encode,i=e.htmlAttributes,a=e.noscriptTags,s=e.styleTags,r=e.title,d=void 0===r?"":r,p=e.titleAttributes,l=e.linkTags,c=e.metaTags,u=e.scriptTags,m={toComponent:function(){},toString:function(){return""}};if(e.prioritizeSeoTags){var h=function(e){var t=e.linkTags,n=e.scriptTags,o=e.encode,i=O(e.metaTags,v),a=O(t,b),s=O(n,g);return{priorityMethods:{toComponent:function(){return[].concat(F(y.META,i.priority),F(y.LINK,a.priority),F(y.SCRIPT,s.priority))},toString:function(){return q(y.META,i.priority,o)+" "+q(y.LINK,a.priority,o)+" "+q(y.SCRIPT,s.priority,o)}},metaTags:i.default,linkTags:a.default,scriptTags:s.default}}(e);m=h.priorityMethods,l=h.linkTags,c=h.metaTags,u=h.scriptTags}return{priority:m,base:q(y.BASE,t,o),bodyAttributes:q("bodyAttributes",n,o),htmlAttributes:q("htmlAttributes",i,o),link:q(y.LINK,l,o),meta:q(y.META,c,o),noscript:q(y.NOSCRIPT,a,o),script:q(y.SCRIPT,u,o),style:q(y.STYLE,s,o),title:q(y.TITLE,{title:d,titleAttributes:p},o)}},M=[],G=function(e,t){var n=this;void 0===t&&(t="undefined"!=typeof document),this.instances=[],this.value={setHelmet:function(e){n.context.helmet=e},helmetInstances:{get:function(){return n.canUseDOM?M:n.instances},add:function(e){(n.canUseDOM?M:n.instances).push(e)},remove:function(e){var t=(n.canUseDOM?M:n.instances).indexOf(e);(n.canUseDOM?M:n.instances).splice(t,1)}}},this.context=e,this.canUseDOM=t,t||(e.helmet=j({baseTag:[],bodyAttributes:{},encodeSpecialCharacters:!0,htmlAttributes:{},linkTags:[],metaTags:[],noscriptTags:[],scriptTags:[],styleTags:[],title:"",titleAttributes:{}}))},B=o.createContext({}),z=a().shape({setHelmet:a().func,helmetInstances:a().shape({get:a().func,add:a().func,remove:a().func})}),V="undefined"!=typeof document,H=function(e){function t(n){var o;return(o=e.call(this,n)||this).helmetData=new G(o.props.context,t.canUseDOM),o}return m(t,e),t.prototype.render=function(){return o.createElement(B.Provider,{value:this.helmetData.value},this.props.children)},t}(o.Component);H.canUseDOM=V,H.propTypes={context:a().shape({helmet:a().shape()}),children:a().node.isRequired},H.defaultProps={context:{}},H.displayName="HelmetProvider";var J=function(e,t){var n,o=document.head||document.querySelector(y.HEAD),i=o.querySelectorAll(e+"[data-rh]"),a=[].slice.call(i),s=[];return t&&t.length&&t.forEach((function(t){var o=document.createElement(e);for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&("innerHTML"===i?o.innerHTML=t.innerHTML:"cssText"===i?o.styleSheet?o.styleSheet.cssText=t.cssText:o.appendChild(document.createTextNode(t.cssText)):o.setAttribute(i,void 0===t[i]?"":t[i]));o.setAttribute("data-rh","true"),a.some((function(e,t){return n=t,o.isEqualNode(e)}))?a.splice(n,1):s.push(o)})),a.forEach((function(e){return e.parentNode.removeChild(e)})),s.forEach((function(e){return o.appendChild(e)})),{oldTags:a,newTags:s}},Q=function(e,t){var n=document.getElementsByTagName(e)[0];if(n){for(var o=n.getAttribute("data-rh"),i=o?o.split(","):[],a=[].concat(i),s=Object.keys(t),r=0;r<s.length;r+=1){var d=s[r],p=t[d]||"";n.getAttribute(d)!==p&&n.setAttribute(d,p),-1===i.indexOf(d)&&i.push(d);var l=a.indexOf(d);-1!==l&&a.splice(l,1)}for(var c=a.length-1;c>=0;c-=1)n.removeAttribute(a[c]);i.length===a.length?n.removeAttribute("data-rh"):n.getAttribute("data-rh")!==s.join(",")&&n.setAttribute("data-rh",s.join(","))}},K=function(e,t){var n=e.baseTag,o=e.htmlAttributes,i=e.linkTags,a=e.metaTags,s=e.noscriptTags,r=e.onChangeClientState,d=e.scriptTags,p=e.styleTags,l=e.title,c=e.titleAttributes;Q(y.BODY,e.bodyAttributes),Q(y.HTML,o),function(e,t){void 0!==e&&document.title!==e&&(document.title=I(e)),Q(y.TITLE,t)}(l,c);var u={baseTag:J(y.BASE,n),linkTags:J(y.LINK,i),metaTags:J(y.META,a),noscriptTags:J(y.NOSCRIPT,s),scriptTags:J(y.SCRIPT,d),styleTags:J(y.STYLE,p)},m={},h={};Object.keys(u).forEach((function(e){var t=u[e],n=t.newTags,o=t.oldTags;n.length&&(m[e]=n),o.length&&(h[e]=u[e].oldTags)})),t&&t(),r(e,m,h)},Y=null,W=function(e){function t(){for(var t,n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return(t=e.call.apply(e,[this].concat(o))||this).rendered=!1,t}m(t,e);var n=t.prototype;return n.shouldComponentUpdate=function(e){return!c()(e,this.props)},n.componentDidUpdate=function(){this.emitChange()},n.componentWillUnmount=function(){this.props.context.helmetInstances.remove(this),this.emitChange()},n.emitChange=function(){var e,t,n=this.props.context,o=n.setHelmet,i=null,a=(e=n.helmetInstances.get().map((function(e){var t=u({},e.props);return delete t.context,t})),{baseTag:x(["href"],e),bodyAttributes:P("bodyAttributes",e),defer:S(e,"defer"),encode:S(e,"encodeSpecialCharacters"),htmlAttributes:P("htmlAttributes",e),linkTags:R(y.LINK,["rel","href"],e),metaTags:R(y.META,["name","charset","http-equiv","property","itemprop"],e),noscriptTags:R(y.NOSCRIPT,["innerHTML"],e),onChangeClientState:E(e),scriptTags:R(y.SCRIPT,["src","innerHTML"],e),styleTags:R(y.STYLE,["cssText"],e),title:T(e),titleAttributes:P("titleAttributes",e),prioritizeSeoTags:A(e,"prioritizeSeoTags")});H.canUseDOM?(t=a,Y&&cancelAnimationFrame(Y),t.defer?Y=requestAnimationFrame((function(){K(t,(function(){Y=null}))})):(K(t),Y=null)):j&&(i=j(a)),o(i)},n.init=function(){this.rendered||(this.rendered=!0,this.props.context.helmetInstances.add(this),this.emitChange())},n.render=function(){return this.init(),null},t}(o.Component);W.propTypes={context:z.isRequired},W.displayName="HelmetDispatcher";var $=["children"],Z=["children"],X=function(e){function t(){return e.apply(this,arguments)||this}m(t,e);var n=t.prototype;return n.shouldComponentUpdate=function(e){return!r()(U(this.props,"helmetData"),U(e,"helmetData"))},n.mapNestedChildrenToProps=function(e,t){if(!t)return null;switch(e.type){case y.SCRIPT:case y.NOSCRIPT:return{innerHTML:t};case y.STYLE:return{cssText:t};default:throw new Error("<"+e.type+" /> elements are self-closing and can not contain children. Refer to our API for more information.")}},n.flattenArrayTypeChildren=function(e){var t,n=e.child,o=e.arrayTypeChildren;return u({},o,((t={})[n.type]=[].concat(o[n.type]||[],[u({},e.newChildProps,this.mapNestedChildrenToProps(n,e.nestedChildren))]),t))},n.mapObjectTypeChildren=function(e){var t,n,o=e.child,i=e.newProps,a=e.newChildProps,s=e.nestedChildren;switch(o.type){case y.TITLE:return u({},i,((t={})[o.type]=s,t.titleAttributes=u({},a),t));case y.BODY:return u({},i,{bodyAttributes:u({},a)});case y.HTML:return u({},i,{htmlAttributes:u({},a)});default:return u({},i,((n={})[o.type]=u({},a),n))}},n.mapArrayTypeChildrenToProps=function(e,t){var n=u({},t);return Object.keys(e).forEach((function(t){var o;n=u({},n,((o={})[t]=e[t],o))})),n},n.warnOnInvalidChildren=function(e,t){return p()(_.some((function(t){return e.type===t})),"function"==typeof e.type?"You may be attempting to nest <Helmet> components within each other, which is not allowed. Refer to our API for more information.":"Only elements types "+_.join(", ")+" are allowed. Helmet does not support rendering <"+e.type+"> elements. Refer to our API for more information."),p()(!t||"string"==typeof t||Array.isArray(t)&&!t.some((function(e){return"string"!=typeof e})),"Helmet expects a string as a child of <"+e.type+">. Did you forget to wrap your children in braces? ( <"+e.type+">{``}</"+e.type+"> ) Refer to our API for more information."),!0},n.mapChildrenToProps=function(e,t){var n=this,i={};return o.Children.forEach(e,(function(e){if(e&&e.props){var o=e.props,a=o.children,s=f(o,$),r=Object.keys(s).reduce((function(e,t){return e[w[t]||t]=s[t],e}),{}),d=e.type;switch("symbol"==typeof d?d=d.toString():n.warnOnInvalidChildren(e,a),d){case y.FRAGMENT:t=n.mapChildrenToProps(a,t);break;case y.LINK:case y.META:case y.NOSCRIPT:case y.SCRIPT:case y.STYLE:i=n.flattenArrayTypeChildren({child:e,arrayTypeChildren:i,newChildProps:r,nestedChildren:a});break;default:t=n.mapObjectTypeChildren({child:e,newProps:t,newChildProps:r,nestedChildren:a})}}})),this.mapArrayTypeChildrenToProps(i,t)},n.render=function(){var e=this.props,t=e.children,n=f(e,Z),i=u({},n),a=n.helmetData;return t&&(i=this.mapChildrenToProps(t,i)),!a||a instanceof G||(a=new G(a.context,a.instances)),a?o.createElement(W,u({},i,{context:a.value,helmetData:void 0})):o.createElement(B.Consumer,null,(function(e){return o.createElement(W,u({},i,{context:e}))}))},t}(o.Component);X.propTypes={base:a().object,bodyAttributes:a().object,children:a().oneOfType([a().arrayOf(a().node),a().node]),defaultTitle:a().string,defer:a().bool,encodeSpecialCharacters:a().bool,htmlAttributes:a().object,link:a().arrayOf(a().object),meta:a().arrayOf(a().object),noscript:a().arrayOf(a().object),onChangeClientState:a().func,script:a().arrayOf(a().object),style:a().arrayOf(a().object),title:a().string,titleAttributes:a().object,titleTemplate:a().string,prioritizeSeoTags:a().bool,helmetData:a().object},X.defaultProps={defer:!0,encodeSpecialCharacters:!0,prioritizeSeoTags:!1},X.displayName="Helmet"},69921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,o=n?Symbol.for("react.element"):60103,i=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,s=n?Symbol.for("react.strict_mode"):60108,r=n?Symbol.for("react.profiler"):60114,d=n?Symbol.for("react.provider"):60109,p=n?Symbol.for("react.context"):60110,l=n?Symbol.for("react.async_mode"):60111,c=n?Symbol.for("react.concurrent_mode"):60111,u=n?Symbol.for("react.forward_ref"):60112,m=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,f=n?Symbol.for("react.memo"):60115,y=n?Symbol.for("react.lazy"):60116,b=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,v=n?Symbol.for("react.responder"):60118,_=n?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case l:case c:case a:case r:case s:case m:return e;default:switch(e=e&&e.$$typeof){case p:case u:case y:case f:case d:return e;default:return t}}case i:return t}}}function w(e){return k(e)===c}t.AsyncMode=l,t.ConcurrentMode=c,t.ContextConsumer=p,t.ContextProvider=d,t.Element=o,t.ForwardRef=u,t.Fragment=a,t.Lazy=y,t.Memo=f,t.Portal=i,t.Profiler=r,t.StrictMode=s,t.Suspense=m,t.isAsyncMode=function(e){return w(e)||k(e)===l},t.isConcurrentMode=w,t.isContextConsumer=function(e){return k(e)===p},t.isContextProvider=function(e){return k(e)===d},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return k(e)===u},t.isFragment=function(e){return k(e)===a},t.isLazy=function(e){return k(e)===y},t.isMemo=function(e){return k(e)===f},t.isPortal=function(e){return k(e)===i},t.isProfiler=function(e){return k(e)===r},t.isStrictMode=function(e){return k(e)===s},t.isSuspense=function(e){return k(e)===m},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===c||e===r||e===s||e===m||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===f||e.$$typeof===d||e.$$typeof===p||e.$$typeof===u||e.$$typeof===g||e.$$typeof===v||e.$$typeof===_||e.$$typeof===b)},t.typeOf=k},59864:(e,t,n)=>{"use strict";e.exports=n(69921)},68356:(e,t,n)=>{"use strict";function o(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function i(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},s.apply(this,arguments)}var r=n(67294),d=n(45697),p=[],l=[];function c(e){var t=e(),n={loading:!0,loaded:null,error:null};return n.promise=t.then((function(e){return n.loading=!1,n.loaded=e,e})).catch((function(e){throw n.loading=!1,n.error=e,e})),n}function u(e){var t={loading:!1,loaded:{},error:null},n=[];try{Object.keys(e).forEach((function(o){var i=c(e[o]);i.loading?t.loading=!0:(t.loaded[o]=i.loaded,t.error=i.error),n.push(i.promise),i.promise.then((function(e){t.loaded[o]=e})).catch((function(e){t.error=e}))}))}catch(o){t.error=o}return t.promise=Promise.all(n).then((function(e){return t.loading=!1,e})).catch((function(e){throw t.loading=!1,e})),t}function m(e,t){return r.createElement((n=e)&&n.__esModule?n.default:n,t);var n}function h(e,t){var c,u;if(!t.loading)throw new Error("react-loadable requires a `loading` component");var h=s({loader:null,loading:null,delay:200,timeout:null,render:m,webpack:null,modules:null},t),f=null;function y(){return f||(f=e(h.loader)),f.promise}return p.push(y),"function"==typeof h.webpack&&l.push((function(){if((0,h.webpack)().every((function(e){return void 0!==e&&void 0!==n.m[e]})))return y()})),u=c=function(t){function n(n){var o;return a(i(i(o=t.call(this,n)||this)),"retry",(function(){o.setState({error:null,loading:!0,timedOut:!1}),f=e(h.loader),o._loadModule()})),y(),o.state={error:f.error,pastDelay:!1,timedOut:!1,loading:f.loading,loaded:f.loaded},o}o(n,t),n.preload=function(){return y()};var s=n.prototype;return s.UNSAFE_componentWillMount=function(){this._loadModule()},s.componentDidMount=function(){this._mounted=!0},s._loadModule=function(){var e=this;if(this.context.loadable&&Array.isArray(h.modules)&&h.modules.forEach((function(t){e.context.loadable.report(t)})),f.loading){var t=function(t){e._mounted&&e.setState(t)};"number"==typeof h.delay&&(0===h.delay?this.setState({pastDelay:!0}):this._delay=setTimeout((function(){t({pastDelay:!0})}),h.delay)),"number"==typeof h.timeout&&(this._timeout=setTimeout((function(){t({timedOut:!0})}),h.timeout));var n=function(){t({error:f.error,loaded:f.loaded,loading:f.loading}),e._clearTimeouts()};f.promise.then((function(){return n(),null})).catch((function(e){return n(),null}))}},s.componentWillUnmount=function(){this._mounted=!1,this._clearTimeouts()},s._clearTimeouts=function(){clearTimeout(this._delay),clearTimeout(this._timeout)},s.render=function(){return this.state.loading||this.state.error?r.createElement(h.loading,{isLoading:this.state.loading,pastDelay:this.state.pastDelay,timedOut:this.state.timedOut,error:this.state.error,retry:this.retry}):this.state.loaded?h.render(this.state.loaded,this.props):null},n}(r.Component),a(c,"contextTypes",{loadable:d.shape({report:d.func.isRequired})}),u}function f(e){return h(c,e)}f.Map=function(e){if("function"!=typeof e.render)throw new Error("LoadableMap requires a `render(loaded, props)` function");return h(u,e)};var y=function(e){function t(){return e.apply(this,arguments)||this}o(t,e);var n=t.prototype;return n.getChildContext=function(){return{loadable:{report:this.props.report}}},n.render=function(){return r.Children.only(this.props.children)},t}(r.Component);function b(e){for(var t=[];e.length;){var n=e.pop();t.push(n())}return Promise.all(t).then((function(){if(e.length)return b(e)}))}a(y,"propTypes",{report:d.func.isRequired}),a(y,"childContextTypes",{loadable:d.shape({report:d.func.isRequired}).isRequired}),f.Capture=y,f.preloadAll=function(){return new Promise((function(e,t){b(p).then(e,t)}))},f.preloadReady=function(){return new Promise((function(e,t){b(l).then(e,e)}))},e.exports=f},18790:(e,t,n)=>{"use strict";n.d(t,{H:()=>r,f:()=>s});var o=n(16550),i=n(87462),a=n(67294);function s(e,t,n){return void 0===n&&(n=[]),e.some((function(e){var i=e.path?(0,o.LX)(t,e):n.length?n[n.length-1].match:o.F0.computeRootMatch(t);return i&&(n.push({route:e,match:i}),e.routes&&s(e.routes,t,n)),i})),n}function r(e,t,n){return void 0===t&&(t={}),void 0===n&&(n={}),e?a.createElement(o.rs,n,e.map((function(e,n){return a.createElement(o.AW,{key:e.key||n,path:e.path,exact:e.exact,strict:e.strict,render:function(n){return e.render?e.render((0,i.Z)({},n,{},t,{route:e})):a.createElement(e.component,(0,i.Z)({},n,t,{route:e}))}})}))):null}},73727:(e,t,n)=>{"use strict";n.d(t,{OL:()=>v,VK:()=>l,rU:()=>y});var o=n(16550),i=n(75068),a=n(67294),s=n(99318),r=n(87462),d=n(63366),p=n(38776),l=function(e){function t(){for(var t,n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return(t=e.call.apply(e,[this].concat(o))||this).history=(0,s.lX)(t.props),t}return(0,i.Z)(t,e),t.prototype.render=function(){return a.createElement(o.F0,{history:this.history,children:this.props.children})},t}(a.Component);a.Component;var c=function(e,t){return"function"==typeof e?e(t):e},u=function(e,t){return"string"==typeof e?(0,s.ob)(e,null,null,t):e},m=function(e){return e},h=a.forwardRef;void 0===h&&(h=m);var f=h((function(e,t){var n=e.innerRef,o=e.navigate,i=e.onClick,s=(0,d.Z)(e,["innerRef","navigate","onClick"]),p=s.target,l=(0,r.Z)({},s,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||p&&"_self"!==p||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),o())}});return l.ref=m!==h&&t||n,a.createElement("a",l)}));var y=h((function(e,t){var n=e.component,i=void 0===n?f:n,l=e.replace,y=e.to,b=e.innerRef,g=(0,d.Z)(e,["component","replace","to","innerRef"]);return a.createElement(o.s6.Consumer,null,(function(e){e||(0,p.Z)(!1);var n=e.history,o=u(c(y,e.location),e.location),d=o?n.createHref(o):"",f=(0,r.Z)({},g,{href:d,navigate:function(){var t=c(y,e.location),o=(0,s.Ep)(e.location)===(0,s.Ep)(u(t));(l||o?n.replace:n.push)(t)}});return m!==h?f.ref=t||b:f.innerRef=b,a.createElement(i,f)}))})),b=function(e){return e},g=a.forwardRef;void 0===g&&(g=b);var v=g((function(e,t){var n=e["aria-current"],i=void 0===n?"page":n,s=e.activeClassName,l=void 0===s?"active":s,m=e.activeStyle,h=e.className,f=e.exact,v=e.isActive,_=e.location,k=e.sensitive,w=e.strict,S=e.style,T=e.to,E=e.innerRef,P=(0,d.Z)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return a.createElement(o.s6.Consumer,null,(function(e){e||(0,p.Z)(!1);var n=_||e.location,s=u(c(T,n),n),d=s.pathname,x=d&&d.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),R=x?(0,o.LX)(n.pathname,{path:x,exact:f,sensitive:k,strict:w}):null,A=!!(v?v(R,n):R),I="function"==typeof h?h(A):h,O="function"==typeof S?S(A):S;A&&(I=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(I,l),O=(0,r.Z)({},O,m));var U=(0,r.Z)({"aria-current":A&&i||null,className:I,style:O,to:s},P);return b!==g?U.ref=t||E:U.innerRef=E,a.createElement(y,U)}))}))},16550:(e,t,n)=>{"use strict";n.d(t,{AW:()=>T,F0:()=>v,LX:()=>S,TH:()=>N,k6:()=>U,rs:()=>I,s6:()=>g});var o=n(75068),i=n(67294),a=n(45697),s=n.n(a),r=n(99318),d=n(38776),p=n(87462),l=n(39658),c=n.n(l),u=(n(59864),n(63366)),m=(n(8679),1073741823),h="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};var f=i.createContext||function(e,t){var n,a,r="__create-react-context-"+function(){var e="__global_unique_id__";return h[e]=(h[e]||0)+1}()+"__",d=function(e){function n(){for(var t,n,o,i=arguments.length,a=new Array(i),s=0;s<i;s++)a[s]=arguments[s];return(t=e.call.apply(e,[this].concat(a))||this).emitter=(n=t.props.value,o=[],{on:function(e){o.push(e)},off:function(e){o=o.filter((function(t){return t!==e}))},get:function(){return n},set:function(e,t){n=e,o.forEach((function(e){return e(n,t)}))}}),t}(0,o.Z)(n,e);var i=n.prototype;return i.getChildContext=function(){var e;return(e={})[r]=this.emitter,e},i.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,o=this.props.value,i=e.value;((a=o)===(s=i)?0!==a||1/a==1/s:a!=a&&s!=s)?n=0:(n="function"==typeof t?t(o,i):m,0!==(n|=0)&&this.emitter.set(e.value,n))}var a,s},i.render=function(){return this.props.children},n}(i.Component);d.childContextTypes=((n={})[r]=s().object.isRequired,n);var p=function(t){function n(){for(var e,n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return(e=t.call.apply(t,[this].concat(o))||this).observedBits=void 0,e.state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}(0,o.Z)(n,t);var i=n.prototype;return i.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?m:t},i.componentDidMount=function(){this.context[r]&&this.context[r].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?m:e},i.componentWillUnmount=function(){this.context[r]&&this.context[r].off(this.onUpdate)},i.getValue=function(){return this.context[r]?this.context[r].get():e},i.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(i.Component);return p.contextTypes=((a={})[r]=s().object,a),{Provider:d,Consumer:p}},y=function(e){var t=f();return t.displayName=e,t},b=y("Router-History"),g=y("Router"),v=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._pendingLocation=e}))),n}(0,o.Z)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){var e=this;this._isMounted=!0,this.unlisten&&this.unlisten(),this.props.staticContext||(this.unlisten=this.props.history.listen((function(t){e._isMounted&&e.setState({location:t})}))),this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&(this.unlisten(),this._isMounted=!1,this._pendingLocation=null)},n.render=function(){return i.createElement(g.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},i.createElement(b.Provider,{children:this.props.children||null,value:this.props.history}))},t}(i.Component);i.Component;i.Component;var _={},k=1e4,w=0;function S(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,o=n.path,i=n.exact,a=void 0!==i&&i,s=n.strict,r=void 0!==s&&s,d=n.sensitive,p=void 0!==d&&d;return[].concat(o).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var o=function(e,t){var n=""+t.end+t.strict+t.sensitive,o=_[n]||(_[n]={});if(o[e])return o[e];var i=[],a={regexp:c()(e,i,t),keys:i};return w<k&&(o[e]=a,w++),a}(n,{end:a,strict:r,sensitive:p}),i=o.regexp,s=o.keys,d=i.exec(e);if(!d)return null;var l=d[0],u=d.slice(1),m=e===l;return a&&!m?null:{path:n,url:"/"===n&&""===l?"/":l,isExact:m,params:s.reduce((function(e,t,n){return e[t.name]=u[n],e}),{})}}),null)}var T=function(e){function t(){return e.apply(this,arguments)||this}return(0,o.Z)(t,e),t.prototype.render=function(){var e=this;return i.createElement(g.Consumer,null,(function(t){t||(0,d.Z)(!1);var n=e.props.location||t.location,o=e.props.computedMatch?e.props.computedMatch:e.props.path?S(n.pathname,e.props):t.match,a=(0,p.Z)({},t,{location:n,match:o}),s=e.props,r=s.children,l=s.component,c=s.render;return Array.isArray(r)&&function(e){return 0===i.Children.count(e)}(r)&&(r=null),i.createElement(g.Provider,{value:a},a.match?r?"function"==typeof r?r(a):r:l?i.createElement(l,a):c?c(a):null:"function"==typeof r?r(a):null)}))},t}(i.Component);function E(e){return"/"===e.charAt(0)?e:"/"+e}function P(e,t){if(!e)return t;var n=E(e);return 0!==t.pathname.indexOf(n)?t:(0,p.Z)({},t,{pathname:t.pathname.substr(n.length)})}function x(e){return"string"==typeof e?e:(0,r.Ep)(e)}function R(e){return function(){(0,d.Z)(!1)}}function A(){}i.Component;var I=function(e){function t(){return e.apply(this,arguments)||this}return(0,o.Z)(t,e),t.prototype.render=function(){var e=this;return i.createElement(g.Consumer,null,(function(t){t||(0,d.Z)(!1);var n,o,a=e.props.location||t.location;return i.Children.forEach(e.props.children,(function(e){if(null==o&&i.isValidElement(e)){n=e;var s=e.props.path||e.props.from;o=s?S(a.pathname,(0,p.Z)({},e.props,{path:s})):t.match}})),o?i.cloneElement(n,{location:a,computedMatch:o}):null}))},t}(i.Component);var O=i.useContext;function U(){return O(b)}function N(){return O(g).location}},39658:(e,t,n)=>{var o=n(5826);e.exports=m,e.exports.parse=a,e.exports.compile=function(e,t){return r(a(e,t),t)},e.exports.tokensToFunction=r,e.exports.tokensToRegExp=u;var i=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,o=[],a=0,s=0,r="",l=t&&t.delimiter||"/";null!=(n=i.exec(e));){var c=n[0],u=n[1],m=n.index;if(r+=e.slice(s,m),s=m+c.length,u)r+=u[1];else{var h=e[s],f=n[2],y=n[3],b=n[4],g=n[5],v=n[6],_=n[7];r&&(o.push(r),r="");var k=null!=f&&null!=h&&h!==f,w="+"===v||"*"===v,S="?"===v||"*"===v,T=n[2]||l,E=b||g;o.push({name:y||a++,prefix:f||"",delimiter:T,optional:S,repeat:w,partial:k,asterisk:!!_,pattern:E?p(E):_?".*":"[^"+d(T)+"]+?"})}}return s<e.length&&(r+=e.substr(s)),r&&o.push(r),o}function s(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function r(e,t){for(var n=new Array(e.length),i=0;i<e.length;i++)"object"==typeof e[i]&&(n[i]=new RegExp("^(?:"+e[i].pattern+")$",c(t)));return function(t,i){for(var a="",r=t||{},d=(i||{}).pretty?s:encodeURIComponent,p=0;p<e.length;p++){var l=e[p];if("string"!=typeof l){var c,u=r[l.name];if(null==u){if(l.optional){l.partial&&(a+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(o(u)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var m=0;m<u.length;m++){if(c=d(u[m]),!n[p].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");a+=(0===m?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(u).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):d(u),!n[p].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');a+=l.prefix+c}}else a+=l}return a}}function d(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function p(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function l(e,t){return e.keys=t,e}function c(e){return e&&e.sensitive?"":"i"}function u(e,t,n){o(t)||(n=t||n,t=[]);for(var i=(n=n||{}).strict,a=!1!==n.end,s="",r=0;r<e.length;r++){var p=e[r];if("string"==typeof p)s+=d(p);else{var u=d(p.prefix),m="(?:"+p.pattern+")";t.push(p),p.repeat&&(m+="(?:"+u+m+")*"),s+=m=p.optional?p.partial?u+"("+m+")?":"(?:"+u+"("+m+"))?":u+"("+m+")"}}var h=d(n.delimiter||"/"),f=s.slice(-h.length)===h;return i||(s=(f?s.slice(0,-h.length):s)+"(?:"+h+"(?=$))?"),s+=a?"$":i&&f?"":"(?="+h+"|$)",l(new RegExp("^"+s,c(n)),t)}function m(e,t,n){return o(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var o=0;o<n.length;o++)t.push({name:o,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return l(e,t)}(e,t):o(e)?function(e,t,n){for(var o=[],i=0;i<e.length;i++)o.push(m(e[i],t,n).source);return l(new RegExp("(?:"+o.join("|")+")",c(n)),t)}(e,t,n):function(e,t,n){return u(a(e,n),t,n)}(e,t,n)}},72408:(e,t,n)=>{"use strict";var o=n(27418),i=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var s=60109,r=60110,d=60112;t.Suspense=60113;var p=60115,l=60116;if("function"==typeof Symbol&&Symbol.for){var c=Symbol.for;i=c("react.element"),a=c("react.portal"),t.Fragment=c("react.fragment"),t.StrictMode=c("react.strict_mode"),t.Profiler=c("react.profiler"),s=c("react.provider"),r=c("react.context"),d=c("react.forward_ref"),t.Suspense=c("react.suspense"),p=c("react.memo"),l=c("react.lazy")}var u="function"==typeof Symbol&&Symbol.iterator;function m(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},f={};function y(e,t,n){this.props=e,this.context=t,this.refs=f,this.updater=n||h}function b(){}function g(e,t,n){this.props=e,this.context=t,this.refs=f,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(m(85));this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=y.prototype;var v=g.prototype=new b;v.constructor=g,o(v,y.prototype),v.isPureReactComponent=!0;var _={current:null},k=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var o,a={},s=null,r=null;if(null!=t)for(o in void 0!==t.ref&&(r=t.ref),void 0!==t.key&&(s=""+t.key),t)k.call(t,o)&&!w.hasOwnProperty(o)&&(a[o]=t[o]);var d=arguments.length-2;if(1===d)a.children=n;else if(1<d){for(var p=Array(d),l=0;l<d;l++)p[l]=arguments[l+2];a.children=p}if(e&&e.defaultProps)for(o in d=e.defaultProps)void 0===a[o]&&(a[o]=d[o]);return{$$typeof:i,type:e,key:s,ref:r,props:a,_owner:_.current}}function T(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var E=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function x(e,t,n,o,s){var r=typeof e;"undefined"!==r&&"boolean"!==r||(e=null);var d=!1;if(null===e)d=!0;else switch(r){case"string":case"number":d=!0;break;case"object":switch(e.$$typeof){case i:case a:d=!0}}if(d)return s=s(d=e),e=""===o?"."+P(d,0):o,Array.isArray(s)?(n="",null!=e&&(n=e.replace(E,"$&/")+"/"),x(s,t,n,"",(function(e){return e}))):null!=s&&(T(s)&&(s=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(s,n+(!s.key||d&&d.key===s.key?"":(""+s.key).replace(E,"$&/")+"/")+e)),t.push(s)),1;if(d=0,o=""===o?".":o+":",Array.isArray(e))for(var p=0;p<e.length;p++){var l=o+P(r=e[p],p);d+=x(r,t,n,l,s)}else if(l=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=u&&e[u]||e["@@iterator"])?e:null}(e),"function"==typeof l)for(e=l.call(e),p=0;!(r=e.next()).done;)d+=x(r=r.value,t,n,l=o+P(r,p++),s);else if("object"===r)throw t=""+e,Error(m(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return d}function R(e,t,n){if(null==e)return e;var o=[],i=0;return x(e,o,"","",(function(e){return t.call(n,e,i++)})),o}function A(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var I={current:null};function O(){var e=I.current;if(null===e)throw Error(m(321));return e}var U={ReactCurrentDispatcher:I,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:_,IsSomeRendererActing:{current:!1},assign:o};t.Children={map:R,forEach:function(e,t,n){R(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return R(e,(function(){t++})),t},toArray:function(e){return R(e,(function(e){return e}))||[]},only:function(e){if(!T(e))throw Error(m(143));return e}},t.Component=y,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=U,t.cloneElement=function(e,t,n){if(null==e)throw Error(m(267,e));var a=o({},e.props),s=e.key,r=e.ref,d=e._owner;if(null!=t){if(void 0!==t.ref&&(r=t.ref,d=_.current),void 0!==t.key&&(s=""+t.key),e.type&&e.type.defaultProps)var p=e.type.defaultProps;for(l in t)k.call(t,l)&&!w.hasOwnProperty(l)&&(a[l]=void 0===t[l]&&void 0!==p?p[l]:t[l])}var l=arguments.length-2;if(1===l)a.children=n;else if(1<l){p=Array(l);for(var c=0;c<l;c++)p[c]=arguments[c+2];a.children=p}return{$$typeof:i,type:e.type,key:s,ref:r,props:a,_owner:d}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:r,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=T,t.lazy=function(e){return{$$typeof:l,_payload:{_status:-1,_result:e},_init:A}},t.memo=function(e,t){return{$$typeof:p,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return O().useCallback(e,t)},t.useContext=function(e,t){return O().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return O().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return O().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return O().useLayoutEffect(e,t)},t.useMemo=function(e,t){return O().useMemo(e,t)},t.useReducer=function(e,t,n){return O().useReducer(e,t,n)},t.useRef=function(e){return O().useRef(e)},t.useState=function(e){return O().useState(e)},t.version="17.0.2"},67294:(e,t,n)=>{"use strict";e.exports=n(72408)},60053:(e,t)=>{"use strict";var n,o,i,a;if("object"==typeof performance&&"function"==typeof performance.now){var s=performance;t.unstable_now=function(){return s.now()}}else{var r=Date,d=r.now();t.unstable_now=function(){return r.now()-d}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var p=null,l=null,c=function(){if(null!==p)try{var e=t.unstable_now();p(!0,e),p=null}catch(n){throw setTimeout(c,0),n}};n=function(e){null!==p?setTimeout(n,0,e):(p=e,setTimeout(c,0))},o=function(e,t){l=setTimeout(e,t)},i=function(){clearTimeout(l)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var u=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var f=!1,y=null,b=-1,g=5,v=0;t.unstable_shouldYield=function(){return t.unstable_now()>=v},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):g=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,k=_.port2;_.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();v=e+g;try{y(!0,e)?k.postMessage(null):(f=!1,y=null)}catch(n){throw k.postMessage(null),n}}else f=!1},n=function(e){y=e,f||(f=!0,k.postMessage(null))},o=function(e,n){b=u((function(){e(t.unstable_now())}),n)},i=function(){m(b),b=-1}}function w(e,t){var n=e.length;e.push(t);e:for(;;){var o=n-1>>>1,i=e[o];if(!(void 0!==i&&0<E(i,t)))break e;e[o]=t,e[n]=i,n=o}}function S(e){return void 0===(e=e[0])?null:e}function T(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var o=0,i=e.length;o<i;){var a=2*(o+1)-1,s=e[a],r=a+1,d=e[r];if(void 0!==s&&0>E(s,n))void 0!==d&&0>E(d,s)?(e[o]=d,e[r]=n,o=r):(e[o]=s,e[a]=n,o=a);else{if(!(void 0!==d&&0>E(d,n)))break e;e[o]=d,e[r]=n,o=r}}}return t}return null}function E(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],x=[],R=1,A=null,I=3,O=!1,U=!1,N=!1;function L(e){for(var t=S(x);null!==t;){if(null===t.callback)T(x);else{if(!(t.startTime<=e))break;T(x),t.sortIndex=t.expirationTime,w(P,t)}t=S(x)}}function D(e){if(N=!1,L(e),!U)if(null!==S(P))U=!0,n(C);else{var t=S(x);null!==t&&o(D,t.startTime-e)}}function C(e,n){U=!1,N&&(N=!1,i()),O=!0;var a=I;try{for(L(n),A=S(P);null!==A&&(!(A.expirationTime>n)||e&&!t.unstable_shouldYield());){var s=A.callback;if("function"==typeof s){A.callback=null,I=A.priorityLevel;var r=s(A.expirationTime<=n);n=t.unstable_now(),"function"==typeof r?A.callback=r:A===S(P)&&T(P),L(n)}else T(P);A=S(P)}if(null!==A)var d=!0;else{var p=S(x);null!==p&&o(D,p.startTime-n),d=!1}return d}finally{A=null,I=a,O=!1}}var F=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){U||O||(U=!0,n(C))},t.unstable_getCurrentPriorityLevel=function(){return I},t.unstable_getFirstCallbackNode=function(){return S(P)},t.unstable_next=function(e){switch(I){case 1:case 2:case 3:var t=3;break;default:t=I}var n=I;I=t;try{return e()}finally{I=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=F,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=I;I=e;try{return t()}finally{I=n}},t.unstable_scheduleCallback=function(e,a,s){var r=t.unstable_now();switch("object"==typeof s&&null!==s?s="number"==typeof(s=s.delay)&&0<s?r+s:r:s=r,e){case 1:var d=-1;break;case 2:d=250;break;case 5:d=1073741823;break;case 4:d=1e4;break;default:d=5e3}return e={id:R++,callback:a,priorityLevel:e,startTime:s,expirationTime:d=s+d,sortIndex:-1},s>r?(e.sortIndex=s,w(x,e),null===S(P)&&e===S(x)&&(N?i():N=!0,o(D,s-r))):(e.sortIndex=d,w(P,e),U||O||(U=!0,n(C))),e},t.unstable_wrapCallback=function(e){var t=I;return function(){var n=I;I=t;try{return e.apply(this,arguments)}finally{I=n}}}},63840:(e,t,n)=>{"use strict";e.exports=n(60053)},96774:e=>{e.exports=function(e,t,n,o){var i=n?n.call(o,e,t):void 0;if(void 0!==i)return!!i;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var a=Object.keys(e),s=Object.keys(t);if(a.length!==s.length)return!1;for(var r=Object.prototype.hasOwnProperty.bind(t),d=0;d<a.length;d++){var p=a[d];if(!r(p))return!1;var l=e[p],c=t[p];if(!1===(i=n?n.call(o,l,c,p):void 0)||void 0===i&&l!==c)return!1}return!0}},53250:(e,t,n)=>{"use strict";var o=n(67294);var i="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},a=o.useState,s=o.useEffect,r=o.useLayoutEffect,d=o.useDebugValue;function p(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!i(e,n)}catch(o){return!0}}var l="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),o=a({inst:{value:n,getSnapshot:t}}),i=o[0].inst,l=o[1];return r((function(){i.value=n,i.getSnapshot=t,p(i)&&l({inst:i})}),[e,n,t]),s((function(){return p(i)&&l({inst:i}),e((function(){p(i)&&l({inst:i})}))}),[e]),d(n),n};t.useSyncExternalStore=void 0!==o.useSyncExternalStore?o.useSyncExternalStore:l},61688:(e,t,n)=>{"use strict";e.exports=n(53250)},36809:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={title:"Explore the SDK",tagline:"Cosmos SDK is the world's most popular framework for building application-specific blockchains.",url:"https://docs.cosmos.network",baseUrl:"/",onBrokenLinks:"warn",onBrokenMarkdownLinks:"warn",favicon:"img/favicon.svg",trailingSlash:!1,organizationName:"cosmos",projectName:"cosmos-sdk",i18n:{defaultLocale:"en",locales:["en"],path:"i18n",localeConfigs:{}},presets:[["classic",{docs:{sidebarPath:"/home/runner/work/cosmos-sdk-docs/cosmos-sdk-docs/sidebars.js",routeBasePath:"/",lastVersion:"0.53",versions:{current:{path:"main",banner:"unreleased"},.53:{path:"v0.53",label:"v0.53",banner:"none"},.5:{path:"v0.50",label:"v0.50",banner:"none"},.47:{path:"v0.47",label:"v0.47",banner:"none"}}},theme:{customCss:"/home/runner/work/cosmos-sdk-docs/cosmos-sdk-docs/src/css/custom.css"}}],["redocusaurus",{specs:[{spec:"openapi/swagger.yaml",route:"/api/"}],theme:{primaryColor:"#1890ff"}}]],themeConfig:{metadata:[{name:"algolia-site-verification",content:"98A89650568EAEEB"}],image:"img/banner.jpg",docs:{sidebar:{autoCollapseCategories:!0,hideable:!1},versionPersistence:"localStorage"},navbar:{title:"Cosmos SDK",hideOnScroll:!1,logo:{alt:"Cosmos SDK Logo",src:"img/logo-sdk.svg",href:"/",target:"_self"},items:[{type:"doc",label:"Learn",docId:"learn/learn",position:"left"},{type:"doc",label:"Build",docId:"build/building-modules/intro",position:"left"},{type:"doc",label:"User Guides",docId:"user/user",position:"left"},{type:"doc",label:"Tutorials",collapsed:!1,docId:"tutorials/vote-extensions/auction-frontrunning/getting-started",position:"left"},{label:"REST API",to:"api",position:"left"},{href:"https://github.com/cosmos/cosmos-sdk",html:'<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="github-icon">\n            <path fill-rule="evenodd" clip-rule="evenodd" d="M12 0.300049C5.4 0.300049 0 5.70005 0 12.3001C0 17.6001 3.4 22.1001 8.2 23.7001C8.8 23.8001 9 23.4001 9 23.1001C9 22.8001 9 22.1001 9 21.1001C5.7 21.8001 5 19.5001 5 19.5001C4.5 18.1001 3.7 17.7001 3.7 17.7001C2.5 17.0001 3.7 17.0001 3.7 17.0001C4.9 17.1001 5.5 18.2001 5.5 18.2001C6.6 20.0001 8.3 19.5001 9 19.2001C9.1 18.4001 9.4 17.9001 9.8 17.6001C7.1 17.3001 4.3 16.3001 4.3 11.7001C4.3 10.4001 4.8 9.30005 5.5 8.50005C5.5 8.10005 5 6.90005 5.7 5.30005C5.7 5.30005 6.7 5.00005 9 6.50005C10 6.20005 11 6.10005 12 6.10005C13 6.10005 14 6.20005 15 6.50005C17.3 4.90005 18.3 5.30005 18.3 5.30005C19 7.00005 18.5 8.20005 18.4 8.50005C19.2 9.30005 19.6 10.4001 19.6 11.7001C19.6 16.3001 16.8 17.3001 14.1 17.6001C14.5 18.0001 14.9 18.7001 14.9 19.8001C14.9 21.4001 14.9 22.7001 14.9 23.1001C14.9 23.4001 15.1 23.8001 15.7 23.7001C20.5 22.1001 23.9 17.6001 23.9 12.3001C24 5.70005 18.6 0.300049 12 0.300049Z" fill="currentColor"/>\n            </svg>\n            ',position:"right"},{type:"docsVersionDropdown",position:"right",dropdownActiveClassDisabled:!0,dropdownItemsAfter:[{href:"https://docs.cosmos.network/v0.46/",label:"v0.46",target:"_self"},{href:"https://docs.cosmos.network/v0.45/",label:"v0.45",target:"_self"}],dropdownItemsBefore:[]}]},footer:{links:[{items:[{html:'<a href="https://cosmos.network"><img src="/img/logo-bw.svg" alt="Cosmos Logo"></a>'}],title:null},{title:"Documentation",items:[{label:"Cosmos Hub",href:"https://hub.cosmos.network"},{label:"CometBFT",href:"https://docs.cometbft.com"},{label:"IBC Go",href:"https://ibc.cosmos.network"},{label:"REST API",to:"api"}]},{title:"Community",items:[{label:"Blog",href:"https://blog.cosmos.network"},{label:"Forum",href:"https://forum.cosmos.network"},{label:"Discord",href:"https://discord.gg/interchain"},{label:"Reddit",href:"https://reddit.com/r/cosmosnetwork"}]},{title:"Social",items:[{label:"Discord",href:"https://discord.gg/interchain"},{label:"Twitter",href:"https://twitter.com/cosmos_sdk"},{label:"Youtube",href:"https://www.youtube.com/c/CosmosProject"},{label:"Telegram",href:"https://t.me/cosmosproject"}]}],copyright:'<p>The development of the Cosmos SDK is led primarily by <a href="https://interchain.io/ecosystem">Interchain Core Teams</a>. Funding for this development comes primarily from the Interchain Foundation, a Swiss non-profit.</p>',style:"light"},prism:{theme:{plain:{color:"#393A34",backgroundColor:"#f6f8fa"},styles:[{types:["comment","prolog","doctype","cdata"],style:{color:"#999988",fontStyle:"italic"}},{types:["namespace"],style:{opacity:.7}},{types:["string","attr-value"],style:{color:"#e3116c"}},{types:["punctuation","operator"],style:{color:"#393A34"}},{types:["entity","url","symbol","number","boolean","variable","constant","property","regex","inserted"],style:{color:"#36acaa"}},{types:["atrule","keyword","attr-name","selector"],style:{color:"#00a4db"}},{types:["function","deleted","tag"],style:{color:"#d73a49"}},{types:["function-variable"],style:{color:"#6f42c1"}},{types:["tag","selector","keyword"],style:{color:"#00009f"}}]},darkTheme:{plain:{color:"#F8F8F2",backgroundColor:"#282A36"},styles:[{types:["prolog","constant","builtin"],style:{color:"rgb(189, 147, 249)"}},{types:["inserted","function"],style:{color:"rgb(80, 250, 123)"}},{types:["deleted"],style:{color:"rgb(255, 85, 85)"}},{types:["changed"],style:{color:"rgb(255, 184, 108)"}},{types:["punctuation","symbol"],style:{color:"rgb(248, 248, 242)"}},{types:["string","char","tag","selector"],style:{color:"rgb(255, 121, 198)"}},{types:["keyword","variable"],style:{color:"rgb(189, 147, 249)",fontStyle:"italic"}},{types:["comment"],style:{color:"rgb(98, 114, 164)"}},{types:["attr-name"],style:{color:"rgb(241, 250, 140)"}}]},additionalLanguages:["protobuf","go-module"],magicComments:[{className:"theme-code-block-highlighted-line",line:"highlight-next-line",block:{start:"highlight-start",end:"highlight-end"}}]},algolia:{appId:"BYWD4BWSJI",apiKey:"b382b0b646e72e5c78a09d87bb6b758f",indexName:"sdk crawler",contextualSearch:!1,searchParameters:{},searchPagePath:"search"},colorMode:{defaultMode:"light",disableSwitch:!1,respectPrefersColorScheme:!1},tableOfContents:{minHeadingLevel:2,maxHeadingLevel:3},mermaid:{theme:{dark:"dark",light:"default"},options:{}}},markdown:{mermaid:!0},themes:["@you54f/theme-github-codeblock","@docusaurus/theme-mermaid"],plugins:[null,["@docusaurus/plugin-google-analytics",{trackingID:"UA-51029217-2",anonymizeIP:!0}],["@docusaurus/plugin-client-redirects",{fromExtensions:["html"],toExtensions:["html"],redirects:[{from:["/main","/master","/v0.43","/v0.44"],to:"/"},{from:["/main/modules/auth/01_concepts","/main/modules/auth/02_state","/main/modules/auth/03_antehandlers","/main/modules/auth/04_keepers","/main/modules/auth/06_params","/main/modules/auth/07_client"],to:"/main/build/modules/auth"},{from:"/main/modules/auth/05_vesting",to:"/main/build/modules/auth/vesting"},{from:["/main/modules/authz/01_concepts","/main/modules/authz/02_state","/main/modules/authz/03_messages","/main/modules/authz/04_events","/main/modules/authz/05_client"],to:"/main/build/modules/authz"},{from:["/main/modules/bank/01_state","/main/modules/bank/02_keepers","/main/modules/bank/04_events","/main/modules/bank/05_params","/main/modules/bank/06_client"],to:"/main/build/modules/bank"},{from:["/main/modules/crisis/01_state","/main/modules/crisis/02_messages","/main/modules/crisis/03_events","/main/modules/crisis/04_params","/main/modules/crisis/05_client"],to:"/main/build/modules/crisis"},{from:["/main/modules/distribution/01_concepts","/main/modules/distribution/02_state","/main/modules/distribution/03_begin_block","/main/modules/distribution/04_messages","/main/modules/distribution/05_hooks","/main/modules/distribution/06_events","/main/modules/distribution/07_params","/main/modules/distribution/08_client"],to:"/main/build/modules/distribution"},{from:["/main/modules/evidence/01_concepts","/main/modules/evidence/02_state","/main/modules/evidence/03_messages","/main/modules/evidence/04_events","/main/modules/evidence/05_params","/main/modules/evidence/06_begin_block","/main/modules/evidence/07_client"],to:"/main/build/modules/evidence"},{from:["/main/modules/feegrant/01_concepts","/main/modules/feegrant/02_state","/main/modules/feegrant/03_messages","/main/modules/feegrant/04_events","/main/modules/feegrant/05_client"],to:"/main/build/modules/feegrant"},{from:["/main/modules/gov/01_concepts","/main/modules/gov/02_state","/main/modules/gov/03_messages","/main/modules/gov/04_events","/main/modules/gov/05_future_improvements","/main/modules/gov/06_params","/main/modules/gov/07_client","/main/modules/gov/08_metadata"],to:"/main/build/modules/gov"},{from:["/main/modules/group/01_concepts","/main/modules/group/02_state","/main/modules/group/03_messages","/main/modules/group/04_events","/main/modules/group/05_client","/main/modules/group/06_metadata"],to:"/main/build/modules/auth"},{from:["/main/modules/mint/01_concepts","/main/modules/mint/02_state","/main/modules/mint/03_begin_block","/main/modules/mint/04_params","/main/modules/mint/05_events","/main/modules/mint/06_client"],to:"/main/build/modules/mint/"},{from:["/main/modules/nft/01_concepts","/main/modules/nft/02_state","/main/modules/nft/03_messages","/main/modules/nft/04_events"],to:"/main/build/modules/nft/"},{from:["/main/modules/params/01_keeper","/main/modules/params/02_subspace"],to:"/main/build/modules/params/"},{from:["/main/modules/slashing/01_concepts","/main/modules/slashing/02_state","/main/modules/slashing/03_messages","/main/modules/slashing/04_begin_block","/main/modules/slashing/05_hooks","/main/modules/slashing/06_events","/main/modules/slashing/07_tombstone","/main/modules/slashing/08_params","/main/modules/slashing/09_client"],to:"/main/build/modules/slashing/"},{from:["/main/modules/staking/01_state","/main/modules/staking/02_state_transitions","/main/modules/staking/03_messages","/main/modules/staking/04_begin_block","/main/modules/staking/05_end_block","/main/modules/staking/06_hooks","/main/modules/staking/07_events","/main/modules/staking/08_params","/main/modules/staking/09_client"],to:"/main/build/modules/staking/"},{from:["/main/modules/upgrade/01_concepts","/main/modules/upgrade/02_state","/main/modules/upgrade/03_events","/main/modules/upgrade/04_client"],to:"/main/build/modules/upgrade/"},{from:["/main/modules/capability","/main/ecosystem"],to:"/main/build/modules/"}]}]],scripts:[{src:"https://widget.kapa.ai/kapa-widget.bundle.js","data-website-id":"c64ef56e-ad38-4e7a-9c67-4089a1a69ac4","data-project-name":"Interchain Stack","data-project-color":"#5064FB","data-modal-disclaimer":"This is a custom LLM for the Interchain Stack with access to developer documentation and resources across the core Cosmos components. Please note that answers are generated by an AI so please use your best judgement before implementing.","data-modal-image":"img/logo-sdk.svg","data-project-logo":"img/spirograph-white.svg","data-user-analytics-fingerprint-enabled":"true",async:!0}],baseUrlIssueBanner:!0,onDuplicateRoutes:"warn",staticDirectories:["static"],customFields:{},headTags:[],stylesheets:[],clientModules:[],titleDelimiter:"|",noIndex:!1}},87462:(e,t,n)=>{"use strict";function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},o.apply(this,arguments)}n.d(t,{Z:()=>o})},75068:(e,t,n)=>{"use strict";function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function i(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,o(e,t)}n.d(t,{Z:()=>i})},63366:(e,t,n)=>{"use strict";function o(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}n.d(t,{Z:()=>o})},38776:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var o=!0,i="Invariant failed";function a(e,t){if(!e){if(o)throw new Error(i);var n="function"==typeof t?t():t,a=n?"".concat(i,": ").concat(n):i;throw new Error(a)}}},57529:e=>{"use strict";e.exports={}},16887:e=>{"use strict";e.exports=JSON.parse('{"/api-41c":{"__comp":"f0ad3fbb","__context":{"plugin":"2d0803df"},"specProps":"496f6455","layoutProps":"51c78a29"},"/search-24f":{"__comp":"1a4e3797","__context":{"plugin":"9def630d"}},"/v0.47-dec":{"__comp":"9881a7cf","__context":{"plugin":"82381013"},"config":"5e9f5e1a"},"/v0.50-29b":{"__comp":"5b97f9f4","__context":{"plugin":"82381013"},"config":"5e9f5e1a"},"/v0.53-667":{"__comp":"7773679d","__context":{"plugin":"82381013"},"config":"5e9f5e1a"},"/main-f21":{"__comp":"1be78505","__context":{"plugin":"d8d6ec70"},"versionMetadata":"935f2afb"},"/main/build-52a":{"__comp":"17896441","content":"7febdbb4"},"/main/build/abci/checktx-661":{"__comp":"17896441","content":"1f9b806c"},"/main/build/abci/introduction-3b2":{"__comp":"17896441","content":"291f064c"},"/main/build/abci/prepare-proposal-930":{"__comp":"17896441","content":"9665df9b"},"/main/build/abci/process-proposal-bf1":{"__comp":"17896441","content":"e922124c"},"/main/build/abci/vote-extensions-b8e":{"__comp":"17896441","content":"eabd7cbd"},"/main/build/architecture-55d":{"__comp":"17896441","content":"f64dbcbf"},"/main/build/architecture/adr-002-docs-structure-42c":{"__comp":"17896441","content":"4b798757"},"/main/build/architecture/adr-003-dynamic-capability-store-f6c":{"__comp":"17896441","content":"4430fd96"},"/main/build/architecture/adr-004-split-denomination-keys-d4f":{"__comp":"17896441","content":"a260a009"},"/main/build/architecture/adr-006-secret-store-replacement-0aa":{"__comp":"17896441","content":"869b1712"},"/main/build/architecture/adr-007-specialization-groups-424":{"__comp":"17896441","content":"5070aed7"},"/main/build/architecture/adr-008-dCERT-group-fef":{"__comp":"17896441","content":"8ff61cd7"},"/main/build/architecture/adr-009-evidence-module-3ff":{"__comp":"17896441","content":"cadad489"},"/main/build/architecture/adr-010-modular-antehandler-b8b":{"__comp":"17896441","content":"8359c2ff"},"/main/build/architecture/adr-011-generalize-genesis-accounts-9e2":{"__comp":"17896441","content":"ec431ceb"},"/main/build/architecture/adr-012-state-accessors-2db":{"__comp":"17896441","content":"9d6ae47a"},"/main/build/architecture/adr-013-metrics-9d4":{"__comp":"17896441","content":"6ff4c518"},"/main/build/architecture/adr-014-proportional-slashing-bd1":{"__comp":"17896441","content":"ce1a6d79"},"/main/build/architecture/adr-016-validator-consensus-key-rotation-298":{"__comp":"17896441","content":"63482b6c"},"/main/build/architecture/adr-017-historical-header-module-1b7":{"__comp":"17896441","content":"9041feaa"},"/main/build/architecture/adr-018-extendable-voting-period-05d":{"__comp":"17896441","content":"8f6f3e66"},"/main/build/architecture/adr-019-protobuf-state-encoding-9ec":{"__comp":"17896441","content":"1004d7e5"},"/main/build/architecture/adr-020-protobuf-transaction-encoding-e0b":{"__comp":"17896441","content":"b8b54f7d"},"/main/build/architecture/adr-021-protobuf-query-encoding-b3e":{"__comp":"17896441","content":"9eaae02d"},"/main/build/architecture/adr-022-custom-panic-handling-765":{"__comp":"17896441","content":"ea119d61"},"/main/build/architecture/adr-023-protobuf-naming-9c6":{"__comp":"17896441","content":"82d2ce96"},"/main/build/architecture/adr-024-coin-metadata-d7b":{"__comp":"17896441","content":"eed31865"},"/main/build/architecture/adr-027-deterministic-protobuf-serialization-18a":{"__comp":"17896441","content":"f19915ee"},"/main/build/architecture/adr-028-public-key-addresses-138":{"__comp":"17896441","content":"8c3238ef"},"/main/build/architecture/adr-029-fee-grant-module-df7":{"__comp":"17896441","content":"75d30f98"},"/main/build/architecture/adr-030-authz-module-874":{"__comp":"17896441","content":"4ab4f5b8"},"/main/build/architecture/adr-031-msg-service-2bc":{"__comp":"17896441","content":"0652bb5c"},"/main/build/architecture/adr-032-typed-events-283":{"__comp":"17896441","content":"ebd543f6"},"/main/build/architecture/adr-033-protobuf-inter-module-comm-fa7":{"__comp":"17896441","content":"a5bca27f"},"/main/build/architecture/adr-034-account-rekeying-5cf":{"__comp":"17896441","content":"d2d652d4"},"/main/build/architecture/adr-035-rosetta-api-support-29b":{"__comp":"17896441","content":"cbcb2342"},"/main/build/architecture/adr-036-arbitrary-signature-52b":{"__comp":"17896441","content":"cae7c36f"},"/main/build/architecture/adr-037-gov-split-vote-a13":{"__comp":"17896441","content":"744425ac"},"/main/build/architecture/adr-038-state-listening-f6b":{"__comp":"17896441","content":"d7840470"},"/main/build/architecture/adr-039-epoched-staking-e94":{"__comp":"17896441","content":"05a322b5"},"/main/build/architecture/adr-040-storage-and-smt-state-commitments-803":{"__comp":"17896441","content":"ba68c382"},"/main/build/architecture/adr-041-in-place-store-migrations-15f":{"__comp":"17896441","content":"c3bfd1e0"},"/main/build/architecture/adr-042-group-module-a62":{"__comp":"17896441","content":"3c5616d6"},"/main/build/architecture/adr-043-nft-module-3b5":{"__comp":"17896441","content":"ef85c939"},"/main/build/architecture/adr-044-protobuf-updates-guidelines-ee2":{"__comp":"17896441","content":"d461e889"},"/main/build/architecture/adr-045-check-delivertx-middlewares-f83":{"__comp":"17896441","content":"2d425f51"},"/main/build/architecture/adr-046-module-params-dc2":{"__comp":"17896441","content":"dd316b1b"},"/main/build/architecture/adr-047-extend-upgrade-plan-970":{"__comp":"17896441","content":"13e268d3"},"/main/build/architecture/adr-048-consensus-fees-3e9":{"__comp":"17896441","content":"63fb1a44"},"/main/build/architecture/adr-049-state-sync-hooks-ce8":{"__comp":"17896441","content":"bd762af2"},"/main/build/architecture/adr-050-sign-mode-textual-ac5":{"__comp":"17896441","content":"2882ddb0"},"/main/build/architecture/adr-050-sign-mode-textual-annex1-328":{"__comp":"17896441","content":"9e895eaf"},"/main/build/architecture/adr-050-sign-mode-textual-annex2-3b0":{"__comp":"17896441","content":"3071af69"},"/main/build/architecture/adr-053-go-module-refactoring-952":{"__comp":"17896441","content":"d0a77cca"},"/main/build/architecture/adr-054-semver-compatible-modules-9f1":{"__comp":"17896441","content":"be7454af"},"/main/build/architecture/adr-055-orm-f8a":{"__comp":"17896441","content":"2750b7ad"},"/main/build/architecture/adr-057-app-wiring-38b":{"__comp":"17896441","content":"6dac197c"},"/main/build/architecture/adr-058-auto-generated-cli-bd6":{"__comp":"17896441","content":"5e2d4c26"},"/main/build/architecture/adr-059-test-scopes-c11":{"__comp":"17896441","content":"a8c48608"},"/main/build/architecture/adr-060-abci-1.0-a16":{"__comp":"17896441","content":"15215bc0"},"/main/build/architecture/adr-061-liquid-staking-50a":{"__comp":"17896441","content":"b80e149e"},"/main/build/architecture/adr-062-collections-state-layer-e87":{"__comp":"17896441","content":"785e7e1f"},"/main/build/architecture/adr-063-core-module-api-73f":{"__comp":"17896441","content":"69acf6e6"},"/main/build/architecture/adr-064-abci-2.0-ea2":{"__comp":"17896441","content":"b9d3470d"},"/main/build/architecture/adr-065-store-v2-2d3":{"__comp":"17896441","content":"18f3901a"},"/main/build/architecture/adr-068-preblock-e83":{"__comp":"17896441","content":"a709cc54"},"/main/build/architecture/adr-070-unordered-account-cef":{"__comp":"17896441","content":"5637733f"},"/main/build/architecture/adr-076-tx-malleability-5f1":{"__comp":"17896441","content":"0979a3d3"},"/main/build/architecture/adr-template-2a6":{"__comp":"17896441","content":"875c62d0"},"/main/build/architecture/PROCESS-13a":{"__comp":"17896441","content":"39c42345"},"/main/build/building-apps/app-go-de9":{"__comp":"17896441","content":"d9468608"},"/main/build/building-apps/app-go-di-cb3":{"__comp":"17896441","content":"e47d5fcf"},"/main/build/building-apps/app-mempool-ad1":{"__comp":"17896441","content":"dd23495d"},"/main/build/building-apps/app-testnet-42c":{"__comp":"17896441","content":"2c621c81"},"/main/build/building-apps/app-upgrade-387":{"__comp":"17896441","content":"2defa1d1"},"/main/build/building-apps/runtime-3dc":{"__comp":"17896441","content":"97778202"},"/main/build/building-apps/vote-extensions-84a":{"__comp":"17896441","content":"46f90ce4"},"/main/build/building-modules/beginblock-endblock-6d3":{"__comp":"17896441","content":"6e53d265"},"/main/build/building-modules/depinject-a75":{"__comp":"17896441","content":"117bd5e2"},"/main/build/building-modules/errors-d69":{"__comp":"17896441","content":"64228690"},"/main/build/building-modules/genesis-ae1":{"__comp":"17896441","content":"b035da98"},"/main/build/building-modules/intro-5bf":{"__comp":"17896441","content":"2686a5e0"},"/main/build/building-modules/invariants-1d0":{"__comp":"17896441","content":"0dc8652b"},"/main/build/building-modules/keeper-a4d":{"__comp":"17896441","content":"70c1bee6"},"/main/build/building-modules/messages-and-queries-45a":{"__comp":"17896441","content":"285410ab"},"/main/build/building-modules/module-interfaces-ecb":{"__comp":"17896441","content":"be2f3b0f"},"/main/build/building-modules/module-manager-342":{"__comp":"17896441","content":"32cb0f95"},"/main/build/building-modules/msg-services-846":{"__comp":"17896441","content":"c72085d7"},"/main/build/building-modules/preblock-a79":{"__comp":"17896441","content":"45f29120"},"/main/build/building-modules/protobuf-annotations-a4e":{"__comp":"17896441","content":"9c027584"},"/main/build/building-modules/query-services-62c":{"__comp":"17896441","content":"684c1741"},"/main/build/building-modules/simulator-3f2":{"__comp":"17896441","content":"99798f37"},"/main/build/building-modules/structure-43f":{"__comp":"17896441","content":"d2308657"},"/main/build/building-modules/testing-07b":{"__comp":"17896441","content":"16d4e16c"},"/main/build/building-modules/upgrade-44a":{"__comp":"17896441","content":"46b2d35e"},"/main/build/migrations/intro-0f0":{"__comp":"17896441","content":"9d66e031"},"/main/build/migrations/upgrade-guide-cc6":{"__comp":"17896441","content":"615ee730"},"/main/build/migrations/upgrade-reference-533":{"__comp":"17896441","content":"0f04a3bb"},"/main/build/migrations/upgrading-7c1":{"__comp":"17896441","content":"406eca0d"},"/main/build/modules-05b":{"__comp":"17896441","content":"e18925b4"},"/main/build/modules/auth-408":{"__comp":"17896441","content":"f4882903"},"/main/build/modules/auth/tx-73e":{"__comp":"17896441","content":"4ff54078"},"/main/build/modules/auth/vesting-582":{"__comp":"17896441","content":"2a2d58c2"},"/main/build/modules/authz-566":{"__comp":"17896441","content":"51e97c57"},"/main/build/modules/bank-da1":{"__comp":"17896441","content":"614a68e5"},"/main/build/modules/circuit-e16":{"__comp":"17896441","content":"57a726fa"},"/main/build/modules/consensus-693":{"__comp":"17896441","content":"295201e1"},"/main/build/modules/crisis-2a5":{"__comp":"17896441","content":"b3c3267c"},"/main/build/modules/distribution-9e8":{"__comp":"17896441","content":"608ecad5"},"/main/build/modules/epochs-290":{"__comp":"17896441","content":"08637ee4"},"/main/build/modules/evidence-fe3":{"__comp":"17896441","content":"3a98a834"},"/main/build/modules/feegrant-821":{"__comp":"17896441","content":"000314c3"},"/main/build/modules/genutil-07f":{"__comp":"17896441","content":"588469d6"},"/main/build/modules/gov-814":{"__comp":"17896441","content":"2045ed70"},"/main/build/modules/group-7a0":{"__comp":"17896441","content":"d8cdbb0c"},"/main/build/modules/mint-de9":{"__comp":"17896441","content":"1195452d"},"/main/build/modules/nft-250":{"__comp":"17896441","content":"5e22c18d"},"/main/build/modules/params-bff":{"__comp":"17896441","content":"e01deb3d"},"/main/build/modules/protocolpool-082":{"__comp":"17896441","content":"6b5cd1f8"},"/main/build/modules/slashing-557":{"__comp":"17896441","content":"870aec37"},"/main/build/modules/staking-f59":{"__comp":"17896441","content":"5a098ab2"},"/main/build/modules/upgrade-3ac":{"__comp":"17896441","content":"c7d7cc59"},"/main/build/packages-902":{"__comp":"17896441","content":"cab9f56c"},"/main/build/packages/collections-60f":{"__comp":"17896441","content":"b02c9b7b"},"/main/build/packages/depinject-ec6":{"__comp":"17896441","content":"b3e0b9bf"},"/main/build/rfc-230":{"__comp":"17896441","content":"a62c5897"},"/main/build/rfc/PROCESS-697":{"__comp":"17896441","content":"3a3f2c39"},"/main/build/rfc/rfc-1dc":{"__comp":"17896441","content":"9d5cd317"},"/main/build/rfc/rfc-001-tx-validation-dd7":{"__comp":"17896441","content":"274d9d27"},"/main/build/rfc/rfc-template-abf":{"__comp":"17896441","content":"b9af48dd"},"/main/build/rfc/rfc/PROCESS-39e":{"__comp":"17896441","content":"f1a826f9"},"/main/build/rfc/rfc/rfc-001-tx-validation-7c1":{"__comp":"17896441","content":"2e67d54b"},"/main/build/rfc/rfc/rfc-template-26f":{"__comp":"17896441","content":"3c62d5c4"},"/main/build/spec-c19":{"__comp":"17896441","content":"e3539354"},"/main/build/spec/addresses-f93":{"__comp":"17896441","content":"cc939d06"},"/main/build/spec/addresses/bech32-514":{"__comp":"17896441","content":"f30ce5d5"},"/main/build/spec/SPEC_MODULE-5d9":{"__comp":"17896441","content":"d896b949"},"/main/build/spec/SPEC_STANDARD-624":{"__comp":"17896441","content":"b6357d2a"},"/main/build/spec/store-637":{"__comp":"17896441","content":"6f8abb07"},"/main/build/spec/store/interblock-cache-5ca":{"__comp":"17896441","content":"d3a351a9"},"/main/build/tooling-17c":{"__comp":"17896441","content":"a40affa6"},"/main/build/tooling/confix-d52":{"__comp":"17896441","content":"a5da7113"},"/main/build/tooling/cosmovisor-adc":{"__comp":"17896441","content":"248a5d0b"},"/main/build/tooling/hubl-6ef":{"__comp":"17896441","content":"b5a24512"},"/main/build/tooling/protobuf-d55":{"__comp":"17896441","content":"2cc9ba09"},"/main/learn-38b":{"__comp":"17896441","content":"f187ac9d"},"/main/learn/advanced/autocli-fbb":{"__comp":"17896441","content":"afa1afb9"},"/main/learn/advanced/baseapp-ea9":{"__comp":"17896441","content":"2a900817"},"/main/learn/advanced/cli-55f":{"__comp":"17896441","content":"1c0a2370"},"/main/learn/advanced/config-d27":{"__comp":"17896441","content":"c95a5a9f"},"/main/learn/advanced/context-e69":{"__comp":"17896441","content":"6b09ee62"},"/main/learn/advanced/encoding-90f":{"__comp":"17896441","content":"f0aa1b1e"},"/main/learn/advanced/events-fb6":{"__comp":"17896441","content":"0dfe86a3"},"/main/learn/advanced/grpc_rest-9f7":{"__comp":"17896441","content":"1145e4de"},"/main/learn/advanced/node-8d8":{"__comp":"17896441","content":"3184ab37"},"/main/learn/advanced/ocap-6d8":{"__comp":"17896441","content":"5f61ff51"},"/main/learn/advanced/proto-docs-add":{"__comp":"17896441","content":"ed171cb9"},"/main/learn/advanced/runtx_middleware-3ec":{"__comp":"17896441","content":"b1849a1b"},"/main/learn/advanced/simulation-afd":{"__comp":"17896441","content":"399a1fab"},"/main/learn/advanced/store-c05":{"__comp":"17896441","content":"474cd202"},"/main/learn/advanced/telemetry-9c5":{"__comp":"17896441","content":"c9c6ec1d"},"/main/learn/advanced/transactions-22d":{"__comp":"17896441","content":"85324f2a"},"/main/learn/advanced/upgrade-d0a":{"__comp":"17896441","content":"cd85affe"},"/main/learn/beginner/accounts-cc5":{"__comp":"17896441","content":"1e1bff2a"},"/main/learn/beginner/app-anatomy-ea1":{"__comp":"17896441","content":"e9724a1f"},"/main/learn/beginner/gas-fees-1f4":{"__comp":"17896441","content":"816b83a7"},"/main/learn/beginner/query-lifecycle-cb0":{"__comp":"17896441","content":"5989d945"},"/main/learn/beginner/tx-lifecycle-44c":{"__comp":"17896441","content":"a0e41bb4"},"/main/learn/intro/overview-edb":{"__comp":"17896441","content":"ea9e9a6d"},"/main/learn/intro/sdk-app-architecture-31d":{"__comp":"17896441","content":"58ed8cb9"},"/main/learn/intro/sdk-design-6e5":{"__comp":"17896441","content":"71f0f4a8"},"/main/learn/intro/why-app-specific-93a":{"__comp":"17896441","content":"9a8a7df7"},"/main/tutorials-337":{"__comp":"17896441","content":"9f8f5e6c"},"/main/tutorials/transactions/building-a-transaction-58f":{"__comp":"17896441","content":"1419a308"},"/main/tutorials/vote-extensions/auction-frontrunning/demo-of-mitigating-front-running-18f":{"__comp":"17896441","content":"402948e7"},"/main/tutorials/vote-extensions/auction-frontrunning/getting-started-28e":{"__comp":"17896441","content":"078fe6d4"},"/main/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extensions-82b":{"__comp":"17896441","content":"9e6d69e5"},"/main/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extesions-86c":{"__comp":"17896441","content":"bba17709"},"/main/tutorials/vote-extensions/auction-frontrunning/understanding-frontrunning-e33":{"__comp":"17896441","content":"c3b6cb8e"},"/main/tutorials/vote-extensions/oracle/getting-started-efe":{"__comp":"17896441","content":"61fada24"},"/main/tutorials/vote-extensions/oracle/implementing-vote-extensions-405":{"__comp":"17896441","content":"685f77c1"},"/main/tutorials/vote-extensions/oracle/testing-oracle-c9f":{"__comp":"17896441","content":"1565abcb"},"/main/tutorials/vote-extensions/oracle/what-is-an-oracle-c07":{"__comp":"17896441","content":"8976fd65"},"/main/user-55b":{"__comp":"17896441","content":"526992ef"},"/main/user/run-node/interact-node-367":{"__comp":"17896441","content":"cecd2aa8"},"/main/user/run-node/keyring-70e":{"__comp":"17896441","content":"19a7d35b"},"/main/user/run-node/rosetta-d92":{"__comp":"17896441","content":"209bdd5e"},"/main/user/run-node/run-node-ce0":{"__comp":"17896441","content":"ed211c05"},"/main/user/run-node/run-production-6d2":{"__comp":"17896441","content":"e5af342a"},"/main/user/run-node/run-testnet-4dc":{"__comp":"17896441","content":"08539765"},"/main/user/run-node/txs-6a7":{"__comp":"17896441","content":"3df64208"},"/v0.47-347":{"__comp":"1be78505","__context":{"plugin":"d8d6ec70"},"versionMetadata":"d669e822"},"/v0.47/build-8ee":{"__comp":"17896441","content":"47f8bc0f"},"/v0.47/build/architecture-d07":{"__comp":"17896441","content":"1d9e8f6a"},"/v0.47/build/architecture/adr-002-docs-structure-26c":{"__comp":"17896441","content":"aaf4b48a"},"/v0.47/build/architecture/adr-003-dynamic-capability-store-712":{"__comp":"17896441","content":"cf7cbbaf"},"/v0.47/build/architecture/adr-004-split-denomination-keys-7b0":{"__comp":"17896441","content":"bf6fdb00"},"/v0.47/build/architecture/adr-006-secret-store-replacement-acc":{"__comp":"17896441","content":"13296dfc"},"/v0.47/build/architecture/adr-007-specialization-groups-c9a":{"__comp":"17896441","content":"6fa2e9a5"},"/v0.47/build/architecture/adr-008-dCERT-group-27f":{"__comp":"17896441","content":"9bc0a3f4"},"/v0.47/build/architecture/adr-009-evidence-module-569":{"__comp":"17896441","content":"2467e308"},"/v0.47/build/architecture/adr-010-modular-antehandler-0dc":{"__comp":"17896441","content":"9d316c28"},"/v0.47/build/architecture/adr-011-generalize-genesis-accounts-5d5":{"__comp":"17896441","content":"b5b2690f"},"/v0.47/build/architecture/adr-012-state-accessors-fb1":{"__comp":"17896441","content":"8e3af0ef"},"/v0.47/build/architecture/adr-013-metrics-7ff":{"__comp":"17896441","content":"4246b296"},"/v0.47/build/architecture/adr-014-proportional-slashing-619":{"__comp":"17896441","content":"83150563"},"/v0.47/build/architecture/adr-016-validator-consensus-key-rotation-13c":{"__comp":"17896441","content":"d5b23884"},"/v0.47/build/architecture/adr-017-historical-header-module-0a0":{"__comp":"17896441","content":"29dc1f9f"},"/v0.47/build/architecture/adr-018-extendable-voting-period-231":{"__comp":"17896441","content":"44e5c2ad"},"/v0.47/build/architecture/adr-019-protobuf-state-encoding-606":{"__comp":"17896441","content":"9b3f8d6c"},"/v0.47/build/architecture/adr-020-protobuf-transaction-encoding-39f":{"__comp":"17896441","content":"35f3dd6b"},"/v0.47/build/architecture/adr-021-protobuf-query-encoding-880":{"__comp":"17896441","content":"86aa14eb"},"/v0.47/build/architecture/adr-022-custom-panic-handling-127":{"__comp":"17896441","content":"6bb8730f"},"/v0.47/build/architecture/adr-023-protobuf-naming-512":{"__comp":"17896441","content":"192cbf4f"},"/v0.47/build/architecture/adr-024-coin-metadata-af8":{"__comp":"17896441","content":"6c70b259"},"/v0.47/build/architecture/adr-027-deterministic-protobuf-serialization-9d7":{"__comp":"17896441","content":"d37a0fb0"},"/v0.47/build/architecture/adr-028-public-key-addresses-e26":{"__comp":"17896441","content":"f6ed7f4d"},"/v0.47/build/architecture/adr-029-fee-grant-module-24f":{"__comp":"17896441","content":"3b515a42"},"/v0.47/build/architecture/adr-030-authz-module-c33":{"__comp":"17896441","content":"fcbb8374"},"/v0.47/build/architecture/adr-031-msg-service-189":{"__comp":"17896441","content":"24293d11"},"/v0.47/build/architecture/adr-032-typed-events-94e":{"__comp":"17896441","content":"dd0b046e"},"/v0.47/build/architecture/adr-033-protobuf-inter-module-comm-544":{"__comp":"17896441","content":"202e8c53"},"/v0.47/build/architecture/adr-034-account-rekeying-ea4":{"__comp":"17896441","content":"57a642fb"},"/v0.47/build/architecture/adr-035-rosetta-api-support-2b8":{"__comp":"17896441","content":"cc857825"},"/v0.47/build/architecture/adr-036-arbitrary-signature-7ce":{"__comp":"17896441","content":"16c7fb34"},"/v0.47/build/architecture/adr-037-gov-split-vote-da7":{"__comp":"17896441","content":"d8f17f68"},"/v0.47/build/architecture/adr-038-state-listening-6b7":{"__comp":"17896441","content":"e24f3a69"},"/v0.47/build/architecture/adr-039-epoched-staking-620":{"__comp":"17896441","content":"54acbc7b"},"/v0.47/build/architecture/adr-040-storage-and-smt-state-commitments-96c":{"__comp":"17896441","content":"ce104a53"},"/v0.47/build/architecture/adr-041-in-place-store-migrations-67f":{"__comp":"17896441","content":"d5186259"},"/v0.47/build/architecture/adr-042-group-module-f81":{"__comp":"17896441","content":"6543313f"},"/v0.47/build/architecture/adr-043-nft-module-c82":{"__comp":"17896441","content":"3ffa3ceb"},"/v0.47/build/architecture/adr-044-protobuf-updates-guidelines-647":{"__comp":"17896441","content":"a1934dc7"},"/v0.47/build/architecture/adr-045-check-delivertx-middlewares-d2a":{"__comp":"17896441","content":"b7416e28"},"/v0.47/build/architecture/adr-046-module-params-1f7":{"__comp":"17896441","content":"3eb402a8"},"/v0.47/build/architecture/adr-047-extend-upgrade-plan-bde":{"__comp":"17896441","content":"e52f1969"},"/v0.47/build/architecture/adr-048-consensus-fees-ef2":{"__comp":"17896441","content":"5a566467"},"/v0.47/build/architecture/adr-049-state-sync-hooks-d88":{"__comp":"17896441","content":"b3c64a36"},"/v0.47/build/architecture/adr-050-sign-mode-textual-1b1":{"__comp":"17896441","content":"decfa0b9"},"/v0.47/build/architecture/adr-050-sign-mode-textual-annex1-d2b":{"__comp":"17896441","content":"93e252d5"},"/v0.47/build/architecture/adr-050-sign-mode-textual-annex2-03d":{"__comp":"17896441","content":"d9585412"},"/v0.47/build/architecture/adr-053-go-module-refactoring-eb1":{"__comp":"17896441","content":"b79efb2e"},"/v0.47/build/architecture/adr-054-semver-compatible-modules-3d0":{"__comp":"17896441","content":"cf441443"},"/v0.47/build/architecture/adr-055-orm-3e2":{"__comp":"17896441","content":"257bcfb6"},"/v0.47/build/architecture/adr-057-app-wiring-2f7":{"__comp":"17896441","content":"03e65fed"},"/v0.47/build/architecture/adr-058-auto-generated-cli-edf":{"__comp":"17896441","content":"58c1bae1"},"/v0.47/build/architecture/adr-059-test-scopes-62d":{"__comp":"17896441","content":"ad890002"},"/v0.47/build/architecture/adr-060-abci-1.0-8c2":{"__comp":"17896441","content":"d5d3bad5"},"/v0.47/build/architecture/adr-061-liquid-staking-9c6":{"__comp":"17896441","content":"592ea229"},"/v0.47/build/architecture/adr-062-collections-state-layer-0f1":{"__comp":"17896441","content":"c8c93f1a"},"/v0.47/build/architecture/adr-063-core-module-api-834":{"__comp":"17896441","content":"b1cb883d"},"/v0.47/build/architecture/adr-064-abci-2.0-cc1":{"__comp":"17896441","content":"d937757e"},"/v0.47/build/architecture/adr-065-store-v2-019":{"__comp":"17896441","content":"fed70f19"},"/v0.47/build/architecture/adr-template-527":{"__comp":"17896441","content":"2b732cba"},"/v0.47/build/architecture/PROCESS-22f":{"__comp":"17896441","content":"ec219799"},"/v0.47/build/building-apps/app-go-7ee":{"__comp":"17896441","content":"dad81df3"},"/v0.47/build/building-apps/app-go-v2-92c":{"__comp":"17896441","content":"e25df99e"},"/v0.47/build/building-apps/app-mempool-37d":{"__comp":"17896441","content":"e571b798"},"/v0.47/build/building-apps/app-upgrade-c2b":{"__comp":"17896441","content":"833a7118"},"/v0.47/build/building-modules/beginblock-endblock-b68":{"__comp":"17896441","content":"5edf22c5"},"/v0.47/build/building-modules/depinject-d33":{"__comp":"17896441","content":"e9c7be3b"},"/v0.47/build/building-modules/errors-043":{"__comp":"17896441","content":"e5c16dfa"},"/v0.47/build/building-modules/genesis-660":{"__comp":"17896441","content":"ea4c7967"},"/v0.47/build/building-modules/intro-b98":{"__comp":"17896441","content":"682918a9"},"/v0.47/build/building-modules/invariants-056":{"__comp":"17896441","content":"7724251f"},"/v0.47/build/building-modules/keeper-ac8":{"__comp":"17896441","content":"7bbfe8f1"},"/v0.47/build/building-modules/messages-and-queries-f17":{"__comp":"17896441","content":"fbcbd593"},"/v0.47/build/building-modules/module-interfaces-bb8":{"__comp":"17896441","content":"eb941523"},"/v0.47/build/building-modules/module-manager-39d":{"__comp":"17896441","content":"9b541334"},"/v0.47/build/building-modules/msg-services-f6c":{"__comp":"17896441","content":"d9bc50e0"},"/v0.47/build/building-modules/query-services-0a3":{"__comp":"17896441","content":"0b8f22d8"},"/v0.47/build/building-modules/simulator-f7c":{"__comp":"17896441","content":"789379b8"},"/v0.47/build/building-modules/structure-2c8":{"__comp":"17896441","content":"144c6bd8"},"/v0.47/build/building-modules/testing-5b5":{"__comp":"17896441","content":"d916e421"},"/v0.47/build/building-modules/upgrade-683":{"__comp":"17896441","content":"273f93c4"},"/v0.47/build/migrations/intro-248":{"__comp":"17896441","content":"017e5a67"},"/v0.47/build/migrations/upgrading-096":{"__comp":"17896441","content":"fb152a42"},"/v0.47/build/modules-69a":{"__comp":"17896441","content":"f89432e3"},"/v0.47/build/modules/accounts-75d":{"__comp":"17896441","content":"c02ed3f0"},"/v0.47/build/modules/auth-f9d":{"__comp":"17896441","content":"5ddf0aa6"},"/v0.47/build/modules/auth/tx-e4a":{"__comp":"17896441","content":"dd31b54e"},"/v0.47/build/modules/auth/vesting-62f":{"__comp":"17896441","content":"3538b0cc"},"/v0.47/build/modules/authz-413":{"__comp":"17896441","content":"7208dc7e"},"/v0.47/build/modules/bank-6e2":{"__comp":"17896441","content":"ae2c4c3c"},"/v0.47/build/modules/circuit-a84":{"__comp":"17896441","content":"02008975"},"/v0.47/build/modules/consensus-6b7":{"__comp":"17896441","content":"5167096d"},"/v0.47/build/modules/crisis-80d":{"__comp":"17896441","content":"477e059b"},"/v0.47/build/modules/distribution-310":{"__comp":"17896441","content":"07c0a7f7"},"/v0.47/build/modules/evidence-e00":{"__comp":"17896441","content":"c3055928"},"/v0.47/build/modules/feegrant-ff3":{"__comp":"17896441","content":"d91c87dc"},"/v0.47/build/modules/genutil-2b0":{"__comp":"17896441","content":"ebe8a46b"},"/v0.47/build/modules/gov-097":{"__comp":"17896441","content":"51d64a0a"},"/v0.47/build/modules/group-bd3":{"__comp":"17896441","content":"a7668962"},"/v0.47/build/modules/mint-837":{"__comp":"17896441","content":"bff21acd"},"/v0.47/build/modules/nft-6e8":{"__comp":"17896441","content":"eaab668c"},"/v0.47/build/modules/params-05e":{"__comp":"17896441","content":"76ce1ef4"},"/v0.47/build/modules/slashing-cbf":{"__comp":"17896441","content":"e1e70fb9"},"/v0.47/build/modules/staking-28e":{"__comp":"17896441","content":"99321b2e"},"/v0.47/build/modules/upgrade-0b7":{"__comp":"17896441","content":"8b89a72a"},"/v0.47/build/packages-2a7":{"__comp":"17896441","content":"dfdd2f19"},"/v0.47/build/packages/collections-4ca":{"__comp":"17896441","content":"5f3935af"},"/v0.47/build/packages/depinject-120":{"__comp":"17896441","content":"8d440aa6"},"/v0.47/build/packages/orm-b88":{"__comp":"17896441","content":"839de1bf"},"/v0.47/build/rfc-d80":{"__comp":"17896441","content":"8ef35be7"},"/v0.47/build/rfc/PROCESS-019":{"__comp":"17896441","content":"99178835"},"/v0.47/build/rfc/rfc-001-tx-validation-16e":{"__comp":"17896441","content":"a4703051"},"/v0.47/build/rfc/rfc-template-d09":{"__comp":"17896441","content":"acdfdbf0"},"/v0.47/build/spec/addresses-842":{"__comp":"17896441","content":"ecae7efd"},"/v0.47/build/spec/addresses/bech32-cf6":{"__comp":"17896441","content":"8e99a8bc"},"/v0.47/build/spec/ics-cba":{"__comp":"17896441","content":"23685808"},"/v0.47/build/spec/ics/ics-030-signed-messages-de7":{"__comp":"17896441","content":"8478471d"},"/v0.47/build/spec/SPEC_MODULE-7d2":{"__comp":"17896441","content":"fd598739"},"/v0.47/build/spec/SPEC_STANDARD-15d":{"__comp":"17896441","content":"06ba3929"},"/v0.47/build/tooling-fc4":{"__comp":"17896441","content":"076872de"},"/v0.47/build/tooling/autocli-a55":{"__comp":"17896441","content":"5150626b"},"/v0.47/build/tooling/confix-1d0":{"__comp":"17896441","content":"b43b0eba"},"/v0.47/build/tooling/cosmovisor-01f":{"__comp":"17896441","content":"0d728a42"},"/v0.47/build/tooling/depinject-d19":{"__comp":"17896441","content":"386c9392"},"/v0.47/build/tooling/hubl-dc7":{"__comp":"17896441","content":"13cd73dd"},"/v0.47/build/tooling/protobuf-ca8":{"__comp":"17896441","content":"6b1ad056"},"/v0.47/learn-b06":{"__comp":"17896441","content":"d83c2b04"},"/v0.47/learn/advanced/baseapp-1c2":{"__comp":"17896441","content":"aa968dee"},"/v0.47/learn/advanced/cli-475":{"__comp":"17896441","content":"d4ec8ac1"},"/v0.47/learn/advanced/config-931":{"__comp":"17896441","content":"2d872204"},"/v0.47/learn/advanced/context-c23":{"__comp":"17896441","content":"ae6a9435"},"/v0.47/learn/advanced/encoding-f06":{"__comp":"17896441","content":"41a15950"},"/v0.47/learn/advanced/events-532":{"__comp":"17896441","content":"93935580"},"/v0.47/learn/advanced/grpc_rest-3eb":{"__comp":"17896441","content":"ebc9a776"},"/v0.47/learn/advanced/interblock-cache-b15":{"__comp":"17896441","content":"de3433c7"},"/v0.47/learn/advanced/node-c47":{"__comp":"17896441","content":"8be5398d"},"/v0.47/learn/advanced/ocap-be7":{"__comp":"17896441","content":"00ec541b"},"/v0.47/learn/advanced/proto-docs-3b4":{"__comp":"17896441","content":"7d0277b4"},"/v0.47/learn/advanced/runtx_middleware-c69":{"__comp":"17896441","content":"80c48bfe"},"/v0.47/learn/advanced/simulation-dbd":{"__comp":"17896441","content":"406002be"},"/v0.47/learn/advanced/store-b42":{"__comp":"17896441","content":"21cf644b"},"/v0.47/learn/advanced/telemetry-708":{"__comp":"17896441","content":"1818ae17"},"/v0.47/learn/advanced/transactions-dfd":{"__comp":"17896441","content":"e3e462c1"},"/v0.47/learn/advanced/upgrade-32f":{"__comp":"17896441","content":"ecddbb6d"},"/v0.47/learn/beginner/accounts-04f":{"__comp":"17896441","content":"cd39a837"},"/v0.47/learn/beginner/gas-fees-498":{"__comp":"17896441","content":"e4140896"},"/v0.47/learn/beginner/overview-app-1b3":{"__comp":"17896441","content":"8cee131b"},"/v0.47/learn/beginner/query-lifecycle-91f":{"__comp":"17896441","content":"c598c2c9"},"/v0.47/learn/beginner/tx-lifecycle-59f":{"__comp":"17896441","content":"257267ee"},"/v0.47/learn/glossary-6b6":{"__comp":"17896441","content":"3c94ed7e"},"/v0.47/learn/intro/overview-d1a":{"__comp":"17896441","content":"1b8372be"},"/v0.47/learn/intro/sdk-app-architecture-c25":{"__comp":"17896441","content":"c740261d"},"/v0.47/learn/intro/sdk-design-600":{"__comp":"17896441","content":"1079f66a"},"/v0.47/learn/intro/why-app-specific-169":{"__comp":"17896441","content":"2e9ccffe"},"/v0.47/user-3dd":{"__comp":"17896441","content":"38d7e9a7"},"/v0.47/user/run-node/interact-node-c4f":{"__comp":"17896441","content":"4ac47a70"},"/v0.47/user/run-node/keyring-715":{"__comp":"17896441","content":"22da10f0"},"/v0.47/user/run-node/multisig-guide-a91":{"__comp":"17896441","content":"018b1358"},"/v0.47/user/run-node/rosetta-5e7":{"__comp":"17896441","content":"fd0eeb62"},"/v0.47/user/run-node/run-node-8a4":{"__comp":"17896441","content":"683bc028"},"/v0.47/user/run-node/run-production-2d0":{"__comp":"17896441","content":"59d2a6b2"},"/v0.47/user/run-node/run-testnet-5f3":{"__comp":"17896441","content":"ae253e90"},"/v0.47/user/run-node/txs-fae":{"__comp":"17896441","content":"ac9977f4"},"/v0.47/validate/run-testnet-814":{"__comp":"17896441","content":"f87095a4"},"/v0.50-4b7":{"__comp":"1be78505","__context":{"plugin":"d8d6ec70"},"versionMetadata":"06df35bc"},"/v0.50/build-edf":{"__comp":"17896441","content":"18b85d17"},"/v0.50/build/abci/introduction-618":{"__comp":"17896441","content":"3cc55d54"},"/v0.50/build/abci/prepare-proposal-714":{"__comp":"17896441","content":"8e6de85e"},"/v0.50/build/abci/process-proposal-e67":{"__comp":"17896441","content":"e70d208a"},"/v0.50/build/abci/vote-extensions-5ae":{"__comp":"17896441","content":"ad793b63"},"/v0.50/build/architecture-e8b":{"__comp":"17896441","content":"3c2828c7"},"/v0.50/build/architecture/adr-002-docs-structure-2a0":{"__comp":"17896441","content":"3796d8f8"},"/v0.50/build/architecture/adr-003-dynamic-capability-store-8cd":{"__comp":"17896441","content":"0186c00a"},"/v0.50/build/architecture/adr-004-split-denomination-keys-f38":{"__comp":"17896441","content":"0ac4958a"},"/v0.50/build/architecture/adr-006-secret-store-replacement-430":{"__comp":"17896441","content":"822523b3"},"/v0.50/build/architecture/adr-007-specialization-groups-f3a":{"__comp":"17896441","content":"9bad717f"},"/v0.50/build/architecture/adr-008-dCERT-group-1ce":{"__comp":"17896441","content":"a55abc94"},"/v0.50/build/architecture/adr-009-evidence-module-0f3":{"__comp":"17896441","content":"a972391d"},"/v0.50/build/architecture/adr-010-modular-antehandler-354":{"__comp":"17896441","content":"73aae6b2"},"/v0.50/build/architecture/adr-011-generalize-genesis-accounts-6e1":{"__comp":"17896441","content":"247a1d2f"},"/v0.50/build/architecture/adr-012-state-accessors-cc8":{"__comp":"17896441","content":"bd7acffd"},"/v0.50/build/architecture/adr-013-metrics-d15":{"__comp":"17896441","content":"4dce0732"},"/v0.50/build/architecture/adr-014-proportional-slashing-e56":{"__comp":"17896441","content":"4ecc76c4"},"/v0.50/build/architecture/adr-016-validator-consensus-key-rotation-281":{"__comp":"17896441","content":"8e6c6e15"},"/v0.50/build/architecture/adr-017-historical-header-module-220":{"__comp":"17896441","content":"9d530b38"},"/v0.50/build/architecture/adr-018-extendable-voting-period-764":{"__comp":"17896441","content":"5e3cce4b"},"/v0.50/build/architecture/adr-019-protobuf-state-encoding-039":{"__comp":"17896441","content":"31e1c185"},"/v0.50/build/architecture/adr-020-protobuf-transaction-encoding-f00":{"__comp":"17896441","content":"bd20944e"},"/v0.50/build/architecture/adr-021-protobuf-query-encoding-e3e":{"__comp":"17896441","content":"bf89b568"},"/v0.50/build/architecture/adr-022-custom-panic-handling-b6b":{"__comp":"17896441","content":"fb376c28"},"/v0.50/build/architecture/adr-023-protobuf-naming-8c2":{"__comp":"17896441","content":"df34bff5"},"/v0.50/build/architecture/adr-024-coin-metadata-877":{"__comp":"17896441","content":"3ae21f6e"},"/v0.50/build/architecture/adr-027-deterministic-protobuf-serialization-a0a":{"__comp":"17896441","content":"77ddcd7c"},"/v0.50/build/architecture/adr-028-public-key-addresses-ea7":{"__comp":"17896441","content":"9c9e410f"},"/v0.50/build/architecture/adr-029-fee-grant-module-1be":{"__comp":"17896441","content":"ebec16fa"},"/v0.50/build/architecture/adr-030-authz-module-e2d":{"__comp":"17896441","content":"048bf676"},"/v0.50/build/architecture/adr-031-msg-service-c84":{"__comp":"17896441","content":"611164c8"},"/v0.50/build/architecture/adr-032-typed-events-3e0":{"__comp":"17896441","content":"cd3aefe3"},"/v0.50/build/architecture/adr-033-protobuf-inter-module-comm-fe6":{"__comp":"17896441","content":"7fc8f794"},"/v0.50/build/architecture/adr-034-account-rekeying-818":{"__comp":"17896441","content":"857b6eee"},"/v0.50/build/architecture/adr-035-rosetta-api-support-4ab":{"__comp":"17896441","content":"8e0e37c9"},"/v0.50/build/architecture/adr-036-arbitrary-signature-584":{"__comp":"17896441","content":"ec8b0ad4"},"/v0.50/build/architecture/adr-037-gov-split-vote-ed9":{"__comp":"17896441","content":"08da1826"},"/v0.50/build/architecture/adr-038-state-listening-536":{"__comp":"17896441","content":"2c400045"},"/v0.50/build/architecture/adr-039-epoched-staking-864":{"__comp":"17896441","content":"967de5cd"},"/v0.50/build/architecture/adr-040-storage-and-smt-state-commitments-c72":{"__comp":"17896441","content":"31495002"},"/v0.50/build/architecture/adr-041-in-place-store-migrations-4a6":{"__comp":"17896441","content":"d6ee8909"},"/v0.50/build/architecture/adr-042-group-module-6df":{"__comp":"17896441","content":"8d2bf50a"},"/v0.50/build/architecture/adr-043-nft-module-d04":{"__comp":"17896441","content":"46e274eb"},"/v0.50/build/architecture/adr-044-protobuf-updates-guidelines-1c5":{"__comp":"17896441","content":"269dc56f"},"/v0.50/build/architecture/adr-045-check-delivertx-middlewares-f5d":{"__comp":"17896441","content":"70be26ea"},"/v0.50/build/architecture/adr-046-module-params-d89":{"__comp":"17896441","content":"9aaa9e0f"},"/v0.50/build/architecture/adr-047-extend-upgrade-plan-e2c":{"__comp":"17896441","content":"ad20c268"},"/v0.50/build/architecture/adr-048-consensus-fees-119":{"__comp":"17896441","content":"779fd27d"},"/v0.50/build/architecture/adr-049-state-sync-hooks-c53":{"__comp":"17896441","content":"e3feac52"},"/v0.50/build/architecture/adr-050-sign-mode-textual-439":{"__comp":"17896441","content":"b21e4d20"},"/v0.50/build/architecture/adr-050-sign-mode-textual-annex1-fc0":{"__comp":"17896441","content":"fbaf7d43"},"/v0.50/build/architecture/adr-050-sign-mode-textual-annex2-848":{"__comp":"17896441","content":"17e86cde"},"/v0.50/build/architecture/adr-053-go-module-refactoring-210":{"__comp":"17896441","content":"d864bb42"},"/v0.50/build/architecture/adr-054-semver-compatible-modules-632":{"__comp":"17896441","content":"8ef42e8e"},"/v0.50/build/architecture/adr-055-orm-a65":{"__comp":"17896441","content":"0efc30fd"},"/v0.50/build/architecture/adr-057-app-wiring-331":{"__comp":"17896441","content":"198fb009"},"/v0.50/build/architecture/adr-058-auto-generated-cli-32b":{"__comp":"17896441","content":"da502727"},"/v0.50/build/architecture/adr-059-test-scopes-b1c":{"__comp":"17896441","content":"392194ce"},"/v0.50/build/architecture/adr-060-abci-1.0-7a8":{"__comp":"17896441","content":"3dfbfacd"},"/v0.50/build/architecture/adr-061-liquid-staking-458":{"__comp":"17896441","content":"a8a413f5"},"/v0.50/build/architecture/adr-062-collections-state-layer-002":{"__comp":"17896441","content":"25d9a5f3"},"/v0.50/build/architecture/adr-063-core-module-api-055":{"__comp":"17896441","content":"d0ee4882"},"/v0.50/build/architecture/adr-064-abci-2.0-dd1":{"__comp":"17896441","content":"f93529ca"},"/v0.50/build/architecture/adr-065-store-v2-914":{"__comp":"17896441","content":"9c7defc6"},"/v0.50/build/architecture/adr-068-preblock-ad1":{"__comp":"17896441","content":"ce7ec684"},"/v0.50/build/architecture/adr-070-unordered-account-cd2":{"__comp":"17896441","content":"ec9922ef"},"/v0.50/build/architecture/adr-076-tx-malleability-cfe":{"__comp":"17896441","content":"2ef08f5d"},"/v0.50/build/architecture/adr-template-db3":{"__comp":"17896441","content":"99e2197f"},"/v0.50/build/architecture/PROCESS-51e":{"__comp":"17896441","content":"26982686"},"/v0.50/build/building-apps/app-go-ed2":{"__comp":"17896441","content":"2ac04cfa"},"/v0.50/build/building-apps/app-go-v2-97b":{"__comp":"17896441","content":"d1e0f614"},"/v0.50/build/building-apps/app-mempool-82e":{"__comp":"17896441","content":"809b32a9"},"/v0.50/build/building-apps/app-testnet-f30":{"__comp":"17896441","content":"75d15c1f"},"/v0.50/build/building-apps/app-upgrade-f89":{"__comp":"17896441","content":"ae624b6b"},"/v0.50/build/building-apps/vote-extensions-d01":{"__comp":"17896441","content":"10735f07"},"/v0.50/build/building-modules/beginblock-endblock-f2a":{"__comp":"17896441","content":"5ac16de2"},"/v0.50/build/building-modules/depinject-abf":{"__comp":"17896441","content":"b7669011"},"/v0.50/build/building-modules/errors-0a4":{"__comp":"17896441","content":"80d1ee76"},"/v0.50/build/building-modules/genesis-cc8":{"__comp":"17896441","content":"83e4f973"},"/v0.50/build/building-modules/intro-e1f":{"__comp":"17896441","content":"0a39f69f"},"/v0.50/build/building-modules/invariants-aa2":{"__comp":"17896441","content":"fce0d843"},"/v0.50/build/building-modules/keeper-0c1":{"__comp":"17896441","content":"f0501383"},"/v0.50/build/building-modules/messages-and-queries-3b3":{"__comp":"17896441","content":"765742cb"},"/v0.50/build/building-modules/module-interfaces-1d5":{"__comp":"17896441","content":"d793c429"},"/v0.50/build/building-modules/module-manager-c7f":{"__comp":"17896441","content":"589d3bbd"},"/v0.50/build/building-modules/msg-services-982":{"__comp":"17896441","content":"39d2c21e"},"/v0.50/build/building-modules/preblock-d0b":{"__comp":"17896441","content":"dfc09587"},"/v0.50/build/building-modules/protobuf-annotations-d48":{"__comp":"17896441","content":"f66a6809"},"/v0.50/build/building-modules/query-services-ee1":{"__comp":"17896441","content":"31ee55c2"},"/v0.50/build/building-modules/simulator-21b":{"__comp":"17896441","content":"569dce2b"},"/v0.50/build/building-modules/structure-474":{"__comp":"17896441","content":"1d712857"},"/v0.50/build/building-modules/testing-b3a":{"__comp":"17896441","content":"76803891"},"/v0.50/build/building-modules/upgrade-afe":{"__comp":"17896441","content":"a4afe76c"},"/v0.50/build/migrations/intro-688":{"__comp":"17896441","content":"9df57219"},"/v0.50/build/migrations/upgrade-guide-0c4":{"__comp":"17896441","content":"180b90f1"},"/v0.50/build/migrations/upgrade-reference-a69":{"__comp":"17896441","content":"cfacf430"},"/v0.50/build/migrations/upgrading-81b":{"__comp":"17896441","content":"31907841"},"/v0.50/build/modules-51d":{"__comp":"17896441","content":"2bf806de"},"/v0.50/build/modules/auth-375":{"__comp":"17896441","content":"52e9c265"},"/v0.50/build/modules/auth/tx-899":{"__comp":"17896441","content":"b87a09eb"},"/v0.50/build/modules/auth/vesting-d5e":{"__comp":"17896441","content":"e79f4f5f"},"/v0.50/build/modules/authz-266":{"__comp":"17896441","content":"df5a3971"},"/v0.50/build/modules/bank-437":{"__comp":"17896441","content":"86fdf241"},"/v0.50/build/modules/circuit-bd0":{"__comp":"17896441","content":"5a861dce"},"/v0.50/build/modules/consensus-ee0":{"__comp":"17896441","content":"7f7e1547"},"/v0.50/build/modules/crisis-6ba":{"__comp":"17896441","content":"f4364863"},"/v0.50/build/modules/distribution-f95":{"__comp":"17896441","content":"a8d267c2"},"/v0.50/build/modules/epochs-d05":{"__comp":"17896441","content":"f354bcfe"},"/v0.50/build/modules/evidence-fae":{"__comp":"17896441","content":"a5426c5f"},"/v0.50/build/modules/feegrant-8c6":{"__comp":"17896441","content":"402360fd"},"/v0.50/build/modules/genutil-2c3":{"__comp":"17896441","content":"9a2c8305"},"/v0.50/build/modules/gov-142":{"__comp":"17896441","content":"45f361db"},"/v0.50/build/modules/group-94e":{"__comp":"17896441","content":"355c696b"},"/v0.50/build/modules/mint-5b3":{"__comp":"17896441","content":"efd2fd56"},"/v0.50/build/modules/nft-740":{"__comp":"17896441","content":"8d7e5537"},"/v0.50/build/modules/params-ef7":{"__comp":"17896441","content":"28b575d2"},"/v0.50/build/modules/protocolpool-23e":{"__comp":"17896441","content":"48118c6b"},"/v0.50/build/modules/slashing-5c3":{"__comp":"17896441","content":"315320b1"},"/v0.50/build/modules/staking-625":{"__comp":"17896441","content":"6ac023db"},"/v0.50/build/modules/upgrade-f8e":{"__comp":"17896441","content":"3de28c89"},"/v0.50/build/packages-db7":{"__comp":"17896441","content":"8cc544de"},"/v0.50/build/packages/collections-712":{"__comp":"17896441","content":"bd218320"},"/v0.50/build/packages/depinject-428":{"__comp":"17896441","content":"7f7946f5"},"/v0.50/build/rfc-a22":{"__comp":"17896441","content":"6a0c47bf"},"/v0.50/build/rfc/PROCESS-f60":{"__comp":"17896441","content":"8a4d0f47"},"/v0.50/build/rfc/rfc-927":{"__comp":"17896441","content":"af783b6d"},"/v0.50/build/rfc/rfc-001-tx-validation-ed9":{"__comp":"17896441","content":"720ad20e"},"/v0.50/build/rfc/rfc-template-5dd":{"__comp":"17896441","content":"75bf1730"},"/v0.50/build/rfc/rfc/PROCESS-000":{"__comp":"17896441","content":"4d8dd9a8"},"/v0.50/build/rfc/rfc/rfc-001-tx-validation-d04":{"__comp":"17896441","content":"b2be9cbc"},"/v0.50/build/rfc/rfc/rfc-template-fa2":{"__comp":"17896441","content":"c43beea5"},"/v0.50/build/spec-f8f":{"__comp":"17896441","content":"29fcc1f2"},"/v0.50/build/spec/addresses-413":{"__comp":"17896441","content":"91d01330"},"/v0.50/build/spec/addresses/bech32-6e9":{"__comp":"17896441","content":"e03fab52"},"/v0.50/build/spec/SPEC_MODULE-f55":{"__comp":"17896441","content":"e5efc375"},"/v0.50/build/spec/SPEC_STANDARD-c52":{"__comp":"17896441","content":"45513e9b"},"/v0.50/build/spec/store-c97":{"__comp":"17896441","content":"d52f8b87"},"/v0.50/build/spec/store/interblock-cache-494":{"__comp":"17896441","content":"b4aa7845"},"/v0.50/build/tooling-87b":{"__comp":"17896441","content":"41ff7326"},"/v0.50/build/tooling/confix-d85":{"__comp":"17896441","content":"364e68a2"},"/v0.50/build/tooling/cosmovisor-6c9":{"__comp":"17896441","content":"44a406f4"},"/v0.50/build/tooling/hubl-a46":{"__comp":"17896441","content":"ca1d620e"},"/v0.50/build/tooling/protobuf-915":{"__comp":"17896441","content":"22434ef3"},"/v0.50/learn-a75":{"__comp":"17896441","content":"ee072016"},"/v0.50/learn/advanced/autocli-a1b":{"__comp":"17896441","content":"72525ebc"},"/v0.50/learn/advanced/baseapp-b29":{"__comp":"17896441","content":"2ee8c5ed"},"/v0.50/learn/advanced/cli-2c6":{"__comp":"17896441","content":"4248dc0a"},"/v0.50/learn/advanced/config-b71":{"__comp":"17896441","content":"ec94f3a3"},"/v0.50/learn/advanced/context-b09":{"__comp":"17896441","content":"2e53f262"},"/v0.50/learn/advanced/encoding-908":{"__comp":"17896441","content":"79bb1271"},"/v0.50/learn/advanced/events-1fd":{"__comp":"17896441","content":"965eeab1"},"/v0.50/learn/advanced/grpc_rest-461":{"__comp":"17896441","content":"1b76a656"},"/v0.50/learn/advanced/node-e91":{"__comp":"17896441","content":"bd02d8ca"},"/v0.50/learn/advanced/ocap-c8a":{"__comp":"17896441","content":"ec9e455d"},"/v0.50/learn/advanced/proto-docs-731":{"__comp":"17896441","content":"2dfb0e9e"},"/v0.50/learn/advanced/runtx_middleware-bc3":{"__comp":"17896441","content":"43bc2dfe"},"/v0.50/learn/advanced/simulation-4c8":{"__comp":"17896441","content":"c421328a"},"/v0.50/learn/advanced/store-e6d":{"__comp":"17896441","content":"e8b275ac"},"/v0.50/learn/advanced/telemetry-837":{"__comp":"17896441","content":"1b2b88ff"},"/v0.50/learn/advanced/transactions-8e7":{"__comp":"17896441","content":"703d8a16"},"/v0.50/learn/advanced/upgrade-945":{"__comp":"17896441","content":"6e2d5c98"},"/v0.50/learn/beginner/accounts-3ab":{"__comp":"17896441","content":"ac8586da"},"/v0.50/learn/beginner/app-anatomy-359":{"__comp":"17896441","content":"622941ec"},"/v0.50/learn/beginner/gas-fees-c13":{"__comp":"17896441","content":"7d098c8a"},"/v0.50/learn/beginner/query-lifecycle-1ab":{"__comp":"17896441","content":"07ee0384"},"/v0.50/learn/beginner/tx-lifecycle-32e":{"__comp":"17896441","content":"ff5a20ce"},"/v0.50/learn/intro/overview-59c":{"__comp":"17896441","content":"3c403a9f"},"/v0.50/learn/intro/sdk-app-architecture-9a4":{"__comp":"17896441","content":"08506419"},"/v0.50/learn/intro/sdk-design-458":{"__comp":"17896441","content":"dfda44ce"},"/v0.50/learn/intro/why-app-specific-8ed":{"__comp":"17896441","content":"e27ab7e3"},"/v0.50/tutorials-01b":{"__comp":"17896441","content":"720511e2"},"/v0.50/tutorials/transactions/building-a-transaction-91d":{"__comp":"17896441","content":"7d529176"},"/v0.50/tutorials/vote-extensions/auction-frontrunning/demo-of-mitigating-front-running-d13":{"__comp":"17896441","content":"9976d482"},"/v0.50/tutorials/vote-extensions/auction-frontrunning/getting-started-f50":{"__comp":"17896441","content":"711773c0"},"/v0.50/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extensions-886":{"__comp":"17896441","content":"df42e1fd"},"/v0.50/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extesions-f5a":{"__comp":"17896441","content":"2499943b"},"/v0.50/tutorials/vote-extensions/auction-frontrunning/understanding-frontrunning-d15":{"__comp":"17896441","content":"a766e952"},"/v0.50/tutorials/vote-extensions/oracle/getting-started-750":{"__comp":"17896441","content":"57e88db4"},"/v0.50/tutorials/vote-extensions/oracle/implementing-vote-extensions-a6d":{"__comp":"17896441","content":"66fbaafc"},"/v0.50/tutorials/vote-extensions/oracle/testing-oracle-13d":{"__comp":"17896441","content":"a51c401b"},"/v0.50/tutorials/vote-extensions/oracle/what-is-an-oracle-9f5":{"__comp":"17896441","content":"c32c23a6"},"/v0.50/user-aa3":{"__comp":"17896441","content":"5044c110"},"/v0.50/user/run-node/interact-node-786":{"__comp":"17896441","content":"cb9a9bd3"},"/v0.50/user/run-node/keyring-35d":{"__comp":"17896441","content":"ab803b3b"},"/v0.50/user/run-node/rosetta-855":{"__comp":"17896441","content":"619938bb"},"/v0.50/user/run-node/run-node-b29":{"__comp":"17896441","content":"2778a518"},"/v0.50/user/run-node/run-production-baf":{"__comp":"17896441","content":"84699687"},"/v0.50/user/run-node/run-testnet-59c":{"__comp":"17896441","content":"8deb8625"},"/v0.50/user/run-node/txs-5fd":{"__comp":"17896441","content":"6fe77543"},"/v0.53-1fa":{"__comp":"1be78505","__context":{"plugin":"d8d6ec70"},"versionMetadata":"70fcd835"},"/v0.53/build-d26":{"__comp":"17896441","content":"52217fa4"},"/v0.53/build/abci/checktx-30a":{"__comp":"17896441","content":"6bc58058"},"/v0.53/build/abci/introduction-3be":{"__comp":"17896441","content":"d2f21897"},"/v0.53/build/abci/prepare-proposal-c32":{"__comp":"17896441","content":"4f7ce7af"},"/v0.53/build/abci/process-proposal-034":{"__comp":"17896441","content":"198369fb"},"/v0.53/build/abci/vote-extensions-8e1":{"__comp":"17896441","content":"c39883fb"},"/v0.53/build/architecture-9c5":{"__comp":"17896441","content":"66ad2e72"},"/v0.53/build/architecture/adr-002-docs-structure-a7d":{"__comp":"17896441","content":"8ad3a333"},"/v0.53/build/architecture/adr-003-dynamic-capability-store-55d":{"__comp":"17896441","content":"30d0c605"},"/v0.53/build/architecture/adr-004-split-denomination-keys-ba2":{"__comp":"17896441","content":"d6254ce7"},"/v0.53/build/architecture/adr-006-secret-store-replacement-4ed":{"__comp":"17896441","content":"2fb84249"},"/v0.53/build/architecture/adr-007-specialization-groups-d5a":{"__comp":"17896441","content":"870f6f34"},"/v0.53/build/architecture/adr-008-dCERT-group-a2f":{"__comp":"17896441","content":"8a332cda"},"/v0.53/build/architecture/adr-009-evidence-module-d68":{"__comp":"17896441","content":"9d2db5f9"},"/v0.53/build/architecture/adr-010-modular-antehandler-313":{"__comp":"17896441","content":"d46106c3"},"/v0.53/build/architecture/adr-011-generalize-genesis-accounts-041":{"__comp":"17896441","content":"7f3106af"},"/v0.53/build/architecture/adr-012-state-accessors-4e8":{"__comp":"17896441","content":"6cdbb08d"},"/v0.53/build/architecture/adr-013-metrics-c46":{"__comp":"17896441","content":"885ab72d"},"/v0.53/build/architecture/adr-014-proportional-slashing-583":{"__comp":"17896441","content":"127c5454"},"/v0.53/build/architecture/adr-016-validator-consensus-key-rotation-695":{"__comp":"17896441","content":"35e4dee9"},"/v0.53/build/architecture/adr-017-historical-header-module-509":{"__comp":"17896441","content":"5ffd4de5"},"/v0.53/build/architecture/adr-018-extendable-voting-period-fb0":{"__comp":"17896441","content":"4ea68d8b"},"/v0.53/build/architecture/adr-019-protobuf-state-encoding-68a":{"__comp":"17896441","content":"e98a5839"},"/v0.53/build/architecture/adr-020-protobuf-transaction-encoding-1b6":{"__comp":"17896441","content":"e6598356"},"/v0.53/build/architecture/adr-021-protobuf-query-encoding-542":{"__comp":"17896441","content":"2b355c73"},"/v0.53/build/architecture/adr-022-custom-panic-handling-10c":{"__comp":"17896441","content":"94acb703"},"/v0.53/build/architecture/adr-023-protobuf-naming-10a":{"__comp":"17896441","content":"bb7c49ad"},"/v0.53/build/architecture/adr-024-coin-metadata-c2b":{"__comp":"17896441","content":"ab67bbf8"},"/v0.53/build/architecture/adr-027-deterministic-protobuf-serialization-32b":{"__comp":"17896441","content":"bd688a70"},"/v0.53/build/architecture/adr-028-public-key-addresses-619":{"__comp":"17896441","content":"6b26444d"},"/v0.53/build/architecture/adr-029-fee-grant-module-ce5":{"__comp":"17896441","content":"b02c8e40"},"/v0.53/build/architecture/adr-030-authz-module-090":{"__comp":"17896441","content":"f1920bc3"},"/v0.53/build/architecture/adr-031-msg-service-97d":{"__comp":"17896441","content":"ec4352bf"},"/v0.53/build/architecture/adr-032-typed-events-75d":{"__comp":"17896441","content":"34e7b0bf"},"/v0.53/build/architecture/adr-033-protobuf-inter-module-comm-737":{"__comp":"17896441","content":"bdce6a5c"},"/v0.53/build/architecture/adr-034-account-rekeying-ed4":{"__comp":"17896441","content":"94890e05"},"/v0.53/build/architecture/adr-035-rosetta-api-support-811":{"__comp":"17896441","content":"c4165a11"},"/v0.53/build/architecture/adr-036-arbitrary-signature-dba":{"__comp":"17896441","content":"6b9e3bd8"},"/v0.53/build/architecture/adr-037-gov-split-vote-a81":{"__comp":"17896441","content":"fd43fdaf"},"/v0.53/build/architecture/adr-038-state-listening-71c":{"__comp":"17896441","content":"71ff6cc3"},"/v0.53/build/architecture/adr-039-epoched-staking-31b":{"__comp":"17896441","content":"e0269050"},"/v0.53/build/architecture/adr-040-storage-and-smt-state-commitments-f56":{"__comp":"17896441","content":"c1aad233"},"/v0.53/build/architecture/adr-041-in-place-store-migrations-870":{"__comp":"17896441","content":"ad1df3b6"},"/v0.53/build/architecture/adr-042-group-module-eab":{"__comp":"17896441","content":"37c7d766"},"/v0.53/build/architecture/adr-043-nft-module-78d":{"__comp":"17896441","content":"2bc583a8"},"/v0.53/build/architecture/adr-044-protobuf-updates-guidelines-74d":{"__comp":"17896441","content":"2d208a6f"},"/v0.53/build/architecture/adr-045-check-delivertx-middlewares-951":{"__comp":"17896441","content":"a1f45c99"},"/v0.53/build/architecture/adr-046-module-params-806":{"__comp":"17896441","content":"6b94caab"},"/v0.53/build/architecture/adr-047-extend-upgrade-plan-278":{"__comp":"17896441","content":"4913014a"},"/v0.53/build/architecture/adr-048-consensus-fees-dcc":{"__comp":"17896441","content":"ef89f375"},"/v0.53/build/architecture/adr-049-state-sync-hooks-340":{"__comp":"17896441","content":"f49a397a"},"/v0.53/build/architecture/adr-050-sign-mode-textual-2de":{"__comp":"17896441","content":"5ab94d1e"},"/v0.53/build/architecture/adr-050-sign-mode-textual-annex1-942":{"__comp":"17896441","content":"94af328d"},"/v0.53/build/architecture/adr-050-sign-mode-textual-annex2-38d":{"__comp":"17896441","content":"90a7b212"},"/v0.53/build/architecture/adr-053-go-module-refactoring-b63":{"__comp":"17896441","content":"05182693"},"/v0.53/build/architecture/adr-054-semver-compatible-modules-301":{"__comp":"17896441","content":"ee777177"},"/v0.53/build/architecture/adr-055-orm-d45":{"__comp":"17896441","content":"7e7dbe86"},"/v0.53/build/architecture/adr-057-app-wiring-83d":{"__comp":"17896441","content":"73bd573a"},"/v0.53/build/architecture/adr-058-auto-generated-cli-ceb":{"__comp":"17896441","content":"63f3da4a"},"/v0.53/build/architecture/adr-059-test-scopes-2c8":{"__comp":"17896441","content":"a168a626"},"/v0.53/build/architecture/adr-060-abci-1.0-46a":{"__comp":"17896441","content":"1ed1865b"},"/v0.53/build/architecture/adr-061-liquid-staking-dc8":{"__comp":"17896441","content":"28a3d38a"},"/v0.53/build/architecture/adr-062-collections-state-layer-00a":{"__comp":"17896441","content":"1ab4e1e3"},"/v0.53/build/architecture/adr-063-core-module-api-588":{"__comp":"17896441","content":"81524444"},"/v0.53/build/architecture/adr-064-abci-2.0-2f4":{"__comp":"17896441","content":"719f9c5c"},"/v0.53/build/architecture/adr-065-store-v2-108":{"__comp":"17896441","content":"f428dfe8"},"/v0.53/build/architecture/adr-068-preblock-e48":{"__comp":"17896441","content":"6837ca1b"},"/v0.53/build/architecture/adr-070-unordered-account-509":{"__comp":"17896441","content":"6de9af81"},"/v0.53/build/architecture/adr-076-tx-malleability-fd7":{"__comp":"17896441","content":"4c7bad0e"},"/v0.53/build/architecture/adr-template-506":{"__comp":"17896441","content":"5c3b81f5"},"/v0.53/build/architecture/PROCESS-0d2":{"__comp":"17896441","content":"88878c16"},"/v0.53/build/building-apps/app-go-1c2":{"__comp":"17896441","content":"fcb57529"},"/v0.53/build/building-apps/app-go-di-1fd":{"__comp":"17896441","content":"1cda9c90"},"/v0.53/build/building-apps/app-mempool-f74":{"__comp":"17896441","content":"c0908fe0"},"/v0.53/build/building-apps/app-testnet-169":{"__comp":"17896441","content":"f6dc56a3"},"/v0.53/build/building-apps/app-upgrade-155":{"__comp":"17896441","content":"4a2359b5"},"/v0.53/build/building-apps/runtime-bde":{"__comp":"17896441","content":"12849d7c"},"/v0.53/build/building-apps/vote-extensions-fe9":{"__comp":"17896441","content":"9f3b3901"},"/v0.53/build/building-modules/beginblock-endblock-2eb":{"__comp":"17896441","content":"c9ce5ce7"},"/v0.53/build/building-modules/depinject-9b0":{"__comp":"17896441","content":"71ae73e2"},"/v0.53/build/building-modules/errors-a8e":{"__comp":"17896441","content":"ba7c68e4"},"/v0.53/build/building-modules/genesis-937":{"__comp":"17896441","content":"2a14d6ba"},"/v0.53/build/building-modules/intro-d9d":{"__comp":"17896441","content":"9835dfb7"},"/v0.53/build/building-modules/invariants-418":{"__comp":"17896441","content":"450d5631"},"/v0.53/build/building-modules/keeper-666":{"__comp":"17896441","content":"9643d5ec"},"/v0.53/build/building-modules/messages-and-queries-cd1":{"__comp":"17896441","content":"9c090034"},"/v0.53/build/building-modules/module-interfaces-1c1":{"__comp":"17896441","content":"169fed90"},"/v0.53/build/building-modules/module-manager-98b":{"__comp":"17896441","content":"063835dd"},"/v0.53/build/building-modules/msg-services-313":{"__comp":"17896441","content":"fa579922"},"/v0.53/build/building-modules/preblock-d67":{"__comp":"17896441","content":"85808305"},"/v0.53/build/building-modules/protobuf-annotations-383":{"__comp":"17896441","content":"fe368fa9"},"/v0.53/build/building-modules/query-services-bf4":{"__comp":"17896441","content":"952f5852"},"/v0.53/build/building-modules/simulator-94d":{"__comp":"17896441","content":"0a77e0df"},"/v0.53/build/building-modules/structure-3c8":{"__comp":"17896441","content":"aa666ede"},"/v0.53/build/building-modules/testing-02b":{"__comp":"17896441","content":"b4c09052"},"/v0.53/build/building-modules/upgrade-427":{"__comp":"17896441","content":"c053703f"},"/v0.53/build/migrations/intro-589":{"__comp":"17896441","content":"ab4f1707"},"/v0.53/build/migrations/upgrade-guide-9ad":{"__comp":"17896441","content":"0d111487"},"/v0.53/build/migrations/upgrade-reference-c1a":{"__comp":"17896441","content":"403dca60"},"/v0.53/build/modules-cf7":{"__comp":"17896441","content":"fc4ba4be"},"/v0.53/build/modules/auth-9c2":{"__comp":"17896441","content":"88483576"},"/v0.53/build/modules/auth/tx-97c":{"__comp":"17896441","content":"2d6532c6"},"/v0.53/build/modules/auth/vesting-07b":{"__comp":"17896441","content":"79983a0b"},"/v0.53/build/modules/authz-9fa":{"__comp":"17896441","content":"a2fe3bf9"},"/v0.53/build/modules/bank-a3d":{"__comp":"17896441","content":"2f5cfd7a"},"/v0.53/build/modules/circuit-7e2":{"__comp":"17896441","content":"8dfd40e4"},"/v0.53/build/modules/consensus-dc9":{"__comp":"17896441","content":"8625e22a"},"/v0.53/build/modules/crisis-774":{"__comp":"17896441","content":"5eeaeddb"},"/v0.53/build/modules/distribution-23f":{"__comp":"17896441","content":"f3f1fbd1"},"/v0.53/build/modules/epochs-883":{"__comp":"17896441","content":"516a4b2c"},"/v0.53/build/modules/evidence-0d3":{"__comp":"17896441","content":"44d8106f"},"/v0.53/build/modules/feegrant-3e4":{"__comp":"17896441","content":"c7b19931"},"/v0.53/build/modules/genutil-93b":{"__comp":"17896441","content":"aeebfd70"},"/v0.53/build/modules/gov-90b":{"__comp":"17896441","content":"8db4fe50"},"/v0.53/build/modules/group-0b1":{"__comp":"17896441","content":"f1bf2944"},"/v0.53/build/modules/mint-3a9":{"__comp":"17896441","content":"773581e1"},"/v0.53/build/modules/nft-e4d":{"__comp":"17896441","content":"73896aaa"},"/v0.53/build/modules/params-38e":{"__comp":"17896441","content":"77b1914a"},"/v0.53/build/modules/protocolpool-a11":{"__comp":"17896441","content":"075feee6"},"/v0.53/build/modules/slashing-531":{"__comp":"17896441","content":"83b7b25d"},"/v0.53/build/modules/staking-93d":{"__comp":"17896441","content":"13654927"},"/v0.53/build/modules/upgrade-188":{"__comp":"17896441","content":"f5d1b79c"},"/v0.53/build/packages-3a5":{"__comp":"17896441","content":"35eee8a0"},"/v0.53/build/packages/collections-f11":{"__comp":"17896441","content":"d9a7b911"},"/v0.53/build/packages/depinject-18a":{"__comp":"17896441","content":"df3a1073"},"/v0.53/build/rfc-2e0":{"__comp":"17896441","content":"66a76e31"},"/v0.53/build/rfc/PROCESS-bbc":{"__comp":"17896441","content":"992ec6a3"},"/v0.53/build/rfc/rfc-001-tx-validation-80e":{"__comp":"17896441","content":"14c4aba6"},"/v0.53/build/rfc/rfc-template-218":{"__comp":"17896441","content":"cd7562fe"},"/v0.53/build/spec-1de":{"__comp":"17896441","content":"0cfc3159"},"/v0.53/build/spec/addresses-361":{"__comp":"17896441","content":"15ffef81"},"/v0.53/build/spec/addresses/bech32-dd3":{"__comp":"17896441","content":"e6301efa"},"/v0.53/build/spec/SPEC_MODULE-5c1":{"__comp":"17896441","content":"9f0e9619"},"/v0.53/build/spec/SPEC_STANDARD-15a":{"__comp":"17896441","content":"23283340"},"/v0.53/build/spec/store-9ff":{"__comp":"17896441","content":"479e1419"},"/v0.53/build/spec/store/interblock-cache-05a":{"__comp":"17896441","content":"77e5713b"},"/v0.53/build/tooling-c19":{"__comp":"17896441","content":"5d03e6ee"},"/v0.53/build/tooling/confix-f77":{"__comp":"17896441","content":"6e65aa34"},"/v0.53/build/tooling/cosmovisor-d76":{"__comp":"17896441","content":"3e202107"},"/v0.53/build/tooling/protobuf-753":{"__comp":"17896441","content":"fa1fd756"},"/v0.53/learn-950":{"__comp":"17896441","content":"7b69d9e0"},"/v0.53/learn/advanced/autocli-b4d":{"__comp":"17896441","content":"5927e3c4"},"/v0.53/learn/advanced/baseapp-cca":{"__comp":"17896441","content":"90c75a55"},"/v0.53/learn/advanced/cli-2e4":{"__comp":"17896441","content":"1a3046f1"},"/v0.53/learn/advanced/config-e08":{"__comp":"17896441","content":"df6b7c98"},"/v0.53/learn/advanced/context-d4c":{"__comp":"17896441","content":"b9ee742f"},"/v0.53/learn/advanced/encoding-63d":{"__comp":"17896441","content":"fe44ecef"},"/v0.53/learn/advanced/events-908":{"__comp":"17896441","content":"c8f425bc"},"/v0.53/learn/advanced/grpc_rest-63b":{"__comp":"17896441","content":"2c698b59"},"/v0.53/learn/advanced/node-dea":{"__comp":"17896441","content":"c8b6be50"},"/v0.53/learn/advanced/ocap-d63":{"__comp":"17896441","content":"003ae6ae"},"/v0.53/learn/advanced/proto-docs-b2e":{"__comp":"17896441","content":"85d57d39"},"/v0.53/learn/advanced/runtx_middleware-17d":{"__comp":"17896441","content":"e979dc78"},"/v0.53/learn/advanced/simulation-c07":{"__comp":"17896441","content":"bb79a37e"},"/v0.53/learn/advanced/store-4e6":{"__comp":"17896441","content":"764868ce"},"/v0.53/learn/advanced/telemetry-4a6":{"__comp":"17896441","content":"f5104fe8"},"/v0.53/learn/advanced/transactions-e46":{"__comp":"17896441","content":"bbf368f6"},"/v0.53/learn/advanced/upgrade-530":{"__comp":"17896441","content":"c125ba43"},"/v0.53/learn/beginner/accounts-e7a":{"__comp":"17896441","content":"943b9719"},"/v0.53/learn/beginner/app-anatomy-4de":{"__comp":"17896441","content":"a9b308bd"},"/v0.53/learn/beginner/gas-fees-2b1":{"__comp":"17896441","content":"8805dc4c"},"/v0.53/learn/beginner/query-lifecycle-d86":{"__comp":"17896441","content":"63e55733"},"/v0.53/learn/beginner/tx-lifecycle-bd8":{"__comp":"17896441","content":"c0474b3e"},"/v0.53/learn/intro/overview-27c":{"__comp":"17896441","content":"7a7877f9"},"/v0.53/learn/intro/sdk-app-architecture-183":{"__comp":"17896441","content":"12bc1ffc"},"/v0.53/learn/intro/sdk-design-6ae":{"__comp":"17896441","content":"a66af16e"},"/v0.53/learn/intro/why-app-specific-fb7":{"__comp":"17896441","content":"f54d912d"},"/v0.53/tutorials-e36":{"__comp":"17896441","content":"0aaa5dc7"},"/v0.53/tutorials/transactions/building-a-transaction-48b":{"__comp":"17896441","content":"2fe9e9eb"},"/v0.53/tutorials/vote-extensions/auction-frontrunning/demo-of-mitigating-front-running-8be":{"__comp":"17896441","content":"bd6e742f"},"/v0.53/tutorials/vote-extensions/auction-frontrunning/getting-started-d3d":{"__comp":"17896441","content":"1da12abe"},"/v0.53/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extensions-22d":{"__comp":"17896441","content":"7aa285c0"},"/v0.53/tutorials/vote-extensions/auction-frontrunning/mitigating-front-running-with-vote-extesions-7ea":{"__comp":"17896441","content":"8870dc19"},"/v0.53/tutorials/vote-extensions/auction-frontrunning/understanding-frontrunning-323":{"__comp":"17896441","content":"d6fe5434"},"/v0.53/tutorials/vote-extensions/oracle/getting-started-4d8":{"__comp":"17896441","content":"68f99022"},"/v0.53/tutorials/vote-extensions/oracle/implementing-vote-extensions-87e":{"__comp":"17896441","content":"0dcf805e"},"/v0.53/tutorials/vote-extensions/oracle/testing-oracle-c94":{"__comp":"17896441","content":"e2907bf7"},"/v0.53/tutorials/vote-extensions/oracle/what-is-an-oracle-df3":{"__comp":"17896441","content":"42f563c6"},"/v0.53/user-d5c":{"__comp":"17896441","content":"8019da80"},"/v0.53/user/run-node/interact-node-4cd":{"__comp":"17896441","content":"673583c0"},"/v0.53/user/run-node/keyring-cd1":{"__comp":"17896441","content":"16f39cc9"},"/v0.53/user/run-node/run-node-14d":{"__comp":"17896441","content":"dd37c6e0"},"/v0.53/user/run-node/run-production-a97":{"__comp":"17896441","content":"70ac12d3"},"/v0.53/user/run-node/run-testnet-7e0":{"__comp":"17896441","content":"d6c9afc4"},"/v0.53/user/run-node/txs-3fd":{"__comp":"17896441","content":"5343d3ef"},"/-10b":{"__comp":"c4f5d8e4","__context":{"plugin":"82381013"},"config":"5e9f5e1a"}}')}},e=>{e.O(0,[40532],(()=>{return t=49383,e(e.s=t);var t}));e.O()}]);