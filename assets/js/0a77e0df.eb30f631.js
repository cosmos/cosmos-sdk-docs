"use strict";(self.webpackChunkcosmos_sdk_docs=self.webpackChunkcosmos_sdk_docs||[]).push([[82434],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=m(n),c=i,g=u["".concat(l,".").concat(c)]||u[c]||d[c]||o;return n?a.createElement(g,s(s({ref:t},p),{},{components:n})):a.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=c;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[u]="string"==typeof e?e:i,s[1]=r;for(var m=2;m<o;m++)s[m]=n[m];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3088:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>m});var a=n(87462),i=(n(67294),n(3905));const o={sidebar_position:1},s="Module Simulation",r={unversionedId:"build/building-modules/simulator",id:"version-0.53/build/building-modules/simulator",title:"Module Simulation",description:"* Cosmos Blockchain Simulator",source:"@site/versioned_docs/version-0.53/build/building-modules/14-simulator.md",sourceDirName:"build/building-modules",slug:"/build/building-modules/simulator",permalink:"/v0.53/build/building-modules/simulator",draft:!1,tags:[],version:"0.53",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"buildSidebar",previous:{title:"Upgrading Modules",permalink:"/v0.53/build/building-modules/upgrade"},next:{title:"Modules depinject-ready",permalink:"/v0.53/build/building-modules/depinject"}},l={},m=[{value:"Synopsis",id:"synopsis",level:2},{value:"Simulation Package",id:"simulation-package",level:2},{value:"Simulation App Module",id:"simulation-app-module",level:2},{value:"SimsX",id:"simsx",level:2},{value:"Example Implementations",id:"example-implementations",level:3},{value:"Store decoders",id:"store-decoders",level:2},{value:"Randomized genesis",id:"randomized-genesis",level:2},{value:"Random weighted operations",id:"random-weighted-operations",level:2},{value:"Using Simsx",id:"using-simsx",level:3},{value:"App Simulator manager",id:"app-simulator-manager",level:2},{value:"Running Simulations",id:"running-simulations",level:2}],p={toc:m},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"module-simulation"},"Module Simulation"),(0,i.kt)("admonition",{title:"Pre-requisite Readings",type:"note"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/v0.53/learn/advanced/simulation"},"Cosmos Blockchain Simulator")))),(0,i.kt)("h2",{id:"synopsis"},"Synopsis"),(0,i.kt)("p",null,"This document guides developers on integrating their custom modules with the Cosmos SDK ",(0,i.kt)("inlineCode",{parentName:"p"},"Simulations"),".\nSimulations are useful for testing edge cases in module implementations."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#simulation-package"},"Simulation Package")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#simulation-app-module"},"Simulation App Module")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#simsx"},"SimsX"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#example-implementations"},"Example Implementations")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#store-decoders"},"Store decoders")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#randomized-genesis"},"Randomized genesis")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#random-weighted-operations"},"Random weighted operations"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#using-simsx"},"Using Simsx")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#app-simulator-manager"},"App Simulator manager")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#running-simulations"},"Running Simulations"))),(0,i.kt)("h2",{id:"simulation-package"},"Simulation Package"),(0,i.kt)("p",null,"The Cosmos SDK suggests organizing your simulation related code in a ",(0,i.kt)("inlineCode",{parentName:"p"},"x/<module>/simulation")," package."),(0,i.kt)("h2",{id:"simulation-app-module"},"Simulation App Module"),(0,i.kt)("p",null,"To integrate with the Cosmos SDK ",(0,i.kt)("inlineCode",{parentName:"p"},"SimulationManager"),", app modules must implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"AppModuleSimulation")," interface."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/3c6deab626648e47de752c33dac5d06af83e3ee3/types/module/simulation.go#L16-L27\n")),(0,i.kt)("p",null,"See an example implementation of these methods from ",(0,i.kt)("inlineCode",{parentName:"p"},"x/distribution")," ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/b55b9e14fb792cc8075effb373be9d26327fddea/x/distribution/module.go#L170-L194"},"here"),"."),(0,i.kt)("h2",{id:"simsx"},"SimsX"),(0,i.kt)("p",null,"Cosmos SDK v0.53.0 introduced a new package, ",(0,i.kt)("inlineCode",{parentName:"p"},"simsx"),", providing improved DevX for writing simulation code."),(0,i.kt)("p",null,"It exposes the following extension interfaces that modules may implement to integrate with the new ",(0,i.kt)("inlineCode",{parentName:"p"},"simsx")," runner."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/main/testutil/simsx/runner.go#L223-L234\n")),(0,i.kt)("p",null,"These methods allow constructing randomized messages and/or proposal messages."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Note that modules should ",(0,i.kt)("strong",{parentName:"p"},"not")," implement both ",(0,i.kt)("inlineCode",{parentName:"p"},"HasWeightedOperationsX")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"HasWeightedOperationsXWithProposals"),".\nSee the runner code ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/main/testutil/simsx/runner.go#L330-L339"},"here")," for details"),(0,i.kt)("p",{parentName:"admonition"},"If the module does ",(0,i.kt)("strong",{parentName:"p"},"not")," have message handlers or governance proposal handlers, these interface methods do ",(0,i.kt)("strong",{parentName:"p"},"not")," need to be implemented.")),(0,i.kt)("h3",{id:"example-implementations"},"Example Implementations"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"HasWeightedOperationsXWithProposals"),": ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/module.go#L242-L261"},"x/gov")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"HasWeightedOperationsX"),": ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/cosmos/cosmos-sdk/blob/main/x/bank/module.go#L199-L203"},"x/bank")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"HasProposalMsgsX"),": ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/cosmos/cosmos-sdk/blob/main/x/bank/module.go#L194-L197"},"x/bank"))),(0,i.kt)("h2",{id:"store-decoders"},"Store decoders"),(0,i.kt)("p",null,"Registering the store decoders is required for the ",(0,i.kt)("inlineCode",{parentName:"p"},"AppImportExport")," simulation. This allows\nfor the key-value pairs from the stores to be decoded to their corresponding types.\nIn particular, it matches the key to a concrete type and then unmarshalls the value from the ",(0,i.kt)("inlineCode",{parentName:"p"},"KVPair")," to the type provided."),(0,i.kt)("p",null,"Modules using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/main/collections/README.md"},"collections")," can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"NewStoreDecoderFuncFromCollectionsSchema")," function that builds the decoder for you:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/main/x/bank/module.go#L181-L184\n")),(0,i.kt)("p",null,"Modules not using collections must manually build the store decoder.\nSee the implementation ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/simulation/decoder.go"},"here")," from the distribution module for an example."),(0,i.kt)("h2",{id:"randomized-genesis"},"Randomized genesis"),(0,i.kt)("p",null,"The simulator tests different scenarios and values for genesis parameters.\nApp modules must implement a ",(0,i.kt)("inlineCode",{parentName:"p"},"GenerateGenesisState")," method to generate the initial random ",(0,i.kt)("inlineCode",{parentName:"p"},"GenesisState")," from a given seed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/main/types/module/simulation.go#L20\n")),(0,i.kt)("p",null,"See an example from ",(0,i.kt)("inlineCode",{parentName:"p"},"x/auth")," ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/module.go#L169-L172"},"here"),"."),(0,i.kt)("p",null,"Once the module's genesis parameters are generated randomly (or with the key and\nvalues defined in a ",(0,i.kt)("inlineCode",{parentName:"p"},"params")," file), they are marshaled to JSON format and added\nto the app genesis JSON for the simulation."),(0,i.kt)("h2",{id:"random-weighted-operations"},"Random weighted operations"),(0,i.kt)("p",null,"Operations are one of the crucial parts of the Cosmos SDK simulation. They are the transactions\n(",(0,i.kt)("inlineCode",{parentName:"p"},"Msg"),") that are simulated with random field values. The sender of the operation\nis also assigned randomly."),(0,i.kt)("p",null,"Operations on the simulation are simulated using the full ",(0,i.kt)("a",{parentName:"p",href:"/v0.53/learn/advanced/transactions"},"transaction cycle")," of a\n",(0,i.kt)("inlineCode",{parentName:"p"},"ABCI")," application that exposes the ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseApp"),"."),(0,i.kt)("h3",{id:"using-simsx"},"Using Simsx"),(0,i.kt)("p",null,"Simsx introduces the ability to define a ",(0,i.kt)("inlineCode",{parentName:"p"},"MsgFactory")," for each of a module's messages."),(0,i.kt)("p",null,"These factories are registered in ",(0,i.kt)("inlineCode",{parentName:"p"},"WeightedOperationsX")," and/or ",(0,i.kt)("inlineCode",{parentName:"p"},"ProposalMsgsX"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/module.go#L196-L206\n")),(0,i.kt)("p",null,"Note that the name passed in to ",(0,i.kt)("inlineCode",{parentName:"p"},"weights.Get")," must match the name of the operation set in the ",(0,i.kt)("inlineCode",{parentName:"p"},"WeightedOperations"),"."),(0,i.kt)("p",null,"For example, if the module contains an operation ",(0,i.kt)("inlineCode",{parentName:"p"},"op_weight_msg_set_withdraw_address"),", the name passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"weights.Get")," should be ",(0,i.kt)("inlineCode",{parentName:"p"},"msg_set_withdraw_address"),"."),(0,i.kt)("p",null,"See the ",(0,i.kt)("inlineCode",{parentName:"p"},"x/distribution")," for an example of implementing message factories ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/main/x/distribution/simulation/msg_factory.go"},"here")),(0,i.kt)("h2",{id:"app-simulator-manager"},"App Simulator manager"),(0,i.kt)("p",null,"The following step is setting up the ",(0,i.kt)("inlineCode",{parentName:"p"},"SimulatorManager")," at the app level. This\nis required for the simulation test files in the next step."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"type CoolApp struct {\n...\nsm *module.SimulationManager\n}\n")),(0,i.kt)("p",null,"Within the constructor of the application, construct the simulation manager using the modules from ",(0,i.kt)("inlineCode",{parentName:"p"},"ModuleManager")," and call the ",(0,i.kt)("inlineCode",{parentName:"p"},"RegisterStoreDecoders")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/main/simapp/app.go#L650-L660\n")),(0,i.kt)("p",null,"Note that you may override some modules.\nThis is useful if the existing module configuration in the ",(0,i.kt)("inlineCode",{parentName:"p"},"ModuleManager")," should be different in the ",(0,i.kt)("inlineCode",{parentName:"p"},"SimulationManager"),"."),(0,i.kt)("p",null,"Finally, the application should expose the ",(0,i.kt)("inlineCode",{parentName:"p"},"SimulationManager")," via the following method defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Runtime")," interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"// SimulationManager implements the SimulationApp interface\nfunc (app *SimApp) SimulationManager() *module.SimulationManager {\nreturn app.sm\n}\n")),(0,i.kt)("h2",{id:"running-simulations"},"Running Simulations"),(0,i.kt)("p",null,"To run the simulation, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"simsx")," runner."),(0,i.kt)("p",null,"Call the following function from the ",(0,i.kt)("inlineCode",{parentName:"p"},"simsx")," package to begin simulating with a default seed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/main/testutil/simsx/runner.go#L69-L88\n")),(0,i.kt)("p",null,"If a custom seed is desired, tests should use ",(0,i.kt)("inlineCode",{parentName:"p"},"RunWithSeed"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/b55b9e14fb792cc8075effb373be9d26327fddea/testutil/simsx/runner.go#L151-L168\n")),(0,i.kt)("p",null,"These functions should be called in tests (i.e., app_test.go, app_sim_test.go, etc.)"),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/main/simapp/sim_test.go#L53-L65\n")))}d.isMDXComponent=!0}}]);