"use strict";(self.webpackChunkcosmos_sdk_docs=self.webpackChunkcosmos_sdk_docs||[]).push([[94791],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(r),m=i,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5466:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var n=r(87462),i=(r(67294),r(3905));const a={sidebar_position:1},o="Query Services",s={unversionedId:"build/building-modules/query-services",id:"version-0.47/build/building-modules/query-services",title:"Query Services",description:"A Protobuf Query service processes queries. Query services are specific to the module in which they are defined, and only process queries defined within said module. They are called from BaseApp's Query method.",source:"@site/versioned_docs/version-0.47/build/building-modules/04-query-services.md",sourceDirName:"build/building-modules",slug:"/build/building-modules/query-services",permalink:"/v0.47/build/building-modules/query-services",draft:!1,tags:[],version:"0.47",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"buildSidebar",previous:{title:"Msg Services",permalink:"/v0.47/build/building-modules/msg-services"},next:{title:"BeginBlocker and EndBlocker",permalink:"/v0.47/build/building-modules/beginblock-endblock"}},l={},u=[{value:"Implementation of a module query service",id:"implementation-of-a-module-query-service",level:2},{value:"gRPC Service",id:"grpc-service",level:3},{value:"Calling queries from the State Machine",id:"calling-queries-from-the-state-machine",level:3}],c={toc:u},d="wrapper";function p(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"query-services"},"Query Services"),(0,i.kt)("admonition",{title:"Synopsis",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"A Protobuf Query service processes ",(0,i.kt)("a",{parentName:"p",href:"/v0.47/build/building-modules/messages-and-queries#queries"},(0,i.kt)("inlineCode",{parentName:"a"},"queries")),". Query services are specific to the module in which they are defined, and only process ",(0,i.kt)("inlineCode",{parentName:"p"},"queries")," defined within said module. They are called from ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseApp"),"'s ",(0,i.kt)("a",{parentName:"p",href:"/v0.47/learn/advanced/baseapp#query"},(0,i.kt)("inlineCode",{parentName:"a"},"Query")," method"),".")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("h3",{parentName:"admonition",id:"pre-requisite-readings"},"Pre-requisite Readings"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/v0.47/build/building-modules/module-manager"},"Module Manager")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/v0.47/build/building-modules/messages-and-queries"},"Messages and Queries")))),(0,i.kt)("h2",{id:"implementation-of-a-module-query-service"},"Implementation of a module query service"),(0,i.kt)("h3",{id:"grpc-service"},"gRPC Service"),(0,i.kt)("p",null,"When defining a Protobuf ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," service, a ",(0,i.kt)("inlineCode",{parentName:"p"},"QueryServer")," interface is generated for each module with all the service methods:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"type QueryServer interface {\n    QueryBalance(context.Context, *QueryBalanceParams) (*types.Coin, error)\n    QueryAllBalances(context.Context, *QueryAllBalancesParams) (*QueryAllBalancesResponse, error)\n}\n")),(0,i.kt)("p",null,"These custom queries methods should be implemented by a module's keeper, typically in ",(0,i.kt)("inlineCode",{parentName:"p"},"./keeper/grpc_query.go"),". The first parameter of these methods is a generic ",(0,i.kt)("inlineCode",{parentName:"p"},"context.Context"),". Therefore, the Cosmos SDK provides a function ",(0,i.kt)("inlineCode",{parentName:"p"},"sdk.UnwrapSDKContext")," to retrieve the ",(0,i.kt)("inlineCode",{parentName:"p"},"sdk.Context")," from the provided\n",(0,i.kt)("inlineCode",{parentName:"p"},"context.Context"),"."),(0,i.kt)("p",null,"Here's an example implementation for the bank module:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/x/bank/keeper/grpc_query.go\n")),(0,i.kt)("h3",{id:"calling-queries-from-the-state-machine"},"Calling queries from the State Machine"),(0,i.kt)("p",null,"The Cosmos SDK v0.47 introduces a new ",(0,i.kt)("inlineCode",{parentName:"p"},"cosmos.query.v1.module_query_safe")," Protobuf annotation which is used to state that a query that is safe to be called from within the state machine, for example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a Keeper's query function can be called from another module's Keeper,"),(0,i.kt)("li",{parentName:"ul"},"ADR-033 intermodule query calls,"),(0,i.kt)("li",{parentName:"ul"},"CosmWasm contracts can also directly interact with these queries.")),(0,i.kt)("p",null,"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"module_query_safe")," annotation set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", it means:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The query is deterministic: given a block height it will return the same response upon multiple calls, and doesn't introduce any state-machine breaking changes across SDK patch versions."),(0,i.kt)("li",{parentName:"ul"},"Gas consumption never fluctuates across calls and across patch versions.")),(0,i.kt)("p",null,"If you are a module developer and want to use ",(0,i.kt)("inlineCode",{parentName:"p"},"module_query_safe")," annotation for your own query, you have to ensure the following things:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the query is deterministic and won't introduce state-machine-breaking changes without coordinated upgrades"),(0,i.kt)("li",{parentName:"ul"},"it has its gas tracked, to avoid the attack vector where no gas is accounted for\non potentially high-computation queries.")))}p.isMDXComponent=!0}}]);