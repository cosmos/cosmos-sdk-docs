"use strict";(self.webpackChunkcosmos_sdk_docs=self.webpackChunkcosmos_sdk_docs||[]).push([[63089],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>p});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(t),m=o,p=u["".concat(i,".").concat(m)]||u[m]||g[m]||a;return t?r.createElement(p,c(c({ref:n},d),{},{components:t})):r.createElement(p,c({ref:n},d))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=m;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[u]="string"==typeof e?e:o,c[1]=s;for(var l=2;l<a;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},15177:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(87462),o=(t(67294),t(3905));const a={},c="Building a Transaction",s={unversionedId:"tutorials/transactions/building-a-transaction",id:"version-0.53/tutorials/transactions/building-a-transaction",title:"Building a Transaction",description:"These are the steps to build, sign and broadcast a transaction using v2 semantics.",source:"@site/versioned_docs/version-0.53/tutorials/transactions/00-building-a-transaction.md",sourceDirName:"tutorials/transactions",slug:"/tutorials/transactions/building-a-transaction",permalink:"/v0.53/tutorials/transactions/building-a-transaction",draft:!1,tags:[],version:"0.53",sidebarPosition:0,frontMatter:{},sidebar:"tutorialsSidebar",previous:{title:"Testing the Oracle Module",permalink:"/v0.53/tutorials/vote-extensions/oracle/testing-oracle"}},i={},l=[],d={toc:l},u="wrapper";function g(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"building-a-transaction"},"Building a Transaction"),(0,o.kt)("p",null,"These are the steps to build, sign and broadcast a transaction using v2 semantics."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Correctly set up imports")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "context"\n    "fmt"\n    "log"\n\n    "google.golang.org/grpc"\n    "google.golang.org/grpc/credentials/insecure"\n\n    apisigning "cosmossdk.io/api/cosmos/tx/signing/v1beta1"\n    "cosmossdk.io/client/v2/broadcast/comet"\n    "cosmossdk.io/client/v2/tx"\n    "cosmossdk.io/core/transaction"\n    "cosmossdk.io/math"\n    banktypes "cosmossdk.io/x/bank/types"\n    codectypes "github.com/cosmos/cosmos-sdk/codec/types"\n    cryptocodec "github.com/cosmos/cosmos-sdk/crypto/codec"\n    "github.com/cosmos/cosmos-sdk/crypto/keyring"\n    authtypes "github.com/cosmos/cosmos-sdk/x/auth/types"\n\n    "github.com/cosmos/cosmos-sdk/codec"\n    addrcodec "github.com/cosmos/cosmos-sdk/codec/address"\n    sdk "github.com/cosmos/cosmos-sdk/types"\n)\n\n')),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Create a gRPC connection")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'clientConn, err := grpc.NewClient("127.0.0.1:9090", grpc.WithTransportCredentials(insecure.NewCredentials()))\nif err != nil {\n    log.Fatal(err)\n}\n')),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Setup codec and interface registry")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"    // Setup interface registry and register necessary interfaces\n    interfaceRegistry := codectypes.NewInterfaceRegistry()\n    banktypes.RegisterInterfaces(interfaceRegistry)\n    authtypes.RegisterInterfaces(interfaceRegistry)\n    cryptocodec.RegisterInterfaces(interfaceRegistry)\n\n    // Create a ProtoCodec for encoding/decoding\n    protoCodec := codec.NewProtoCodec(interfaceRegistry)\n\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Initialize keyring")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'\n    ckr, err := keyring.New("autoclikeyring", "test", home, nil, protoCodec)\n    if err != nil {\n        log.Fatal("error creating keyring", err)\n    }\n    kr, err := keyring.NewAutoCLIKeyring(ckr, addrcodec.NewBech32Codec("cosmos"))\n    if err != nil {\n        log.Fatal("error creating auto cli keyring", err)\n    }\n\n\n')),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"Setup transaction parameters")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'\n    // Setup transaction parameters\n    txParams := tx.TxParameters{\n        ChainID:  "simapp-v2-chain",\n        SignMode: apisigning.SignMode_SIGN_MODE_DIRECT,\n        AccountConfig: tx.AccountConfig{\n            FromAddress: "cosmos1t0fmn0lyp2v99ga55mm37mpnqrlnc4xcs2hhhy",\n            FromName:    "alice",\n        },\n    }\n\n    // Configure gas settings\n    gasConfig, err := tx.NewGasConfig(100, 100, "0stake")\n    if err != nil {\n        log.Fatal("error creating gas config: ", err)\n    }\n    txParams.GasConfig = gasConfig\n\n    // Create auth query client\n    authClient := authtypes.NewQueryClient(clientConn)\n\n    // Retrieve account information for the sender\n    fromAccount, err := getAccount("cosmos1t0fmn0lyp2v99ga55mm37mpnqrlnc4xcs2hhhy", authClient, protoCodec)\n    if err != nil {\n        log.Fatal("error getting from account: ", err)\n    }\n\n    // Update txParams with the correct account number and sequence\n    txParams.AccountConfig.AccountNumber = fromAccount.GetAccountNumber()\n    txParams.AccountConfig.Sequence = fromAccount.GetSequence()\n\n    // Retrieve account information for the recipient\n    toAccount, err := getAccount("cosmos1e2wanzh89mlwct7cs7eumxf7mrh5m3ykpsh66m", authClient, protoCodec)\n    if err != nil {\n        log.Fatal("error getting to account: ", err)\n    }\n\n    // Configure transaction settings\n    txConf, _ := tx.NewTxConfig(tx.ConfigOptions{\n        AddressCodec:          addrcodec.NewBech32Codec("cosmos"),\n        Cdc:                   protoCodec,\n        ValidatorAddressCodec: addrcodec.NewBech32Codec("cosmosval"),\n        EnabledSignModes:      []apisigning.SignMode{apisigning.SignMode_SIGN_MODE_DIRECT},\n    })\n')),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},"Build the transaction")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'// Create a transaction factory\n    f, err := tx.NewFactory(kr, codec.NewProtoCodec(codectypes.NewInterfaceRegistry()), nil, txConf, addrcodec.NewBech32Codec("cosmos"), clientConn, txParams)\n    if err != nil {\n        log.Fatal("error creating factory", err)\n    }\n\n    // Define the transaction message\n    msgs := []transaction.Msg{\n        &banktypes.MsgSend{\n            FromAddress: fromAccount.GetAddress().String(),\n            ToAddress:   toAccount.GetAddress().String(),\n            Amount: sdk.Coins{\n                sdk.NewCoin("stake", math.NewInt(1000000)),\n            },\n        },\n    }\n\n    // Build and sign the transaction\n    tx, err := f.BuildsSignedTx(context.Background(), msgs...)\n    if err != nil {\n        log.Fatal("error building signed tx", err)\n    }\n\n\n')),(0,o.kt)("ol",{start:7},(0,o.kt)("li",{parentName:"ol"},"Broadcast the transaction")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'// Create a broadcaster for the transaction\n    c, err := comet.NewCometBFTBroadcaster("http://127.0.0.1:26657", comet.BroadcastSync, protoCodec)\n    if err != nil {\n        log.Fatal("error creating comet broadcaster", err)\n    }\n\n    // Broadcast the transaction\n    res, err := c.Broadcast(context.Background(), tx.Bytes())\n    if err != nil {\n        log.Fatal("error broadcasting tx", err)\n    }\n\n')),(0,o.kt)("ol",{start:8},(0,o.kt)("li",{parentName:"ol"},"Helpers")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'// getAccount retrieves account information using the provided address\nfunc getAccount(address string, authClient authtypes.QueryClient, codec codec.Codec) (sdk.AccountI, error) {\n    // Query account info\n    accountQuery, err := authClient.Account(context.Background(), &authtypes.QueryAccountRequest{\n        Address: string(address),\n    })\n    if err != nil {\n        return nil, fmt.Errorf("error getting account: %w", err)\n    }\n\n    // Unpack the account information\n    var account sdk.AccountI\n    err = codec.InterfaceRegistry().UnpackAny(accountQuery.Account, &account)\n    if err != nil {\n        return nil, fmt.Errorf("error unpacking account: %w", err)\n    }\n\n    return account, nil\n}\n')))}g.isMDXComponent=!0}}]);