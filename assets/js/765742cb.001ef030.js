"use strict";(self.webpackChunkcosmos_sdk_docs=self.webpackChunkcosmos_sdk_docs||[]).push([[47595],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),c=a,g=u["".concat(l,".").concat(c)]||u[c]||m[c]||i;return n?r.createElement(g,s(s({ref:t},d),{},{components:n})):r.createElement(g,s({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},81364:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:1},s="Messages and Queries",o={unversionedId:"build/building-modules/messages-and-queries",id:"version-0.5/build/building-modules/messages-and-queries",title:"Messages and Queries",description:"Msgs and Queries are the two primary objects handled by modules. Most of the core components defined in a module, like Msg services, keepers and Query services, exist to process messages and queries.",source:"@site/versioned_docs/version-0.5/build/building-modules/02-messages-and-queries.md",sourceDirName:"build/building-modules",slug:"/build/building-modules/messages-and-queries",permalink:"/v0.50/build/building-modules/messages-and-queries",draft:!1,tags:[],version:"0.5",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"buildSidebar",previous:{title:"Module Manager",permalink:"/v0.50/build/building-modules/module-manager"},next:{title:"Msg Services",permalink:"/v0.50/build/building-modules/msg-services"}},l={},p=[{value:"Messages",id:"messages",level:2},{value:"<code>Msg</code> Services",id:"msg-services",level:3},{value:"<code>sdk.Msg</code> Interface",id:"sdkmsg-interface",level:3},{value:"Queries",id:"queries",level:2},{value:"gRPC Queries",id:"grpc-queries",level:3},{value:"Store Queries",id:"store-queries",level:3}],d={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"messages-and-queries"},"Messages and Queries"),(0,a.kt)("admonition",{title:"Synopsis",type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"Msg"),"s and ",(0,a.kt)("inlineCode",{parentName:"p"},"Queries")," are the two primary objects handled by modules. Most of the core components defined in a module, like ",(0,a.kt)("inlineCode",{parentName:"p"},"Msg")," services, ",(0,a.kt)("inlineCode",{parentName:"p"},"keeper"),"s and ",(0,a.kt)("inlineCode",{parentName:"p"},"Query")," services, exist to process ",(0,a.kt)("inlineCode",{parentName:"p"},"message"),"s and ",(0,a.kt)("inlineCode",{parentName:"p"},"queries"),".")),(0,a.kt)("admonition",{title:"Pre-requisite Readings",type:"note"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/v0.50/build/building-modules/intro"},"Introduction to Cosmos SDK Modules")))),(0,a.kt)("h2",{id:"messages"},"Messages"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Msg"),"s are objects whose end-goal is to trigger state-transitions. They are wrapped in ",(0,a.kt)("a",{parentName:"p",href:"/v0.50/learn/advanced/transactions"},"transactions"),", which may contain one or more of them."),(0,a.kt)("p",null,"When a transaction is relayed from the underlying consensus engine to the Cosmos SDK application, it is first decoded by ",(0,a.kt)("a",{parentName:"p",href:"/v0.50/learn/advanced/baseapp"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseApp")),". Then, each message contained in the transaction is extracted and routed to the appropriate module via ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseApp"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"MsgServiceRouter")," so that it can be processed by the module's ",(0,a.kt)("a",{parentName:"p",href:"/v0.50/build/building-modules/msg-services"},(0,a.kt)("inlineCode",{parentName:"a"},"Msg")," service"),". For a more detailed explanation of the lifecycle of a transaction, click ",(0,a.kt)("a",{parentName:"p",href:"/v0.50/learn/beginner/tx-lifecycle"},"here"),"."),(0,a.kt)("h3",{id:"msg-services"},(0,a.kt)("inlineCode",{parentName:"h3"},"Msg")," Services"),(0,a.kt)("p",null,"Defining Protobuf ",(0,a.kt)("inlineCode",{parentName:"p"},"Msg")," services is the recommended way to handle messages. A Protobuf ",(0,a.kt)("inlineCode",{parentName:"p"},"Msg")," service should be created for each module, typically in ",(0,a.kt)("inlineCode",{parentName:"p"},"tx.proto")," (see more info about ",(0,a.kt)("a",{parentName:"p",href:"/v0.50/learn/advanced/encoding#faq"},"conventions and naming"),"). It must have an RPC service method defined for each message in the module."),(0,a.kt)("p",null,"Each ",(0,a.kt)("inlineCode",{parentName:"p"},"Msg")," service method must have exactly one argument, which must implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"sdk.Msg")," interface, and a Protobuf response. The naming convention is to call the RPC argument ",(0,a.kt)("inlineCode",{parentName:"p"},"Msg<service-rpc-name>")," and the RPC response ",(0,a.kt)("inlineCode",{parentName:"p"},"Msg<service-rpc-name>Response"),". For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"rpc Send(MsgSend) returns (MsgSendResponse);\n")),(0,a.kt)("p",null,"See an example of a ",(0,a.kt)("inlineCode",{parentName:"p"},"Msg")," service definition from ",(0,a.kt)("inlineCode",{parentName:"p"},"x/bank")," module:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/28fa3b8/x/bank/proto/cosmos/bank/v1beta1/tx.proto#L13-L41\n")),(0,a.kt)("h3",{id:"sdkmsg-interface"},(0,a.kt)("inlineCode",{parentName:"h3"},"sdk.Msg")," Interface"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"sdk.Msg")," is a alias of ",(0,a.kt)("inlineCode",{parentName:"p"},"proto.Message"),". "),(0,a.kt)("p",null,"To attach a ",(0,a.kt)("inlineCode",{parentName:"p"},"ValidateBasic()")," method to a message then you must add methods to the type adhereing to the ",(0,a.kt)("inlineCode",{parentName:"p"},"HasValidateBasic"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/9c1e8b247cd47b5d3decda6e86fbc3bc996ee5d7/types/tx_msg.go#L84-L88\n")),(0,a.kt)("p",null,"Signers from the ",(0,a.kt)("inlineCode",{parentName:"p"},"GetSigners()")," call is automated via a protobuf annotation.\nRead more about the signer field ",(0,a.kt)("a",{parentName:"p",href:"/v0.50/build/building-modules/protobuf-annotations"},"here"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/e6848d99b55a65d014375b295bdd7f9641aac95e/proto/cosmos/bank/v1beta1/tx.proto#L40\n")),(0,a.kt)("p",null,"If there is a need for custom signers then there is an alternative path which can be taken. A function which returns ",(0,a.kt)("inlineCode",{parentName:"p"},"signing.CustomGetSigner")," for a specific message can be defined. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func ProvideCustomMsgTransactionGetSigners() signing.CustomGetSigner {\n    // Extract the signer from the signature.\n    signer, err := coretypes.LatestSigner(Tx).Sender(ethTx)\n    if err != nil {\n        return nil, err\n    }\n\n    // Return the signer in the required format.\n    return signing.CustomGetSigner{\n        MsgType: protoreflect.FullName(gogoproto.MessageName(&types.CustomMsg{})),\n        Fn: func(msg proto.Message) ([][]byte, error) {\n            return [][]byte{signer}, nil\n        }\n    }\n}\n")),(0,a.kt)("p",null,"This can be provided to the application using depinject's ",(0,a.kt)("inlineCode",{parentName:"p"},"Provide")," method in the module that defines the type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"func init() {\n    appconfig.RegisterModule(&modulev1.Module{},\n-       appconfig.Provide(ProvideModule),\n+       appconfig.Provide(ProvideModule, ProvideCustomMsgTransactionGetSigners),\n    )\n}\n")),(0,a.kt)("p",null,"The Cosmos SDK uses Protobuf definitions to generate client and server code:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"MsgServer")," interface defines the server API for the ",(0,a.kt)("inlineCode",{parentName:"li"},"Msg")," service and its implementation is described as part of the ",(0,a.kt)("a",{parentName:"li",href:"/v0.50/build/building-modules/msg-services"},(0,a.kt)("inlineCode",{parentName:"a"},"Msg")," services")," documentation."),(0,a.kt)("li",{parentName:"ul"},"Structures are generated for all RPC request and response types.")),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"RegisterMsgServer")," method is also generated and should be used to register the module's ",(0,a.kt)("inlineCode",{parentName:"p"},"MsgServer")," implementation in ",(0,a.kt)("inlineCode",{parentName:"p"},"RegisterServices")," method from the ",(0,a.kt)("a",{parentName:"p",href:"/v0.50/build/building-modules/module-manager#appmodule"},(0,a.kt)("inlineCode",{parentName:"a"},"AppModule")," interface"),"."),(0,a.kt)("p",null,"In order for clients (CLI and gRPC-gateway) to have these URLs registered, the Cosmos SDK provides the function ",(0,a.kt)("inlineCode",{parentName:"p"},"RegisterMsgServiceDesc(registry codectypes.InterfaceRegistry, sd *grpc.ServiceDesc)")," that should be called inside module's ",(0,a.kt)("a",{parentName:"p",href:"/v0.50/build/building-modules/module-manager#appmodulebasic"},(0,a.kt)("inlineCode",{parentName:"a"},"RegisterInterfaces"))," method, using the proto-generated ",(0,a.kt)("inlineCode",{parentName:"p"},"&_Msg_serviceDesc")," as ",(0,a.kt)("inlineCode",{parentName:"p"},"*grpc.ServiceDesc")," argument."),(0,a.kt)("h2",{id:"queries"},"Queries"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"query")," is a request for information made by end-users of applications through an interface and processed by a full-node. A ",(0,a.kt)("inlineCode",{parentName:"p"},"query")," is received by a full-node through its consensus engine and relayed to the application via the ABCI. It is then routed to the appropriate module via ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseApp"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"QueryRouter")," so that it can be processed by the module's query service (./04-query-services.md). For a deeper look at the lifecycle of a ",(0,a.kt)("inlineCode",{parentName:"p"},"query"),", click ",(0,a.kt)("a",{parentName:"p",href:"/v0.50/learn/beginner/query-lifecycle"},"here"),"."),(0,a.kt)("h3",{id:"grpc-queries"},"gRPC Queries"),(0,a.kt)("p",null,"Queries should be defined using ",(0,a.kt)("a",{parentName:"p",href:"https://protobuf.dev/programming-guides/proto2/"},"Protobuf services"),". A ",(0,a.kt)("inlineCode",{parentName:"p"},"Query")," service should be created per module in ",(0,a.kt)("inlineCode",{parentName:"p"},"query.proto"),". This service lists endpoints starting with ",(0,a.kt)("inlineCode",{parentName:"p"},"rpc"),"."),(0,a.kt)("p",null,"Here's an example of such a ",(0,a.kt)("inlineCode",{parentName:"p"},"Query")," service definition:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/proto/cosmos/auth/v1beta1/query.proto#L14-L89\n")),(0,a.kt)("p",null,"As ",(0,a.kt)("inlineCode",{parentName:"p"},"proto.Message"),"s, generated ",(0,a.kt)("inlineCode",{parentName:"p"},"Response")," types implement by default ",(0,a.kt)("inlineCode",{parentName:"p"},"String()")," method of ",(0,a.kt)("a",{parentName:"p",href:"https://pkg.go.dev/fmt#Stringer"},(0,a.kt)("inlineCode",{parentName:"a"},"fmt.Stringer")),"."),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"RegisterQueryServer")," method is also generated and should be used to register the module's query server in the ",(0,a.kt)("inlineCode",{parentName:"p"},"RegisterServices")," method from the ",(0,a.kt)("a",{parentName:"p",href:"/v0.50/build/building-modules/module-manager#appmodule"},(0,a.kt)("inlineCode",{parentName:"a"},"AppModule")," interface"),"."),(0,a.kt)("h3",{id:"store-queries"},"Store Queries"),(0,a.kt)("p",null,"Store queries query directly for store keys. They use ",(0,a.kt)("inlineCode",{parentName:"p"},"clientCtx.QueryABCI(req abci.RequestQuery)")," to return the full ",(0,a.kt)("inlineCode",{parentName:"p"},"abci.ResponseQuery")," with inclusion Merkle proofs."),(0,a.kt)("p",null,"See following examples:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/baseapp/abci.go#L864-L894\n")))}m.isMDXComponent=!0}}]);