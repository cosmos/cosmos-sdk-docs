"use strict";(self.webpackChunkcosmos_sdk_docs=self.webpackChunkcosmos_sdk_docs||[]).push([[73985],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>b});var o=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function p(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=o.createContext({}),l=function(e){var r=o.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):p(p({},r),e)),t},c=function(e){var r=l(e.components);return o.createElement(i.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},m=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=n,b=d["".concat(i,".").concat(m)]||d[m]||u[m]||a;return t?o.createElement(b,p(p({ref:r},c),{},{components:t})):o.createElement(b,p({ref:r},c))}));function b(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,p=new Array(a);p[0]=m;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s[d]="string"==typeof e?e:n,p[1]=s;for(var l=2;l<a;l++)p[l]=t[l];return o.createElement.apply(null,p)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},90929:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>p,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=t(87462),n=(t(67294),t(3905));const a={},p="Process Proposal",s={unversionedId:"build/abci/process-proposal",id:"version-0.5/build/abci/process-proposal",title:"Process Proposal",description:"ProcessProposal handles the validation of a proposal from PrepareProposal,",source:"@site/versioned_docs/version-0.5/build/abci/02-process-proposal.md",sourceDirName:"build/abci",slug:"/build/abci/process-proposal",permalink:"/v0.50/build/abci/process-proposal",draft:!1,tags:[],version:"0.5",sidebarPosition:2,frontMatter:{},sidebar:"buildSidebar",previous:{title:"Prepare Proposal",permalink:"/v0.50/build/abci/prepare-proposal"},next:{title:"Vote Extensions",permalink:"/v0.50/build/abci/vote-extensions"}},i={},l=[],c={toc:l},d="wrapper";function u(e){let{components:r,...t}=e;return(0,n.kt)(d,(0,o.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"process-proposal"},"Process Proposal"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"ProcessProposal")," handles the validation of a proposal from ",(0,n.kt)("inlineCode",{parentName:"p"},"PrepareProposal"),",\nwhich also includes a block header. Meaning, that after a block has been proposed\nthe other validators have the right to vote on a block. The validator in the\ndefault implementation of ",(0,n.kt)("inlineCode",{parentName:"p"},"PrepareProposal")," runs basic validity checks on each\ntransaction."),(0,n.kt)("p",null,"Note, ",(0,n.kt)("inlineCode",{parentName:"p"},"ProcessProposal")," MAY NOT be non-deterministic, i.e. it must be deterministic.\nThis means if ",(0,n.kt)("inlineCode",{parentName:"p"},"ProcessProposal")," panics or fails and we reject, all honest validator\nprocesses will prevote nil and the CometBFT round will proceed again until a valid\nproposal is proposed."),(0,n.kt)("p",null,"Here is the implementation of the default implementation:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/baseapp/abci_utils.go#L153-L159\n")),(0,n.kt)("p",null,"Like ",(0,n.kt)("inlineCode",{parentName:"p"},"PrepareProposal")," this implementation is the default and can be modified by\nthe application developer in ",(0,n.kt)("a",{parentName:"p",href:"./01-app-go-v2.md"},(0,n.kt)("inlineCode",{parentName:"a"},"app.go")),". If you decide to implement\nyour own ",(0,n.kt)("inlineCode",{parentName:"p"},"ProcessProposal")," handler, you must be sure to ensure that the transactions\nprovided in the proposal DO NOT exceed the maximum block gas and ",(0,n.kt)("inlineCode",{parentName:"p"},"maxtxbytes")," (if set)."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"processOpt := func(app *baseapp.BaseApp) {\nabciPropHandler := baseapp.NewDefaultProposalHandler(mempool, app)\napp.SetProcessProposal(abciPropHandler.ProcessProposalHandler())\n}\n\nbaseAppOptions = append(baseAppOptions, processOpt)\n")))}u.isMDXComponent=!0}}]);